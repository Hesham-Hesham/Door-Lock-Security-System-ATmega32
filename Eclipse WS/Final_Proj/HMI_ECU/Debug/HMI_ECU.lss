
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002c5e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00002c5e  00002cf2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000f  0080016c  0080016c  00002dfe  2**0
                  ALLOC
  3 .stab         00002a54  00000000  00000000  00002e00  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000012bb  00000000  00000000  00005854  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00006b0f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00006c4f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00006dbf  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008a08  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  000098f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000a6a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000a800  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000aa8d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b25b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 5d 13 	jmp	0x26ba	; 0x26ba <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e5       	ldi	r30, 0x5E	; 94
      68:	fc e2       	ldi	r31, 0x2C	; 44
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ab 37       	cpi	r26, 0x7B	; 123
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 2d 16 	jmp	0x2c5a	; 0x2c5a <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a6 e5       	ldi	r26, 0x56	; 86
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 b1 15 	jmp	0x2b62	; 0x2b62 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	86 e5       	ldi	r24, 0x56	; 86
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 cd 15 	jmp	0x2b9a	; 0x2b9a <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 d9 15 	jmp	0x2bb2	; 0x2bb2 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 c1 15 	jmp	0x2b82	; 0x2b82 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 dd 15 	jmp	0x2bba	; 0x2bba <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:


UART_ConfigType UART_HMI={UART_8_Bits,UART_PARITY_EVEN,UART_STOPBIT_1_BIT,9600,UART_ASYNCHRONOUS};
Timer1_ConfigType Timer1_ConfigStruct = {0,31250,F_CPU_256,CTC_OCR};

int main(){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <main+0x6>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62

	LCD_init();
     b50:	0e 94 32 0e 	call	0x1c64	; 0x1c64 <LCD_init>

	LCD_displayString("Pls enter pass:");
     b54:	80 e6       	ldi	r24, 0x60	; 96
     b56:	90 e0       	ldi	r25, 0x00	; 0
     b58:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
	LCD_moveCursor(1,0); /* Move the cursor to the second row */
     b5c:	81 e0       	ldi	r24, 0x01	; 1
     b5e:	60 e0       	ldi	r22, 0x00	; 0
     b60:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_moveCursor>

	SREG |= (1<<7);
     b64:	af e5       	ldi	r26, 0x5F	; 95
     b66:	b0 e0       	ldi	r27, 0x00	; 0
     b68:	ef e5       	ldi	r30, 0x5F	; 95
     b6a:	f0 e0       	ldi	r31, 0x00	; 0
     b6c:	80 81       	ld	r24, Z
     b6e:	80 68       	ori	r24, 0x80	; 128
     b70:	8c 93       	st	X, r24


	UART_init(&UART_HMI);
     b72:	8e e5       	ldi	r24, 0x5E	; 94
     b74:	91 e0       	ldi	r25, 0x01	; 1
     b76:	0e 94 5e 14 	call	0x28bc	; 0x28bc <UART_init>
	for(;;){


		switch(stage){
     b7a:	80 91 6e 01 	lds	r24, 0x016E
     b7e:	28 2f       	mov	r18, r24
     b80:	30 e0       	ldi	r19, 0x00	; 0
     b82:	3a 83       	std	Y+2, r19	; 0x02
     b84:	29 83       	std	Y+1, r18	; 0x01
     b86:	89 81       	ldd	r24, Y+1	; 0x01
     b88:	9a 81       	ldd	r25, Y+2	; 0x02
     b8a:	84 30       	cpi	r24, 0x04	; 4
     b8c:	91 05       	cpc	r25, r1
     b8e:	09 f4       	brne	.+2      	; 0xb92 <main+0x4c>
     b90:	96 c0       	rjmp	.+300    	; 0xcbe <main+0x178>
     b92:	29 81       	ldd	r18, Y+1	; 0x01
     b94:	3a 81       	ldd	r19, Y+2	; 0x02
     b96:	25 30       	cpi	r18, 0x05	; 5
     b98:	31 05       	cpc	r19, r1
     b9a:	dc f4       	brge	.+54     	; 0xbd2 <main+0x8c>
     b9c:	89 81       	ldd	r24, Y+1	; 0x01
     b9e:	9a 81       	ldd	r25, Y+2	; 0x02
     ba0:	81 30       	cpi	r24, 0x01	; 1
     ba2:	91 05       	cpc	r25, r1
     ba4:	91 f1       	breq	.+100    	; 0xc0a <main+0xc4>
     ba6:	29 81       	ldd	r18, Y+1	; 0x01
     ba8:	3a 81       	ldd	r19, Y+2	; 0x02
     baa:	22 30       	cpi	r18, 0x02	; 2
     bac:	31 05       	cpc	r19, r1
     bae:	2c f4       	brge	.+10     	; 0xbba <main+0x74>
     bb0:	89 81       	ldd	r24, Y+1	; 0x01
     bb2:	9a 81       	ldd	r25, Y+2	; 0x02
     bb4:	00 97       	sbiw	r24, 0x00	; 0
     bb6:	31 f1       	breq	.+76     	; 0xc04 <main+0xbe>
     bb8:	e0 cf       	rjmp	.-64     	; 0xb7a <main+0x34>
     bba:	29 81       	ldd	r18, Y+1	; 0x01
     bbc:	3a 81       	ldd	r19, Y+2	; 0x02
     bbe:	22 30       	cpi	r18, 0x02	; 2
     bc0:	31 05       	cpc	r19, r1
     bc2:	31 f1       	breq	.+76     	; 0xc10 <main+0xca>
     bc4:	89 81       	ldd	r24, Y+1	; 0x01
     bc6:	9a 81       	ldd	r25, Y+2	; 0x02
     bc8:	83 30       	cpi	r24, 0x03	; 3
     bca:	91 05       	cpc	r25, r1
     bcc:	09 f4       	brne	.+2      	; 0xbd0 <main+0x8a>
     bce:	5b c0       	rjmp	.+182    	; 0xc86 <main+0x140>
     bd0:	d4 cf       	rjmp	.-88     	; 0xb7a <main+0x34>
     bd2:	29 81       	ldd	r18, Y+1	; 0x01
     bd4:	3a 81       	ldd	r19, Y+2	; 0x02
     bd6:	26 30       	cpi	r18, 0x06	; 6
     bd8:	31 05       	cpc	r19, r1
     bda:	09 f4       	brne	.+2      	; 0xbde <main+0x98>
     bdc:	a1 c0       	rjmp	.+322    	; 0xd20 <main+0x1da>
     bde:	89 81       	ldd	r24, Y+1	; 0x01
     be0:	9a 81       	ldd	r25, Y+2	; 0x02
     be2:	86 30       	cpi	r24, 0x06	; 6
     be4:	91 05       	cpc	r25, r1
     be6:	0c f4       	brge	.+2      	; 0xbea <main+0xa4>
     be8:	6d c0       	rjmp	.+218    	; 0xcc4 <main+0x17e>
     bea:	29 81       	ldd	r18, Y+1	; 0x01
     bec:	3a 81       	ldd	r19, Y+2	; 0x02
     bee:	27 30       	cpi	r18, 0x07	; 7
     bf0:	31 05       	cpc	r19, r1
     bf2:	09 f4       	brne	.+2      	; 0xbf6 <main+0xb0>
     bf4:	98 c0       	rjmp	.+304    	; 0xd26 <main+0x1e0>
     bf6:	89 81       	ldd	r24, Y+1	; 0x01
     bf8:	9a 81       	ldd	r25, Y+2	; 0x02
     bfa:	88 30       	cpi	r24, 0x08	; 8
     bfc:	91 05       	cpc	r25, r1
     bfe:	09 f4       	brne	.+2      	; 0xc02 <main+0xbc>
     c00:	c3 c0       	rjmp	.+390    	; 0xd88 <main+0x242>
     c02:	bb cf       	rjmp	.-138    	; 0xb7a <main+0x34>
		case 0:				//creating password 1st time
			enter_password();
     c04:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <enter_password>
     c08:	b8 cf       	rjmp	.-144    	; 0xb7a <main+0x34>
			break;


		case 1:				//creating password 2st time
			enter_password();
     c0a:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <enter_password>
     c0e:	b5 cf       	rjmp	.-150    	; 0xb7a <main+0x34>
			break;

		case 2:				//waiting for order from CONTROL_ECU
			UART_recievedData=UART_recieveByte();
     c10:	0e 94 14 15 	call	0x2a28	; 0x2a28 <UART_recieveByte>
     c14:	80 93 78 01 	sts	0x0178, r24
			if(UART_recievedData==0){		//passwords don't match
     c18:	80 91 78 01 	lds	r24, 0x0178
     c1c:	88 23       	and	r24, r24
     c1e:	01 f5       	brne	.+64     	; 0xc60 <main+0x11a>
				LCD_clearScreen();
     c20:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
				LCD_displayString("passwords don't");
     c24:	80 e7       	ldi	r24, 0x70	; 112
     c26:	90 e0       	ldi	r25, 0x00	; 0
     c28:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
				LCD_displayStringRowColumn(1, 0, "match");
     c2c:	20 e8       	ldi	r18, 0x80	; 128
     c2e:	30 e0       	ldi	r19, 0x00	; 0
     c30:	81 e0       	ldi	r24, 0x01	; 1
     c32:	60 e0       	ldi	r22, 0x00	; 0
     c34:	a9 01       	movw	r20, r18
     c36:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_displayStringRowColumn>
				Timer_1_delay(1);
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	70 e0       	ldi	r23, 0x00	; 0
     c3e:	80 e0       	ldi	r24, 0x00	; 0
     c40:	90 e0       	ldi	r25, 0x00	; 0
     c42:	0e 94 28 09 	call	0x1250	; 0x1250 <Timer_1_delay>

				LCD_clearScreen();
     c46:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
				LCD_displayString("Pls enter pass:");
     c4a:	80 e6       	ldi	r24, 0x60	; 96
     c4c:	90 e0       	ldi	r25, 0x00	; 0
     c4e:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
				LCD_moveCursor(1,0); /* Move the cursor to the second row */
     c52:	81 e0       	ldi	r24, 0x01	; 1
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_moveCursor>

				stage=0;
     c5a:	10 92 6e 01 	sts	0x016E, r1
     c5e:	8d cf       	rjmp	.-230    	; 0xb7a <main+0x34>
			}else if(UART_recievedData==1){	//passwords match
     c60:	80 91 78 01 	lds	r24, 0x0178
     c64:	81 30       	cpi	r24, 0x01	; 1
     c66:	09 f0       	breq	.+2      	; 0xc6a <main+0x124>
     c68:	88 cf       	rjmp	.-240    	; 0xb7a <main+0x34>
				LCD_displayString("passwords match");
     c6a:	86 e8       	ldi	r24, 0x86	; 134
     c6c:	90 e0       	ldi	r25, 0x00	; 0
     c6e:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
				Timer_1_delay(1);
     c72:	61 e0       	ldi	r22, 0x01	; 1
     c74:	70 e0       	ldi	r23, 0x00	; 0
     c76:	80 e0       	ldi	r24, 0x00	; 0
     c78:	90 e0       	ldi	r25, 0x00	; 0
     c7a:	0e 94 28 09 	call	0x1250	; 0x1250 <Timer_1_delay>

				stage=3;
     c7e:	83 e0       	ldi	r24, 0x03	; 3
     c80:	80 93 6e 01 	sts	0x016E, r24
     c84:	7a cf       	rjmp	.-268    	; 0xb7a <main+0x34>
			}
			break;

		case 3:				//checking choice
			LCD_clearScreen();
     c86:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
			LCD_displayStringRowColumn(0, 0, "+ : Open Door");
     c8a:	26 e9       	ldi	r18, 0x96	; 150
     c8c:	30 e0       	ldi	r19, 0x00	; 0
     c8e:	80 e0       	ldi	r24, 0x00	; 0
     c90:	60 e0       	ldi	r22, 0x00	; 0
     c92:	a9 01       	movw	r20, r18
     c94:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_displayStringRowColumn>
			LCD_displayStringRowColumn(1, 0, "- : Change Pass");
     c98:	24 ea       	ldi	r18, 0xA4	; 164
     c9a:	30 e0       	ldi	r19, 0x00	; 0
     c9c:	81 e0       	ldi	r24, 0x01	; 1
     c9e:	60 e0       	ldi	r22, 0x00	; 0
     ca0:	a9 01       	movw	r20, r18
     ca2:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_displayStringRowColumn>
			i=0;
     ca6:	10 92 6d 01 	sts	0x016D, r1
			enter_doorOrChange_choice();
     caa:	0e 94 17 08 	call	0x102e	; 0x102e <enter_doorOrChange_choice>
			dummy_1=enter_doorOrChange_choice_return;
     cae:	80 91 76 01 	lds	r24, 0x0176
     cb2:	80 93 77 01 	sts	0x0177, r24
			stage = 4;
     cb6:	84 e0       	ldi	r24, 0x04	; 4
     cb8:	80 93 6e 01 	sts	0x016E, r24
     cbc:	5e cf       	rjmp	.-324    	; 0xb7a <main+0x34>
			break;

		case 4:				//checking password to open door or change password
			enter_password();
     cbe:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <enter_password>
     cc2:	5b cf       	rjmp	.-330    	; 0xb7a <main+0x34>

			break;

		case 5:				//waiting for order from CONTROL_ECU

			UART_recievedData=UART_recieveByte();
     cc4:	0e 94 14 15 	call	0x2a28	; 0x2a28 <UART_recieveByte>
     cc8:	80 93 78 01 	sts	0x0178, r24

			if(UART_recievedData==0){		//passwords don't match
     ccc:	80 91 78 01 	lds	r24, 0x0178
     cd0:	88 23       	and	r24, r24
     cd2:	71 f4       	brne	.+28     	; 0xcf0 <main+0x1aa>
//				LCD_displayString("passwords don't");
//				LCD_displayStringRowColumn(1, 0, "match");
//				Timer_1_delay(1);

				LCD_clearScreen();
     cd4:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
				LCD_displayString("Pls enter pass:");
     cd8:	80 e6       	ldi	r24, 0x60	; 96
     cda:	90 e0       	ldi	r25, 0x00	; 0
     cdc:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
				LCD_moveCursor(1,0); /* Move the cursor to the second row */
     ce0:	81 e0       	ldi	r24, 0x01	; 1
     ce2:	60 e0       	ldi	r22, 0x00	; 0
     ce4:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_moveCursor>
				stage=6;
     ce8:	86 e0       	ldi	r24, 0x06	; 6
     cea:	80 93 6e 01 	sts	0x016E, r24
     cee:	45 cf       	rjmp	.-374    	; 0xb7a <main+0x34>

			}else if(UART_recievedData==1){	//passwords match
     cf0:	80 91 78 01 	lds	r24, 0x0178
     cf4:	81 30       	cpi	r24, 0x01	; 1
     cf6:	09 f0       	breq	.+2      	; 0xcfa <main+0x1b4>
     cf8:	40 cf       	rjmp	.-384    	; 0xb7a <main+0x34>
				LCD_clearScreen();
     cfa:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
				LCD_displayString("passwords match");
     cfe:	86 e8       	ldi	r24, 0x86	; 134
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
//				LCD_moveCursor(1, 0);
//				LCD_intgerToString(dummy_1);
				Timer_1_delay(1);
     d06:	61 e0       	ldi	r22, 0x01	; 1
     d08:	70 e0       	ldi	r23, 0x00	; 0
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	90 e0       	ldi	r25, 0x00	; 0
     d0e:	0e 94 28 09 	call	0x1250	; 0x1250 <Timer_1_delay>

				UART_sendByte(dummy_1);
     d12:	80 91 77 01 	lds	r24, 0x0177
     d16:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UART_sendByte>
				operate_choice();
     d1a:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <operate_choice>
     d1e:	2d cf       	rjmp	.-422    	; 0xb7a <main+0x34>
			break;


		case 6:			//wrong password

			enter_password();
     d20:	0e 94 e1 06 	call	0xdc2	; 0xdc2 <enter_password>
     d24:	2a cf       	rjmp	.-428    	; 0xb7a <main+0x34>

			break;

		case 7:			//confirm wrong password
			worng_password_counter++;
     d26:	80 91 6f 01 	lds	r24, 0x016F
     d2a:	8f 5f       	subi	r24, 0xFF	; 255
     d2c:	80 93 6f 01 	sts	0x016F, r24
			UART_recievedData=UART_recieveByte();
     d30:	0e 94 14 15 	call	0x2a28	; 0x2a28 <UART_recieveByte>
     d34:	80 93 78 01 	sts	0x0178, r24


			if(UART_recievedData==0){		//passwords don't match
     d38:	80 91 78 01 	lds	r24, 0x0178
     d3c:	88 23       	and	r24, r24
     d3e:	b1 f4       	brne	.+44     	; 0xd6c <main+0x226>
//				LCD_clearScreen();
//				LCD_displayString("passwords don't");
//				LCD_displayStringRowColumn(1, 0, "match");
//				_delay_ms(1000);

				LCD_clearScreen();
     d40:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
				LCD_displayString("Pls enter pass:");
     d44:	80 e6       	ldi	r24, 0x60	; 96
     d46:	90 e0       	ldi	r25, 0x00	; 0
     d48:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
				LCD_moveCursor(1,0); /* Move the cursor to the second row */
     d4c:	81 e0       	ldi	r24, 0x01	; 1
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_moveCursor>


				if(worng_password_counter>=2){
     d54:	80 91 6f 01 	lds	r24, 0x016F
     d58:	82 30       	cpi	r24, 0x02	; 2
     d5a:	20 f0       	brcs	.+8      	; 0xd64 <main+0x21e>
					stage = 8;
     d5c:	88 e0       	ldi	r24, 0x08	; 8
     d5e:	80 93 6e 01 	sts	0x016E, r24
     d62:	0b cf       	rjmp	.-490    	; 0xb7a <main+0x34>
					break;
				}
				stage=6;
     d64:	86 e0       	ldi	r24, 0x06	; 6
     d66:	80 93 6e 01 	sts	0x016E, r24
     d6a:	07 cf       	rjmp	.-498    	; 0xb7a <main+0x34>
			}else if(UART_recievedData==1){		//passwords finally match
     d6c:	80 91 78 01 	lds	r24, 0x0178
     d70:	81 30       	cpi	r24, 0x01	; 1
     d72:	31 f4       	brne	.+12     	; 0xd80 <main+0x23a>
				operate_choice();
     d74:	0e 94 d3 08 	call	0x11a6	; 0x11a6 <operate_choice>
				stage = 3;
     d78:	83 e0       	ldi	r24, 0x03	; 3
     d7a:	80 93 6e 01 	sts	0x016E, r24
     d7e:	fd ce       	rjmp	.-518    	; 0xb7a <main+0x34>
			}else{
				stage = 8;
     d80:	88 e0       	ldi	r24, 0x08	; 8
     d82:	80 93 6e 01 	sts	0x016E, r24
     d86:	f9 ce       	rjmp	.-526    	; 0xb7a <main+0x34>
			}
			break;

		case 8:		//locked + alarm
			LCD_clearScreen();
     d88:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
			LCD_displayString("Error");
     d8c:	84 eb       	ldi	r24, 0xB4	; 180
     d8e:	90 e0       	ldi	r25, 0x00	; 0
     d90:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
			Timer_1_delay(1);
     d94:	61 e0       	ldi	r22, 0x01	; 1
     d96:	70 e0       	ldi	r23, 0x00	; 0
     d98:	80 e0       	ldi	r24, 0x00	; 0
     d9a:	90 e0       	ldi	r25, 0x00	; 0
     d9c:	0e 94 28 09 	call	0x1250	; 0x1250 <Timer_1_delay>

			UART_recievedData=UART_recieveByte();
     da0:	0e 94 14 15 	call	0x2a28	; 0x2a28 <UART_recieveByte>
     da4:	80 93 78 01 	sts	0x0178, r24
			if(UART_recievedData==1){		//locked + alarm time has elapsed
     da8:	80 91 78 01 	lds	r24, 0x0178
     dac:	81 30       	cpi	r24, 0x01	; 1
     dae:	09 f0       	breq	.+2      	; 0xdb2 <main+0x26c>
     db0:	e4 ce       	rjmp	.-568    	; 0xb7a <main+0x34>
				stage = 3;
     db2:	83 e0       	ldi	r24, 0x03	; 3
     db4:	80 93 6e 01 	sts	0x016E, r24
				worng_password_counter=0;
     db8:	10 92 6f 01 	sts	0x016F, r1
				LCD_clearScreen();
     dbc:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
     dc0:	dc ce       	rjmp	.-584    	; 0xb7a <main+0x34>

00000dc2 <enter_password>:
}

//void enter_password(){
//
//}
void enter_password(void){
     dc2:	df 93       	push	r29
     dc4:	cf 93       	push	r28
     dc6:	cd b7       	in	r28, 0x3d	; 61
     dc8:	de b7       	in	r29, 0x3e	; 62
     dca:	2e 97       	sbiw	r28, 0x0e	; 14
     dcc:	0f b6       	in	r0, 0x3f	; 63
     dce:	f8 94       	cli
     dd0:	de bf       	out	0x3e, r29	; 62
     dd2:	0f be       	out	0x3f, r0	; 63
     dd4:	cd bf       	out	0x3d, r28	; 61

	pressedKey = KEYPAD_getPressedKey();
     dd6:	0e 94 9e 0c 	call	0x193c	; 0x193c <KEYPAD_getPressedKey>
     dda:	80 93 6c 01 	sts	0x016C, r24

	entered_password[i]=pressedKey;
     dde:	80 91 6d 01 	lds	r24, 0x016D
     de2:	88 2f       	mov	r24, r24
     de4:	90 e0       	ldi	r25, 0x00	; 0
     de6:	20 91 6c 01 	lds	r18, 0x016C
     dea:	fc 01       	movw	r30, r24
     dec:	ef 58       	subi	r30, 0x8F	; 143
     dee:	fe 4f       	sbci	r31, 0xFE	; 254
     df0:	20 83       	st	Z, r18
	i++;
     df2:	80 91 6d 01 	lds	r24, 0x016D
     df6:	8f 5f       	subi	r24, 0xFF	; 255
     df8:	80 93 6d 01 	sts	0x016D, r24

	if((pressedKey <= 9) && (pressedKey >= 0))
     dfc:	80 91 6c 01 	lds	r24, 0x016C
     e00:	8a 30       	cpi	r24, 0x0A	; 10
     e02:	28 f4       	brcc	.+10     	; 0xe0e <enter_password+0x4c>
	{
		LCD_displayString("*");   /* display the pressed keypad switch */
     e04:	8a eb       	ldi	r24, 0xBA	; 186
     e06:	90 e0       	ldi	r25, 0x00	; 0
     e08:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
     e0c:	72 c0       	rjmp	.+228    	; 0xef2 <enter_password+0x130>

	}else if(pressedKey == 13){
     e0e:	80 91 6c 01 	lds	r24, 0x016C
     e12:	8d 30       	cpi	r24, 0x0D	; 13
     e14:	09 f0       	breq	.+2      	; 0xe18 <enter_password+0x56>
     e16:	6d c0       	rjmp	.+218    	; 0xef2 <enter_password+0x130>
		if( i - 1 == 5){
     e18:	80 91 6d 01 	lds	r24, 0x016D
     e1c:	86 30       	cpi	r24, 0x06	; 6
     e1e:	09 f0       	breq	.+2      	; 0xe22 <enter_password+0x60>
     e20:	5b c0       	rjmp	.+182    	; 0xed8 <enter_password+0x116>
			if(stage==0){
     e22:	80 91 6e 01 	lds	r24, 0x016E
     e26:	88 23       	and	r24, r24
     e28:	c1 f4       	brne	.+48     	; 0xe5a <enter_password+0x98>
				LCD_clearScreen();
     e2a:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
				send_password(entered_password, PASSWORD_SIZE);
     e2e:	81 e7       	ldi	r24, 0x71	; 113
     e30:	91 e0       	ldi	r25, 0x01	; 1
     e32:	65 e0       	ldi	r22, 0x05	; 5
     e34:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <send_password>
				LCD_displayString("plz re-enter the");
     e38:	8c eb       	ldi	r24, 0xBC	; 188
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
				LCD_displayStringRowColumn(1, 0, "same pass: ");
     e40:	2d ec       	ldi	r18, 0xCD	; 205
     e42:	30 e0       	ldi	r19, 0x00	; 0
     e44:	81 e0       	ldi	r24, 0x01	; 1
     e46:	60 e0       	ldi	r22, 0x00	; 0
     e48:	a9 01       	movw	r20, r18
     e4a:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_displayStringRowColumn>
				stage = 1;
     e4e:	81 e0       	ldi	r24, 0x01	; 1
     e50:	80 93 6e 01 	sts	0x016E, r24
				i=0;
     e54:	10 92 6d 01 	sts	0x016D, r1
     e58:	4c c0       	rjmp	.+152    	; 0xef2 <enter_password+0x130>
			}else if(stage==1){
     e5a:	80 91 6e 01 	lds	r24, 0x016E
     e5e:	81 30       	cpi	r24, 0x01	; 1
     e60:	69 f4       	brne	.+26     	; 0xe7c <enter_password+0xba>
				LCD_clearScreen();
     e62:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
				send_password(entered_password, PASSWORD_SIZE);
     e66:	81 e7       	ldi	r24, 0x71	; 113
     e68:	91 e0       	ldi	r25, 0x01	; 1
     e6a:	65 e0       	ldi	r22, 0x05	; 5
     e6c:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <send_password>
				stage = 2;
     e70:	82 e0       	ldi	r24, 0x02	; 2
     e72:	80 93 6e 01 	sts	0x016E, r24
				i=0;
     e76:	10 92 6d 01 	sts	0x016D, r1
     e7a:	3b c0       	rjmp	.+118    	; 0xef2 <enter_password+0x130>
			}
			else if(stage==3){
     e7c:	80 91 6e 01 	lds	r24, 0x016E
     e80:	83 30       	cpi	r24, 0x03	; 3
     e82:	41 f4       	brne	.+16     	; 0xe94 <enter_password+0xd2>
				LCD_clearScreen();
     e84:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
				send_password(entered_password, PASSWORD_SIZE);
     e88:	81 e7       	ldi	r24, 0x71	; 113
     e8a:	91 e0       	ldi	r25, 0x01	; 1
     e8c:	65 e0       	ldi	r22, 0x05	; 5
     e8e:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <send_password>
     e92:	2f c0       	rjmp	.+94     	; 0xef2 <enter_password+0x130>
			}
			else if(stage==4){
     e94:	80 91 6e 01 	lds	r24, 0x016E
     e98:	84 30       	cpi	r24, 0x04	; 4
     e9a:	69 f4       	brne	.+26     	; 0xeb6 <enter_password+0xf4>
				LCD_clearScreen();
     e9c:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
				send_password(entered_password, PASSWORD_SIZE);
     ea0:	81 e7       	ldi	r24, 0x71	; 113
     ea2:	91 e0       	ldi	r25, 0x01	; 1
     ea4:	65 e0       	ldi	r22, 0x05	; 5
     ea6:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <send_password>
				stage = 5;
     eaa:	85 e0       	ldi	r24, 0x05	; 5
     eac:	80 93 6e 01 	sts	0x016E, r24
				i = 0;
     eb0:	10 92 6d 01 	sts	0x016D, r1
     eb4:	1e c0       	rjmp	.+60     	; 0xef2 <enter_password+0x130>
			}else if(stage==6){
     eb6:	80 91 6e 01 	lds	r24, 0x016E
     eba:	86 30       	cpi	r24, 0x06	; 6
     ebc:	d1 f4       	brne	.+52     	; 0xef2 <enter_password+0x130>
				LCD_clearScreen();
     ebe:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
				send_password(entered_password, PASSWORD_SIZE);
     ec2:	81 e7       	ldi	r24, 0x71	; 113
     ec4:	91 e0       	ldi	r25, 0x01	; 1
     ec6:	65 e0       	ldi	r22, 0x05	; 5
     ec8:	0e 94 f4 07 	call	0xfe8	; 0xfe8 <send_password>
				stage = 7;
     ecc:	87 e0       	ldi	r24, 0x07	; 7
     ece:	80 93 6e 01 	sts	0x016E, r24

				i=0;
     ed2:	10 92 6d 01 	sts	0x016D, r1
     ed6:	0d c0       	rjmp	.+26     	; 0xef2 <enter_password+0x130>
			}
		}else{
			LCD_clearScreen();
     ed8:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
			LCD_displayString("Err:Password has to");
     edc:	89 ed       	ldi	r24, 0xD9	; 217
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "be 5 digits long");
     ee4:	2d ee       	ldi	r18, 0xED	; 237
     ee6:	30 e0       	ldi	r19, 0x00	; 0
     ee8:	81 e0       	ldi	r24, 0x01	; 1
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	a9 01       	movw	r20, r18
     eee:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_displayStringRowColumn>
     ef2:	80 e0       	ldi	r24, 0x00	; 0
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	aa ef       	ldi	r26, 0xFA	; 250
     ef8:	b3 e4       	ldi	r27, 0x43	; 67
     efa:	8b 87       	std	Y+11, r24	; 0x0b
     efc:	9c 87       	std	Y+12, r25	; 0x0c
     efe:	ad 87       	std	Y+13, r26	; 0x0d
     f00:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f02:	6b 85       	ldd	r22, Y+11	; 0x0b
     f04:	7c 85       	ldd	r23, Y+12	; 0x0c
     f06:	8d 85       	ldd	r24, Y+13	; 0x0d
     f08:	9e 85       	ldd	r25, Y+14	; 0x0e
     f0a:	20 e0       	ldi	r18, 0x00	; 0
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	4a ef       	ldi	r20, 0xFA	; 250
     f10:	54 e4       	ldi	r21, 0x44	; 68
     f12:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f16:	dc 01       	movw	r26, r24
     f18:	cb 01       	movw	r24, r22
     f1a:	8f 83       	std	Y+7, r24	; 0x07
     f1c:	98 87       	std	Y+8, r25	; 0x08
     f1e:	a9 87       	std	Y+9, r26	; 0x09
     f20:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
     f22:	6f 81       	ldd	r22, Y+7	; 0x07
     f24:	78 85       	ldd	r23, Y+8	; 0x08
     f26:	89 85       	ldd	r24, Y+9	; 0x09
     f28:	9a 85       	ldd	r25, Y+10	; 0x0a
     f2a:	20 e0       	ldi	r18, 0x00	; 0
     f2c:	30 e0       	ldi	r19, 0x00	; 0
     f2e:	40 e8       	ldi	r20, 0x80	; 128
     f30:	5f e3       	ldi	r21, 0x3F	; 63
     f32:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f36:	88 23       	and	r24, r24
     f38:	2c f4       	brge	.+10     	; 0xf44 <enter_password+0x182>
		__ticks = 1;
     f3a:	81 e0       	ldi	r24, 0x01	; 1
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	9e 83       	std	Y+6, r25	; 0x06
     f40:	8d 83       	std	Y+5, r24	; 0x05
     f42:	3f c0       	rjmp	.+126    	; 0xfc2 <enter_password+0x200>
	else if (__tmp > 65535)
     f44:	6f 81       	ldd	r22, Y+7	; 0x07
     f46:	78 85       	ldd	r23, Y+8	; 0x08
     f48:	89 85       	ldd	r24, Y+9	; 0x09
     f4a:	9a 85       	ldd	r25, Y+10	; 0x0a
     f4c:	20 e0       	ldi	r18, 0x00	; 0
     f4e:	3f ef       	ldi	r19, 0xFF	; 255
     f50:	4f e7       	ldi	r20, 0x7F	; 127
     f52:	57 e4       	ldi	r21, 0x47	; 71
     f54:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f58:	18 16       	cp	r1, r24
     f5a:	4c f5       	brge	.+82     	; 0xfae <enter_password+0x1ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f5c:	6b 85       	ldd	r22, Y+11	; 0x0b
     f5e:	7c 85       	ldd	r23, Y+12	; 0x0c
     f60:	8d 85       	ldd	r24, Y+13	; 0x0d
     f62:	9e 85       	ldd	r25, Y+14	; 0x0e
     f64:	20 e0       	ldi	r18, 0x00	; 0
     f66:	30 e0       	ldi	r19, 0x00	; 0
     f68:	40 e2       	ldi	r20, 0x20	; 32
     f6a:	51 e4       	ldi	r21, 0x41	; 65
     f6c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f70:	dc 01       	movw	r26, r24
     f72:	cb 01       	movw	r24, r22
     f74:	bc 01       	movw	r22, r24
     f76:	cd 01       	movw	r24, r26
     f78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f7c:	dc 01       	movw	r26, r24
     f7e:	cb 01       	movw	r24, r22
     f80:	9e 83       	std	Y+6, r25	; 0x06
     f82:	8d 83       	std	Y+5, r24	; 0x05
     f84:	0f c0       	rjmp	.+30     	; 0xfa4 <enter_password+0x1e2>
     f86:	88 ec       	ldi	r24, 0xC8	; 200
     f88:	90 e0       	ldi	r25, 0x00	; 0
     f8a:	9c 83       	std	Y+4, r25	; 0x04
     f8c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f8e:	8b 81       	ldd	r24, Y+3	; 0x03
     f90:	9c 81       	ldd	r25, Y+4	; 0x04
     f92:	01 97       	sbiw	r24, 0x01	; 1
     f94:	f1 f7       	brne	.-4      	; 0xf92 <enter_password+0x1d0>
     f96:	9c 83       	std	Y+4, r25	; 0x04
     f98:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f9a:	8d 81       	ldd	r24, Y+5	; 0x05
     f9c:	9e 81       	ldd	r25, Y+6	; 0x06
     f9e:	01 97       	sbiw	r24, 0x01	; 1
     fa0:	9e 83       	std	Y+6, r25	; 0x06
     fa2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fa4:	8d 81       	ldd	r24, Y+5	; 0x05
     fa6:	9e 81       	ldd	r25, Y+6	; 0x06
     fa8:	00 97       	sbiw	r24, 0x00	; 0
     faa:	69 f7       	brne	.-38     	; 0xf86 <enter_password+0x1c4>
     fac:	14 c0       	rjmp	.+40     	; 0xfd6 <enter_password+0x214>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fae:	6f 81       	ldd	r22, Y+7	; 0x07
     fb0:	78 85       	ldd	r23, Y+8	; 0x08
     fb2:	89 85       	ldd	r24, Y+9	; 0x09
     fb4:	9a 85       	ldd	r25, Y+10	; 0x0a
     fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fba:	dc 01       	movw	r26, r24
     fbc:	cb 01       	movw	r24, r22
     fbe:	9e 83       	std	Y+6, r25	; 0x06
     fc0:	8d 83       	std	Y+5, r24	; 0x05
     fc2:	8d 81       	ldd	r24, Y+5	; 0x05
     fc4:	9e 81       	ldd	r25, Y+6	; 0x06
     fc6:	9a 83       	std	Y+2, r25	; 0x02
     fc8:	89 83       	std	Y+1, r24	; 0x01
     fca:	89 81       	ldd	r24, Y+1	; 0x01
     fcc:	9a 81       	ldd	r25, Y+2	; 0x02
     fce:	01 97       	sbiw	r24, 0x01	; 1
     fd0:	f1 f7       	brne	.-4      	; 0xfce <enter_password+0x20c>
     fd2:	9a 83       	std	Y+2, r25	; 0x02
     fd4:	89 83       	std	Y+1, r24	; 0x01
//
//	}
	_delay_ms(500); /* Press time */


}
     fd6:	2e 96       	adiw	r28, 0x0e	; 14
     fd8:	0f b6       	in	r0, 0x3f	; 63
     fda:	f8 94       	cli
     fdc:	de bf       	out	0x3e, r29	; 62
     fde:	0f be       	out	0x3f, r0	; 63
     fe0:	cd bf       	out	0x3d, r28	; 61
     fe2:	cf 91       	pop	r28
     fe4:	df 91       	pop	r29
     fe6:	08 95       	ret

00000fe8 <send_password>:




void send_password(uint8 *password_arr,uint8 size){
     fe8:	df 93       	push	r29
     fea:	cf 93       	push	r28
     fec:	00 d0       	rcall	.+0      	; 0xfee <send_password+0x6>
     fee:	00 d0       	rcall	.+0      	; 0xff0 <send_password+0x8>
     ff0:	cd b7       	in	r28, 0x3d	; 61
     ff2:	de b7       	in	r29, 0x3e	; 62
     ff4:	9b 83       	std	Y+3, r25	; 0x03
     ff6:	8a 83       	std	Y+2, r24	; 0x02
     ff8:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i;
	for(i=0;i<PASSWORD_SIZE;i++){
     ffa:	19 82       	std	Y+1, r1	; 0x01
     ffc:	0e c0       	rjmp	.+28     	; 0x101a <send_password+0x32>
		UART_sendByte(password_arr[i]);
     ffe:	89 81       	ldd	r24, Y+1	; 0x01
    1000:	28 2f       	mov	r18, r24
    1002:	30 e0       	ldi	r19, 0x00	; 0
    1004:	8a 81       	ldd	r24, Y+2	; 0x02
    1006:	9b 81       	ldd	r25, Y+3	; 0x03
    1008:	fc 01       	movw	r30, r24
    100a:	e2 0f       	add	r30, r18
    100c:	f3 1f       	adc	r31, r19
    100e:	80 81       	ld	r24, Z
    1010:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UART_sendByte>



void send_password(uint8 *password_arr,uint8 size){
	uint8 i;
	for(i=0;i<PASSWORD_SIZE;i++){
    1014:	89 81       	ldd	r24, Y+1	; 0x01
    1016:	8f 5f       	subi	r24, 0xFF	; 255
    1018:	89 83       	std	Y+1, r24	; 0x01
    101a:	89 81       	ldd	r24, Y+1	; 0x01
    101c:	85 30       	cpi	r24, 0x05	; 5
    101e:	78 f3       	brcs	.-34     	; 0xffe <send_password+0x16>
		UART_sendByte(password_arr[i]);
	}
}
    1020:	0f 90       	pop	r0
    1022:	0f 90       	pop	r0
    1024:	0f 90       	pop	r0
    1026:	0f 90       	pop	r0
    1028:	cf 91       	pop	r28
    102a:	df 91       	pop	r29
    102c:	08 95       	ret

0000102e <enter_doorOrChange_choice>:

void enter_doorOrChange_choice(void){
    102e:	df 93       	push	r29
    1030:	cf 93       	push	r28
    1032:	cd b7       	in	r28, 0x3d	; 61
    1034:	de b7       	in	r29, 0x3e	; 62
    1036:	2e 97       	sbiw	r28, 0x0e	; 14
    1038:	0f b6       	in	r0, 0x3f	; 63
    103a:	f8 94       	cli
    103c:	de bf       	out	0x3e, r29	; 62
    103e:	0f be       	out	0x3f, r0	; 63
    1040:	cd bf       	out	0x3d, r28	; 61
	pressedKey = KEYPAD_getPressedKey();
    1042:	0e 94 9e 0c 	call	0x193c	; 0x193c <KEYPAD_getPressedKey>
    1046:	80 93 6c 01 	sts	0x016C, r24
    104a:	80 e0       	ldi	r24, 0x00	; 0
    104c:	90 e0       	ldi	r25, 0x00	; 0
    104e:	aa ef       	ldi	r26, 0xFA	; 250
    1050:	b3 e4       	ldi	r27, 0x43	; 67
    1052:	8b 87       	std	Y+11, r24	; 0x0b
    1054:	9c 87       	std	Y+12, r25	; 0x0c
    1056:	ad 87       	std	Y+13, r26	; 0x0d
    1058:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    105a:	6b 85       	ldd	r22, Y+11	; 0x0b
    105c:	7c 85       	ldd	r23, Y+12	; 0x0c
    105e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1060:	9e 85       	ldd	r25, Y+14	; 0x0e
    1062:	20 e0       	ldi	r18, 0x00	; 0
    1064:	30 e0       	ldi	r19, 0x00	; 0
    1066:	4a ef       	ldi	r20, 0xFA	; 250
    1068:	54 e4       	ldi	r21, 0x44	; 68
    106a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    106e:	dc 01       	movw	r26, r24
    1070:	cb 01       	movw	r24, r22
    1072:	8f 83       	std	Y+7, r24	; 0x07
    1074:	98 87       	std	Y+8, r25	; 0x08
    1076:	a9 87       	std	Y+9, r26	; 0x09
    1078:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    107a:	6f 81       	ldd	r22, Y+7	; 0x07
    107c:	78 85       	ldd	r23, Y+8	; 0x08
    107e:	89 85       	ldd	r24, Y+9	; 0x09
    1080:	9a 85       	ldd	r25, Y+10	; 0x0a
    1082:	20 e0       	ldi	r18, 0x00	; 0
    1084:	30 e0       	ldi	r19, 0x00	; 0
    1086:	40 e8       	ldi	r20, 0x80	; 128
    1088:	5f e3       	ldi	r21, 0x3F	; 63
    108a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    108e:	88 23       	and	r24, r24
    1090:	2c f4       	brge	.+10     	; 0x109c <enter_doorOrChange_choice+0x6e>
		__ticks = 1;
    1092:	81 e0       	ldi	r24, 0x01	; 1
    1094:	90 e0       	ldi	r25, 0x00	; 0
    1096:	9e 83       	std	Y+6, r25	; 0x06
    1098:	8d 83       	std	Y+5, r24	; 0x05
    109a:	3f c0       	rjmp	.+126    	; 0x111a <enter_doorOrChange_choice+0xec>
	else if (__tmp > 65535)
    109c:	6f 81       	ldd	r22, Y+7	; 0x07
    109e:	78 85       	ldd	r23, Y+8	; 0x08
    10a0:	89 85       	ldd	r24, Y+9	; 0x09
    10a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    10a4:	20 e0       	ldi	r18, 0x00	; 0
    10a6:	3f ef       	ldi	r19, 0xFF	; 255
    10a8:	4f e7       	ldi	r20, 0x7F	; 127
    10aa:	57 e4       	ldi	r21, 0x47	; 71
    10ac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b0:	18 16       	cp	r1, r24
    10b2:	4c f5       	brge	.+82     	; 0x1106 <enter_doorOrChange_choice+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10b4:	6b 85       	ldd	r22, Y+11	; 0x0b
    10b6:	7c 85       	ldd	r23, Y+12	; 0x0c
    10b8:	8d 85       	ldd	r24, Y+13	; 0x0d
    10ba:	9e 85       	ldd	r25, Y+14	; 0x0e
    10bc:	20 e0       	ldi	r18, 0x00	; 0
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	40 e2       	ldi	r20, 0x20	; 32
    10c2:	51 e4       	ldi	r21, 0x41	; 65
    10c4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10c8:	dc 01       	movw	r26, r24
    10ca:	cb 01       	movw	r24, r22
    10cc:	bc 01       	movw	r22, r24
    10ce:	cd 01       	movw	r24, r26
    10d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10d4:	dc 01       	movw	r26, r24
    10d6:	cb 01       	movw	r24, r22
    10d8:	9e 83       	std	Y+6, r25	; 0x06
    10da:	8d 83       	std	Y+5, r24	; 0x05
    10dc:	0f c0       	rjmp	.+30     	; 0x10fc <enter_doorOrChange_choice+0xce>
    10de:	88 ec       	ldi	r24, 0xC8	; 200
    10e0:	90 e0       	ldi	r25, 0x00	; 0
    10e2:	9c 83       	std	Y+4, r25	; 0x04
    10e4:	8b 83       	std	Y+3, r24	; 0x03
    10e6:	8b 81       	ldd	r24, Y+3	; 0x03
    10e8:	9c 81       	ldd	r25, Y+4	; 0x04
    10ea:	01 97       	sbiw	r24, 0x01	; 1
    10ec:	f1 f7       	brne	.-4      	; 0x10ea <enter_doorOrChange_choice+0xbc>
    10ee:	9c 83       	std	Y+4, r25	; 0x04
    10f0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f2:	8d 81       	ldd	r24, Y+5	; 0x05
    10f4:	9e 81       	ldd	r25, Y+6	; 0x06
    10f6:	01 97       	sbiw	r24, 0x01	; 1
    10f8:	9e 83       	std	Y+6, r25	; 0x06
    10fa:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10fc:	8d 81       	ldd	r24, Y+5	; 0x05
    10fe:	9e 81       	ldd	r25, Y+6	; 0x06
    1100:	00 97       	sbiw	r24, 0x00	; 0
    1102:	69 f7       	brne	.-38     	; 0x10de <enter_doorOrChange_choice+0xb0>
    1104:	14 c0       	rjmp	.+40     	; 0x112e <enter_doorOrChange_choice+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1106:	6f 81       	ldd	r22, Y+7	; 0x07
    1108:	78 85       	ldd	r23, Y+8	; 0x08
    110a:	89 85       	ldd	r24, Y+9	; 0x09
    110c:	9a 85       	ldd	r25, Y+10	; 0x0a
    110e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1112:	dc 01       	movw	r26, r24
    1114:	cb 01       	movw	r24, r22
    1116:	9e 83       	std	Y+6, r25	; 0x06
    1118:	8d 83       	std	Y+5, r24	; 0x05
    111a:	8d 81       	ldd	r24, Y+5	; 0x05
    111c:	9e 81       	ldd	r25, Y+6	; 0x06
    111e:	9a 83       	std	Y+2, r25	; 0x02
    1120:	89 83       	std	Y+1, r24	; 0x01
    1122:	89 81       	ldd	r24, Y+1	; 0x01
    1124:	9a 81       	ldd	r25, Y+2	; 0x02
    1126:	01 97       	sbiw	r24, 0x01	; 1
    1128:	f1 f7       	brne	.-4      	; 0x1126 <enter_doorOrChange_choice+0xf8>
    112a:	9a 83       	std	Y+2, r25	; 0x02
    112c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(500); /* Press time */

	if(pressedKey == '+'){
    112e:	80 91 6c 01 	lds	r24, 0x016C
    1132:	8b 32       	cpi	r24, 0x2B	; 43
    1134:	71 f4       	brne	.+28     	; 0x1152 <enter_doorOrChange_choice+0x124>
		LCD_clearScreen();
    1136:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
		LCD_displayString("Pls enter pass:");
    113a:	80 e6       	ldi	r24, 0x60	; 96
    113c:	90 e0       	ldi	r25, 0x00	; 0
    113e:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
		LCD_moveCursor(1,0); /* Move the cursor to the second row */
    1142:	81 e0       	ldi	r24, 0x01	; 1
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_moveCursor>
		enter_doorOrChange_choice_return = 2;
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	80 93 76 01 	sts	0x0176, r24
    1150:	21 c0       	rjmp	.+66     	; 0x1194 <enter_doorOrChange_choice+0x166>
	}else if(pressedKey == '-'){
    1152:	80 91 6c 01 	lds	r24, 0x016C
    1156:	8d 32       	cpi	r24, 0x2D	; 45
    1158:	71 f4       	brne	.+28     	; 0x1176 <enter_doorOrChange_choice+0x148>
		LCD_clearScreen();
    115a:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
		LCD_displayString("Pls enter pass:");
    115e:	80 e6       	ldi	r24, 0x60	; 96
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
		LCD_moveCursor(1,0); /* Move the cursor to the second row */
    1166:	81 e0       	ldi	r24, 0x01	; 1
    1168:	60 e0       	ldi	r22, 0x00	; 0
    116a:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_moveCursor>
		enter_doorOrChange_choice_return = 1;
    116e:	81 e0       	ldi	r24, 0x01	; 1
    1170:	80 93 76 01 	sts	0x0176, r24
    1174:	0f c0       	rjmp	.+30     	; 0x1194 <enter_doorOrChange_choice+0x166>
	}else{
		LCD_clearScreen();
    1176:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
		LCD_displayString("Err:Enter + or -");
    117a:	8e ef       	ldi	r24, 0xFE	; 254
    117c:	90 e0       	ldi	r25, 0x00	; 0
    117e:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
		LCD_displayStringRowColumn(1, 0, "only");
    1182:	2f e0       	ldi	r18, 0x0F	; 15
    1184:	31 e0       	ldi	r19, 0x01	; 1
    1186:	81 e0       	ldi	r24, 0x01	; 1
    1188:	60 e0       	ldi	r22, 0x00	; 0
    118a:	a9 01       	movw	r20, r18
    118c:	0e 94 17 13 	call	0x262e	; 0x262e <LCD_displayStringRowColumn>
		enter_doorOrChange_choice_return = 0;
    1190:	10 92 76 01 	sts	0x0176, r1

	}

}
    1194:	2e 96       	adiw	r28, 0x0e	; 14
    1196:	0f b6       	in	r0, 0x3f	; 63
    1198:	f8 94       	cli
    119a:	de bf       	out	0x3e, r29	; 62
    119c:	0f be       	out	0x3f, r0	; 63
    119e:	cd bf       	out	0x3d, r28	; 61
    11a0:	cf 91       	pop	r28
    11a2:	df 91       	pop	r29
    11a4:	08 95       	ret

000011a6 <operate_choice>:


void operate_choice(void){
    11a6:	df 93       	push	r29
    11a8:	cf 93       	push	r28
    11aa:	cd b7       	in	r28, 0x3d	; 61
    11ac:	de b7       	in	r29, 0x3e	; 62
	if(dummy_1==2){		//+ : Open Door
    11ae:	80 91 77 01 	lds	r24, 0x0177
    11b2:	82 30       	cpi	r24, 0x02	; 2
    11b4:	61 f5       	brne	.+88     	; 0x120e <operate_choice+0x68>
		LCD_clearScreen();
    11b6:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
		LCD_displayString("Door is Unlocking");
    11ba:	84 e1       	ldi	r24, 0x14	; 20
    11bc:	91 e0       	ldi	r25, 0x01	; 1
    11be:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
		Timer_1_delay(15);
    11c2:	6f e0       	ldi	r22, 0x0F	; 15
    11c4:	70 e0       	ldi	r23, 0x00	; 0
    11c6:	80 e0       	ldi	r24, 0x00	; 0
    11c8:	90 e0       	ldi	r25, 0x00	; 0
    11ca:	0e 94 28 09 	call	0x1250	; 0x1250 <Timer_1_delay>
		LCD_clearScreen();
    11ce:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>

		LCD_displayString("holding motor");
    11d2:	86 e2       	ldi	r24, 0x26	; 38
    11d4:	91 e0       	ldi	r25, 0x01	; 1
    11d6:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
		Timer_1_delay(3);
    11da:	63 e0       	ldi	r22, 0x03	; 3
    11dc:	70 e0       	ldi	r23, 0x00	; 0
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	0e 94 28 09 	call	0x1250	; 0x1250 <Timer_1_delay>
		LCD_clearScreen();
    11e6:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>

		LCD_displayString("Door is locking");
    11ea:	84 e3       	ldi	r24, 0x34	; 52
    11ec:	91 e0       	ldi	r25, 0x01	; 1
    11ee:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
		Timer_1_delay(15);
    11f2:	6f e0       	ldi	r22, 0x0F	; 15
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	80 e0       	ldi	r24, 0x00	; 0
    11f8:	90 e0       	ldi	r25, 0x00	; 0
    11fa:	0e 94 28 09 	call	0x1250	; 0x1250 <Timer_1_delay>
		LCD_clearScreen();
    11fe:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
		i=0;
    1202:	10 92 6d 01 	sts	0x016D, r1
		stage = 3;
    1206:	83 e0       	ldi	r24, 0x03	; 3
    1208:	80 93 6e 01 	sts	0x016E, r24
    120c:	1e c0       	rjmp	.+60     	; 0x124a <operate_choice+0xa4>
	}
	else if(dummy_1==1){	//- : Change Pass
    120e:	80 91 77 01 	lds	r24, 0x0177
    1212:	81 30       	cpi	r24, 0x01	; 1
    1214:	d1 f4       	brne	.+52     	; 0x124a <operate_choice+0xa4>

		LCD_clearScreen();
    1216:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
		LCD_displayString("Changing password");
    121a:	84 e4       	ldi	r24, 0x44	; 68
    121c:	91 e0       	ldi	r25, 0x01	; 1
    121e:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
		Timer_1_delay(1);
    1222:	61 e0       	ldi	r22, 0x01	; 1
    1224:	70 e0       	ldi	r23, 0x00	; 0
    1226:	80 e0       	ldi	r24, 0x00	; 0
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	0e 94 28 09 	call	0x1250	; 0x1250 <Timer_1_delay>

		LCD_clearScreen();
    122e:	0e 94 53 13 	call	0x26a6	; 0x26a6 <LCD_clearScreen>
		LCD_displayString("Pls enter pass:");
    1232:	80 e6       	ldi	r24, 0x60	; 96
    1234:	90 e0       	ldi	r25, 0x00	; 0
    1236:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
		LCD_moveCursor(1,0); /* Move the cursor to the second row */
    123a:	81 e0       	ldi	r24, 0x01	; 1
    123c:	60 e0       	ldi	r22, 0x00	; 0
    123e:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_moveCursor>
		i=0;
    1242:	10 92 6d 01 	sts	0x016D, r1
		stage=0;
    1246:	10 92 6e 01 	sts	0x016E, r1
	}
}
    124a:	cf 91       	pop	r28
    124c:	df 91       	pop	r29
    124e:	08 95       	ret

00001250 <Timer_1_delay>:


void Timer_1_delay(uint32 delay){
    1250:	df 93       	push	r29
    1252:	cf 93       	push	r28
    1254:	00 d0       	rcall	.+0      	; 0x1256 <Timer_1_delay+0x6>
    1256:	00 d0       	rcall	.+0      	; 0x1258 <Timer_1_delay+0x8>
    1258:	cd b7       	in	r28, 0x3d	; 61
    125a:	de b7       	in	r29, 0x3e	; 62
    125c:	69 83       	std	Y+1, r22	; 0x01
    125e:	7a 83       	std	Y+2, r23	; 0x02
    1260:	8b 83       	std	Y+3, r24	; 0x03
    1262:	9c 83       	std	Y+4, r25	; 0x04
	Timer_1_init(&Timer1_ConfigStruct);
    1264:	86 e6       	ldi	r24, 0x66	; 102
    1266:	91 e0       	ldi	r25, 0x01	; 1
    1268:	0e 94 b7 13 	call	0x276e	; 0x276e <Timer_1_init>
	Timer_1_setCallBack(&Timer_1_CallBack);
    126c:	84 e5       	ldi	r24, 0x54	; 84
    126e:	99 e0       	ldi	r25, 0x09	; 9
    1270:	0e 94 4c 14 	call	0x2898	; 0x2898 <Timer_1_setCallBack>
	while(seconds != delay);
    1274:	80 91 70 01 	lds	r24, 0x0170
    1278:	28 2f       	mov	r18, r24
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	40 e0       	ldi	r20, 0x00	; 0
    127e:	50 e0       	ldi	r21, 0x00	; 0
    1280:	89 81       	ldd	r24, Y+1	; 0x01
    1282:	9a 81       	ldd	r25, Y+2	; 0x02
    1284:	ab 81       	ldd	r26, Y+3	; 0x03
    1286:	bc 81       	ldd	r27, Y+4	; 0x04
    1288:	28 17       	cp	r18, r24
    128a:	39 07       	cpc	r19, r25
    128c:	4a 07       	cpc	r20, r26
    128e:	5b 07       	cpc	r21, r27
    1290:	89 f7       	brne	.-30     	; 0x1274 <Timer_1_delay+0x24>
	Timer_1_deInit();
    1292:	0e 94 2c 14 	call	0x2858	; 0x2858 <Timer_1_deInit>
	seconds = 0;
    1296:	10 92 70 01 	sts	0x0170, r1
}
    129a:	0f 90       	pop	r0
    129c:	0f 90       	pop	r0
    129e:	0f 90       	pop	r0
    12a0:	0f 90       	pop	r0
    12a2:	cf 91       	pop	r28
    12a4:	df 91       	pop	r29
    12a6:	08 95       	ret

000012a8 <Timer_1_CallBack>:

void Timer_1_CallBack(void){
    12a8:	df 93       	push	r29
    12aa:	cf 93       	push	r28
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
	seconds++;
    12b0:	80 91 70 01 	lds	r24, 0x0170
    12b4:	8f 5f       	subi	r24, 0xFF	; 255
    12b6:	80 93 70 01 	sts	0x0170, r24
}
    12ba:	cf 91       	pop	r28
    12bc:	df 91       	pop	r29
    12be:	08 95       	ret

000012c0 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    12c0:	df 93       	push	r29
    12c2:	cf 93       	push	r28
    12c4:	00 d0       	rcall	.+0      	; 0x12c6 <GPIO_setupPinDirection+0x6>
    12c6:	00 d0       	rcall	.+0      	; 0x12c8 <GPIO_setupPinDirection+0x8>
    12c8:	0f 92       	push	r0
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	89 83       	std	Y+1, r24	; 0x01
    12d0:	6a 83       	std	Y+2, r22	; 0x02
    12d2:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    12d4:	8a 81       	ldd	r24, Y+2	; 0x02
    12d6:	88 30       	cpi	r24, 0x08	; 8
    12d8:	08 f0       	brcs	.+2      	; 0x12dc <GPIO_setupPinDirection+0x1c>
    12da:	d5 c0       	rjmp	.+426    	; 0x1486 <GPIO_setupPinDirection+0x1c6>
    12dc:	89 81       	ldd	r24, Y+1	; 0x01
    12de:	84 30       	cpi	r24, 0x04	; 4
    12e0:	08 f0       	brcs	.+2      	; 0x12e4 <GPIO_setupPinDirection+0x24>
    12e2:	d1 c0       	rjmp	.+418    	; 0x1486 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    12e4:	89 81       	ldd	r24, Y+1	; 0x01
    12e6:	28 2f       	mov	r18, r24
    12e8:	30 e0       	ldi	r19, 0x00	; 0
    12ea:	3d 83       	std	Y+5, r19	; 0x05
    12ec:	2c 83       	std	Y+4, r18	; 0x04
    12ee:	8c 81       	ldd	r24, Y+4	; 0x04
    12f0:	9d 81       	ldd	r25, Y+5	; 0x05
    12f2:	81 30       	cpi	r24, 0x01	; 1
    12f4:	91 05       	cpc	r25, r1
    12f6:	09 f4       	brne	.+2      	; 0x12fa <GPIO_setupPinDirection+0x3a>
    12f8:	43 c0       	rjmp	.+134    	; 0x1380 <GPIO_setupPinDirection+0xc0>
    12fa:	2c 81       	ldd	r18, Y+4	; 0x04
    12fc:	3d 81       	ldd	r19, Y+5	; 0x05
    12fe:	22 30       	cpi	r18, 0x02	; 2
    1300:	31 05       	cpc	r19, r1
    1302:	2c f4       	brge	.+10     	; 0x130e <GPIO_setupPinDirection+0x4e>
    1304:	8c 81       	ldd	r24, Y+4	; 0x04
    1306:	9d 81       	ldd	r25, Y+5	; 0x05
    1308:	00 97       	sbiw	r24, 0x00	; 0
    130a:	71 f0       	breq	.+28     	; 0x1328 <GPIO_setupPinDirection+0x68>
    130c:	bc c0       	rjmp	.+376    	; 0x1486 <GPIO_setupPinDirection+0x1c6>
    130e:	2c 81       	ldd	r18, Y+4	; 0x04
    1310:	3d 81       	ldd	r19, Y+5	; 0x05
    1312:	22 30       	cpi	r18, 0x02	; 2
    1314:	31 05       	cpc	r19, r1
    1316:	09 f4       	brne	.+2      	; 0x131a <GPIO_setupPinDirection+0x5a>
    1318:	5f c0       	rjmp	.+190    	; 0x13d8 <GPIO_setupPinDirection+0x118>
    131a:	8c 81       	ldd	r24, Y+4	; 0x04
    131c:	9d 81       	ldd	r25, Y+5	; 0x05
    131e:	83 30       	cpi	r24, 0x03	; 3
    1320:	91 05       	cpc	r25, r1
    1322:	09 f4       	brne	.+2      	; 0x1326 <GPIO_setupPinDirection+0x66>
    1324:	85 c0       	rjmp	.+266    	; 0x1430 <GPIO_setupPinDirection+0x170>
    1326:	af c0       	rjmp	.+350    	; 0x1486 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1328:	8b 81       	ldd	r24, Y+3	; 0x03
    132a:	81 30       	cpi	r24, 0x01	; 1
    132c:	a1 f4       	brne	.+40     	; 0x1356 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    132e:	aa e3       	ldi	r26, 0x3A	; 58
    1330:	b0 e0       	ldi	r27, 0x00	; 0
    1332:	ea e3       	ldi	r30, 0x3A	; 58
    1334:	f0 e0       	ldi	r31, 0x00	; 0
    1336:	80 81       	ld	r24, Z
    1338:	48 2f       	mov	r20, r24
    133a:	8a 81       	ldd	r24, Y+2	; 0x02
    133c:	28 2f       	mov	r18, r24
    133e:	30 e0       	ldi	r19, 0x00	; 0
    1340:	81 e0       	ldi	r24, 0x01	; 1
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	02 2e       	mov	r0, r18
    1346:	02 c0       	rjmp	.+4      	; 0x134c <GPIO_setupPinDirection+0x8c>
    1348:	88 0f       	add	r24, r24
    134a:	99 1f       	adc	r25, r25
    134c:	0a 94       	dec	r0
    134e:	e2 f7       	brpl	.-8      	; 0x1348 <GPIO_setupPinDirection+0x88>
    1350:	84 2b       	or	r24, r20
    1352:	8c 93       	st	X, r24
    1354:	98 c0       	rjmp	.+304    	; 0x1486 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1356:	aa e3       	ldi	r26, 0x3A	; 58
    1358:	b0 e0       	ldi	r27, 0x00	; 0
    135a:	ea e3       	ldi	r30, 0x3A	; 58
    135c:	f0 e0       	ldi	r31, 0x00	; 0
    135e:	80 81       	ld	r24, Z
    1360:	48 2f       	mov	r20, r24
    1362:	8a 81       	ldd	r24, Y+2	; 0x02
    1364:	28 2f       	mov	r18, r24
    1366:	30 e0       	ldi	r19, 0x00	; 0
    1368:	81 e0       	ldi	r24, 0x01	; 1
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	02 2e       	mov	r0, r18
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <GPIO_setupPinDirection+0xb4>
    1370:	88 0f       	add	r24, r24
    1372:	99 1f       	adc	r25, r25
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <GPIO_setupPinDirection+0xb0>
    1378:	80 95       	com	r24
    137a:	84 23       	and	r24, r20
    137c:	8c 93       	st	X, r24
    137e:	83 c0       	rjmp	.+262    	; 0x1486 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1380:	8b 81       	ldd	r24, Y+3	; 0x03
    1382:	81 30       	cpi	r24, 0x01	; 1
    1384:	a1 f4       	brne	.+40     	; 0x13ae <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1386:	a7 e3       	ldi	r26, 0x37	; 55
    1388:	b0 e0       	ldi	r27, 0x00	; 0
    138a:	e7 e3       	ldi	r30, 0x37	; 55
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	80 81       	ld	r24, Z
    1390:	48 2f       	mov	r20, r24
    1392:	8a 81       	ldd	r24, Y+2	; 0x02
    1394:	28 2f       	mov	r18, r24
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	81 e0       	ldi	r24, 0x01	; 1
    139a:	90 e0       	ldi	r25, 0x00	; 0
    139c:	02 2e       	mov	r0, r18
    139e:	02 c0       	rjmp	.+4      	; 0x13a4 <GPIO_setupPinDirection+0xe4>
    13a0:	88 0f       	add	r24, r24
    13a2:	99 1f       	adc	r25, r25
    13a4:	0a 94       	dec	r0
    13a6:	e2 f7       	brpl	.-8      	; 0x13a0 <GPIO_setupPinDirection+0xe0>
    13a8:	84 2b       	or	r24, r20
    13aa:	8c 93       	st	X, r24
    13ac:	6c c0       	rjmp	.+216    	; 0x1486 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    13ae:	a7 e3       	ldi	r26, 0x37	; 55
    13b0:	b0 e0       	ldi	r27, 0x00	; 0
    13b2:	e7 e3       	ldi	r30, 0x37	; 55
    13b4:	f0 e0       	ldi	r31, 0x00	; 0
    13b6:	80 81       	ld	r24, Z
    13b8:	48 2f       	mov	r20, r24
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	28 2f       	mov	r18, r24
    13be:	30 e0       	ldi	r19, 0x00	; 0
    13c0:	81 e0       	ldi	r24, 0x01	; 1
    13c2:	90 e0       	ldi	r25, 0x00	; 0
    13c4:	02 2e       	mov	r0, r18
    13c6:	02 c0       	rjmp	.+4      	; 0x13cc <GPIO_setupPinDirection+0x10c>
    13c8:	88 0f       	add	r24, r24
    13ca:	99 1f       	adc	r25, r25
    13cc:	0a 94       	dec	r0
    13ce:	e2 f7       	brpl	.-8      	; 0x13c8 <GPIO_setupPinDirection+0x108>
    13d0:	80 95       	com	r24
    13d2:	84 23       	and	r24, r20
    13d4:	8c 93       	st	X, r24
    13d6:	57 c0       	rjmp	.+174    	; 0x1486 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    13d8:	8b 81       	ldd	r24, Y+3	; 0x03
    13da:	81 30       	cpi	r24, 0x01	; 1
    13dc:	a1 f4       	brne	.+40     	; 0x1406 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    13de:	a4 e3       	ldi	r26, 0x34	; 52
    13e0:	b0 e0       	ldi	r27, 0x00	; 0
    13e2:	e4 e3       	ldi	r30, 0x34	; 52
    13e4:	f0 e0       	ldi	r31, 0x00	; 0
    13e6:	80 81       	ld	r24, Z
    13e8:	48 2f       	mov	r20, r24
    13ea:	8a 81       	ldd	r24, Y+2	; 0x02
    13ec:	28 2f       	mov	r18, r24
    13ee:	30 e0       	ldi	r19, 0x00	; 0
    13f0:	81 e0       	ldi	r24, 0x01	; 1
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	02 2e       	mov	r0, r18
    13f6:	02 c0       	rjmp	.+4      	; 0x13fc <GPIO_setupPinDirection+0x13c>
    13f8:	88 0f       	add	r24, r24
    13fa:	99 1f       	adc	r25, r25
    13fc:	0a 94       	dec	r0
    13fe:	e2 f7       	brpl	.-8      	; 0x13f8 <GPIO_setupPinDirection+0x138>
    1400:	84 2b       	or	r24, r20
    1402:	8c 93       	st	X, r24
    1404:	40 c0       	rjmp	.+128    	; 0x1486 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1406:	a4 e3       	ldi	r26, 0x34	; 52
    1408:	b0 e0       	ldi	r27, 0x00	; 0
    140a:	e4 e3       	ldi	r30, 0x34	; 52
    140c:	f0 e0       	ldi	r31, 0x00	; 0
    140e:	80 81       	ld	r24, Z
    1410:	48 2f       	mov	r20, r24
    1412:	8a 81       	ldd	r24, Y+2	; 0x02
    1414:	28 2f       	mov	r18, r24
    1416:	30 e0       	ldi	r19, 0x00	; 0
    1418:	81 e0       	ldi	r24, 0x01	; 1
    141a:	90 e0       	ldi	r25, 0x00	; 0
    141c:	02 2e       	mov	r0, r18
    141e:	02 c0       	rjmp	.+4      	; 0x1424 <GPIO_setupPinDirection+0x164>
    1420:	88 0f       	add	r24, r24
    1422:	99 1f       	adc	r25, r25
    1424:	0a 94       	dec	r0
    1426:	e2 f7       	brpl	.-8      	; 0x1420 <GPIO_setupPinDirection+0x160>
    1428:	80 95       	com	r24
    142a:	84 23       	and	r24, r20
    142c:	8c 93       	st	X, r24
    142e:	2b c0       	rjmp	.+86     	; 0x1486 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1430:	8b 81       	ldd	r24, Y+3	; 0x03
    1432:	81 30       	cpi	r24, 0x01	; 1
    1434:	a1 f4       	brne	.+40     	; 0x145e <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1436:	a1 e3       	ldi	r26, 0x31	; 49
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	e1 e3       	ldi	r30, 0x31	; 49
    143c:	f0 e0       	ldi	r31, 0x00	; 0
    143e:	80 81       	ld	r24, Z
    1440:	48 2f       	mov	r20, r24
    1442:	8a 81       	ldd	r24, Y+2	; 0x02
    1444:	28 2f       	mov	r18, r24
    1446:	30 e0       	ldi	r19, 0x00	; 0
    1448:	81 e0       	ldi	r24, 0x01	; 1
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	02 2e       	mov	r0, r18
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <GPIO_setupPinDirection+0x194>
    1450:	88 0f       	add	r24, r24
    1452:	99 1f       	adc	r25, r25
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <GPIO_setupPinDirection+0x190>
    1458:	84 2b       	or	r24, r20
    145a:	8c 93       	st	X, r24
    145c:	14 c0       	rjmp	.+40     	; 0x1486 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    145e:	a1 e3       	ldi	r26, 0x31	; 49
    1460:	b0 e0       	ldi	r27, 0x00	; 0
    1462:	e1 e3       	ldi	r30, 0x31	; 49
    1464:	f0 e0       	ldi	r31, 0x00	; 0
    1466:	80 81       	ld	r24, Z
    1468:	48 2f       	mov	r20, r24
    146a:	8a 81       	ldd	r24, Y+2	; 0x02
    146c:	28 2f       	mov	r18, r24
    146e:	30 e0       	ldi	r19, 0x00	; 0
    1470:	81 e0       	ldi	r24, 0x01	; 1
    1472:	90 e0       	ldi	r25, 0x00	; 0
    1474:	02 2e       	mov	r0, r18
    1476:	02 c0       	rjmp	.+4      	; 0x147c <GPIO_setupPinDirection+0x1bc>
    1478:	88 0f       	add	r24, r24
    147a:	99 1f       	adc	r25, r25
    147c:	0a 94       	dec	r0
    147e:	e2 f7       	brpl	.-8      	; 0x1478 <GPIO_setupPinDirection+0x1b8>
    1480:	80 95       	com	r24
    1482:	84 23       	and	r24, r20
    1484:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1486:	0f 90       	pop	r0
    1488:	0f 90       	pop	r0
    148a:	0f 90       	pop	r0
    148c:	0f 90       	pop	r0
    148e:	0f 90       	pop	r0
    1490:	cf 91       	pop	r28
    1492:	df 91       	pop	r29
    1494:	08 95       	ret

00001496 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1496:	df 93       	push	r29
    1498:	cf 93       	push	r28
    149a:	00 d0       	rcall	.+0      	; 0x149c <GPIO_writePin+0x6>
    149c:	00 d0       	rcall	.+0      	; 0x149e <GPIO_writePin+0x8>
    149e:	0f 92       	push	r0
    14a0:	cd b7       	in	r28, 0x3d	; 61
    14a2:	de b7       	in	r29, 0x3e	; 62
    14a4:	89 83       	std	Y+1, r24	; 0x01
    14a6:	6a 83       	std	Y+2, r22	; 0x02
    14a8:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    14aa:	8a 81       	ldd	r24, Y+2	; 0x02
    14ac:	88 30       	cpi	r24, 0x08	; 8
    14ae:	08 f0       	brcs	.+2      	; 0x14b2 <GPIO_writePin+0x1c>
    14b0:	d5 c0       	rjmp	.+426    	; 0x165c <GPIO_writePin+0x1c6>
    14b2:	89 81       	ldd	r24, Y+1	; 0x01
    14b4:	84 30       	cpi	r24, 0x04	; 4
    14b6:	08 f0       	brcs	.+2      	; 0x14ba <GPIO_writePin+0x24>
    14b8:	d1 c0       	rjmp	.+418    	; 0x165c <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    14ba:	89 81       	ldd	r24, Y+1	; 0x01
    14bc:	28 2f       	mov	r18, r24
    14be:	30 e0       	ldi	r19, 0x00	; 0
    14c0:	3d 83       	std	Y+5, r19	; 0x05
    14c2:	2c 83       	std	Y+4, r18	; 0x04
    14c4:	8c 81       	ldd	r24, Y+4	; 0x04
    14c6:	9d 81       	ldd	r25, Y+5	; 0x05
    14c8:	81 30       	cpi	r24, 0x01	; 1
    14ca:	91 05       	cpc	r25, r1
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <GPIO_writePin+0x3a>
    14ce:	43 c0       	rjmp	.+134    	; 0x1556 <GPIO_writePin+0xc0>
    14d0:	2c 81       	ldd	r18, Y+4	; 0x04
    14d2:	3d 81       	ldd	r19, Y+5	; 0x05
    14d4:	22 30       	cpi	r18, 0x02	; 2
    14d6:	31 05       	cpc	r19, r1
    14d8:	2c f4       	brge	.+10     	; 0x14e4 <GPIO_writePin+0x4e>
    14da:	8c 81       	ldd	r24, Y+4	; 0x04
    14dc:	9d 81       	ldd	r25, Y+5	; 0x05
    14de:	00 97       	sbiw	r24, 0x00	; 0
    14e0:	71 f0       	breq	.+28     	; 0x14fe <GPIO_writePin+0x68>
    14e2:	bc c0       	rjmp	.+376    	; 0x165c <GPIO_writePin+0x1c6>
    14e4:	2c 81       	ldd	r18, Y+4	; 0x04
    14e6:	3d 81       	ldd	r19, Y+5	; 0x05
    14e8:	22 30       	cpi	r18, 0x02	; 2
    14ea:	31 05       	cpc	r19, r1
    14ec:	09 f4       	brne	.+2      	; 0x14f0 <GPIO_writePin+0x5a>
    14ee:	5f c0       	rjmp	.+190    	; 0x15ae <GPIO_writePin+0x118>
    14f0:	8c 81       	ldd	r24, Y+4	; 0x04
    14f2:	9d 81       	ldd	r25, Y+5	; 0x05
    14f4:	83 30       	cpi	r24, 0x03	; 3
    14f6:	91 05       	cpc	r25, r1
    14f8:	09 f4       	brne	.+2      	; 0x14fc <GPIO_writePin+0x66>
    14fa:	85 c0       	rjmp	.+266    	; 0x1606 <GPIO_writePin+0x170>
    14fc:	af c0       	rjmp	.+350    	; 0x165c <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	81 30       	cpi	r24, 0x01	; 1
    1502:	a1 f4       	brne	.+40     	; 0x152c <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1504:	ab e3       	ldi	r26, 0x3B	; 59
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	eb e3       	ldi	r30, 0x3B	; 59
    150a:	f0 e0       	ldi	r31, 0x00	; 0
    150c:	80 81       	ld	r24, Z
    150e:	48 2f       	mov	r20, r24
    1510:	8a 81       	ldd	r24, Y+2	; 0x02
    1512:	28 2f       	mov	r18, r24
    1514:	30 e0       	ldi	r19, 0x00	; 0
    1516:	81 e0       	ldi	r24, 0x01	; 1
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	02 2e       	mov	r0, r18
    151c:	02 c0       	rjmp	.+4      	; 0x1522 <GPIO_writePin+0x8c>
    151e:	88 0f       	add	r24, r24
    1520:	99 1f       	adc	r25, r25
    1522:	0a 94       	dec	r0
    1524:	e2 f7       	brpl	.-8      	; 0x151e <GPIO_writePin+0x88>
    1526:	84 2b       	or	r24, r20
    1528:	8c 93       	st	X, r24
    152a:	98 c0       	rjmp	.+304    	; 0x165c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    152c:	ab e3       	ldi	r26, 0x3B	; 59
    152e:	b0 e0       	ldi	r27, 0x00	; 0
    1530:	eb e3       	ldi	r30, 0x3B	; 59
    1532:	f0 e0       	ldi	r31, 0x00	; 0
    1534:	80 81       	ld	r24, Z
    1536:	48 2f       	mov	r20, r24
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	28 2f       	mov	r18, r24
    153c:	30 e0       	ldi	r19, 0x00	; 0
    153e:	81 e0       	ldi	r24, 0x01	; 1
    1540:	90 e0       	ldi	r25, 0x00	; 0
    1542:	02 2e       	mov	r0, r18
    1544:	02 c0       	rjmp	.+4      	; 0x154a <GPIO_writePin+0xb4>
    1546:	88 0f       	add	r24, r24
    1548:	99 1f       	adc	r25, r25
    154a:	0a 94       	dec	r0
    154c:	e2 f7       	brpl	.-8      	; 0x1546 <GPIO_writePin+0xb0>
    154e:	80 95       	com	r24
    1550:	84 23       	and	r24, r20
    1552:	8c 93       	st	X, r24
    1554:	83 c0       	rjmp	.+262    	; 0x165c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1556:	8b 81       	ldd	r24, Y+3	; 0x03
    1558:	81 30       	cpi	r24, 0x01	; 1
    155a:	a1 f4       	brne	.+40     	; 0x1584 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    155c:	a8 e3       	ldi	r26, 0x38	; 56
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e8 e3       	ldi	r30, 0x38	; 56
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	48 2f       	mov	r20, r24
    1568:	8a 81       	ldd	r24, Y+2	; 0x02
    156a:	28 2f       	mov	r18, r24
    156c:	30 e0       	ldi	r19, 0x00	; 0
    156e:	81 e0       	ldi	r24, 0x01	; 1
    1570:	90 e0       	ldi	r25, 0x00	; 0
    1572:	02 2e       	mov	r0, r18
    1574:	02 c0       	rjmp	.+4      	; 0x157a <GPIO_writePin+0xe4>
    1576:	88 0f       	add	r24, r24
    1578:	99 1f       	adc	r25, r25
    157a:	0a 94       	dec	r0
    157c:	e2 f7       	brpl	.-8      	; 0x1576 <GPIO_writePin+0xe0>
    157e:	84 2b       	or	r24, r20
    1580:	8c 93       	st	X, r24
    1582:	6c c0       	rjmp	.+216    	; 0x165c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1584:	a8 e3       	ldi	r26, 0x38	; 56
    1586:	b0 e0       	ldi	r27, 0x00	; 0
    1588:	e8 e3       	ldi	r30, 0x38	; 56
    158a:	f0 e0       	ldi	r31, 0x00	; 0
    158c:	80 81       	ld	r24, Z
    158e:	48 2f       	mov	r20, r24
    1590:	8a 81       	ldd	r24, Y+2	; 0x02
    1592:	28 2f       	mov	r18, r24
    1594:	30 e0       	ldi	r19, 0x00	; 0
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	90 e0       	ldi	r25, 0x00	; 0
    159a:	02 2e       	mov	r0, r18
    159c:	02 c0       	rjmp	.+4      	; 0x15a2 <GPIO_writePin+0x10c>
    159e:	88 0f       	add	r24, r24
    15a0:	99 1f       	adc	r25, r25
    15a2:	0a 94       	dec	r0
    15a4:	e2 f7       	brpl	.-8      	; 0x159e <GPIO_writePin+0x108>
    15a6:	80 95       	com	r24
    15a8:	84 23       	and	r24, r20
    15aa:	8c 93       	st	X, r24
    15ac:	57 c0       	rjmp	.+174    	; 0x165c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    15ae:	8b 81       	ldd	r24, Y+3	; 0x03
    15b0:	81 30       	cpi	r24, 0x01	; 1
    15b2:	a1 f4       	brne	.+40     	; 0x15dc <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    15b4:	a5 e3       	ldi	r26, 0x35	; 53
    15b6:	b0 e0       	ldi	r27, 0x00	; 0
    15b8:	e5 e3       	ldi	r30, 0x35	; 53
    15ba:	f0 e0       	ldi	r31, 0x00	; 0
    15bc:	80 81       	ld	r24, Z
    15be:	48 2f       	mov	r20, r24
    15c0:	8a 81       	ldd	r24, Y+2	; 0x02
    15c2:	28 2f       	mov	r18, r24
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	02 2e       	mov	r0, r18
    15cc:	02 c0       	rjmp	.+4      	; 0x15d2 <GPIO_writePin+0x13c>
    15ce:	88 0f       	add	r24, r24
    15d0:	99 1f       	adc	r25, r25
    15d2:	0a 94       	dec	r0
    15d4:	e2 f7       	brpl	.-8      	; 0x15ce <GPIO_writePin+0x138>
    15d6:	84 2b       	or	r24, r20
    15d8:	8c 93       	st	X, r24
    15da:	40 c0       	rjmp	.+128    	; 0x165c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    15dc:	a5 e3       	ldi	r26, 0x35	; 53
    15de:	b0 e0       	ldi	r27, 0x00	; 0
    15e0:	e5 e3       	ldi	r30, 0x35	; 53
    15e2:	f0 e0       	ldi	r31, 0x00	; 0
    15e4:	80 81       	ld	r24, Z
    15e6:	48 2f       	mov	r20, r24
    15e8:	8a 81       	ldd	r24, Y+2	; 0x02
    15ea:	28 2f       	mov	r18, r24
    15ec:	30 e0       	ldi	r19, 0x00	; 0
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	02 2e       	mov	r0, r18
    15f4:	02 c0       	rjmp	.+4      	; 0x15fa <GPIO_writePin+0x164>
    15f6:	88 0f       	add	r24, r24
    15f8:	99 1f       	adc	r25, r25
    15fa:	0a 94       	dec	r0
    15fc:	e2 f7       	brpl	.-8      	; 0x15f6 <GPIO_writePin+0x160>
    15fe:	80 95       	com	r24
    1600:	84 23       	and	r24, r20
    1602:	8c 93       	st	X, r24
    1604:	2b c0       	rjmp	.+86     	; 0x165c <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1606:	8b 81       	ldd	r24, Y+3	; 0x03
    1608:	81 30       	cpi	r24, 0x01	; 1
    160a:	a1 f4       	brne	.+40     	; 0x1634 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    160c:	a2 e3       	ldi	r26, 0x32	; 50
    160e:	b0 e0       	ldi	r27, 0x00	; 0
    1610:	e2 e3       	ldi	r30, 0x32	; 50
    1612:	f0 e0       	ldi	r31, 0x00	; 0
    1614:	80 81       	ld	r24, Z
    1616:	48 2f       	mov	r20, r24
    1618:	8a 81       	ldd	r24, Y+2	; 0x02
    161a:	28 2f       	mov	r18, r24
    161c:	30 e0       	ldi	r19, 0x00	; 0
    161e:	81 e0       	ldi	r24, 0x01	; 1
    1620:	90 e0       	ldi	r25, 0x00	; 0
    1622:	02 2e       	mov	r0, r18
    1624:	02 c0       	rjmp	.+4      	; 0x162a <GPIO_writePin+0x194>
    1626:	88 0f       	add	r24, r24
    1628:	99 1f       	adc	r25, r25
    162a:	0a 94       	dec	r0
    162c:	e2 f7       	brpl	.-8      	; 0x1626 <GPIO_writePin+0x190>
    162e:	84 2b       	or	r24, r20
    1630:	8c 93       	st	X, r24
    1632:	14 c0       	rjmp	.+40     	; 0x165c <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1634:	a2 e3       	ldi	r26, 0x32	; 50
    1636:	b0 e0       	ldi	r27, 0x00	; 0
    1638:	e2 e3       	ldi	r30, 0x32	; 50
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	80 81       	ld	r24, Z
    163e:	48 2f       	mov	r20, r24
    1640:	8a 81       	ldd	r24, Y+2	; 0x02
    1642:	28 2f       	mov	r18, r24
    1644:	30 e0       	ldi	r19, 0x00	; 0
    1646:	81 e0       	ldi	r24, 0x01	; 1
    1648:	90 e0       	ldi	r25, 0x00	; 0
    164a:	02 2e       	mov	r0, r18
    164c:	02 c0       	rjmp	.+4      	; 0x1652 <GPIO_writePin+0x1bc>
    164e:	88 0f       	add	r24, r24
    1650:	99 1f       	adc	r25, r25
    1652:	0a 94       	dec	r0
    1654:	e2 f7       	brpl	.-8      	; 0x164e <GPIO_writePin+0x1b8>
    1656:	80 95       	com	r24
    1658:	84 23       	and	r24, r20
    165a:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    165c:	0f 90       	pop	r0
    165e:	0f 90       	pop	r0
    1660:	0f 90       	pop	r0
    1662:	0f 90       	pop	r0
    1664:	0f 90       	pop	r0
    1666:	cf 91       	pop	r28
    1668:	df 91       	pop	r29
    166a:	08 95       	ret

0000166c <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    166c:	df 93       	push	r29
    166e:	cf 93       	push	r28
    1670:	00 d0       	rcall	.+0      	; 0x1672 <GPIO_readPin+0x6>
    1672:	00 d0       	rcall	.+0      	; 0x1674 <GPIO_readPin+0x8>
    1674:	0f 92       	push	r0
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	8a 83       	std	Y+2, r24	; 0x02
    167c:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    167e:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1680:	8b 81       	ldd	r24, Y+3	; 0x03
    1682:	88 30       	cpi	r24, 0x08	; 8
    1684:	08 f0       	brcs	.+2      	; 0x1688 <GPIO_readPin+0x1c>
    1686:	84 c0       	rjmp	.+264    	; 0x1790 <GPIO_readPin+0x124>
    1688:	8a 81       	ldd	r24, Y+2	; 0x02
    168a:	84 30       	cpi	r24, 0x04	; 4
    168c:	08 f0       	brcs	.+2      	; 0x1690 <GPIO_readPin+0x24>
    168e:	80 c0       	rjmp	.+256    	; 0x1790 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1690:	8a 81       	ldd	r24, Y+2	; 0x02
    1692:	28 2f       	mov	r18, r24
    1694:	30 e0       	ldi	r19, 0x00	; 0
    1696:	3d 83       	std	Y+5, r19	; 0x05
    1698:	2c 83       	std	Y+4, r18	; 0x04
    169a:	4c 81       	ldd	r20, Y+4	; 0x04
    169c:	5d 81       	ldd	r21, Y+5	; 0x05
    169e:	41 30       	cpi	r20, 0x01	; 1
    16a0:	51 05       	cpc	r21, r1
    16a2:	79 f1       	breq	.+94     	; 0x1702 <GPIO_readPin+0x96>
    16a4:	8c 81       	ldd	r24, Y+4	; 0x04
    16a6:	9d 81       	ldd	r25, Y+5	; 0x05
    16a8:	82 30       	cpi	r24, 0x02	; 2
    16aa:	91 05       	cpc	r25, r1
    16ac:	34 f4       	brge	.+12     	; 0x16ba <GPIO_readPin+0x4e>
    16ae:	2c 81       	ldd	r18, Y+4	; 0x04
    16b0:	3d 81       	ldd	r19, Y+5	; 0x05
    16b2:	21 15       	cp	r18, r1
    16b4:	31 05       	cpc	r19, r1
    16b6:	69 f0       	breq	.+26     	; 0x16d2 <GPIO_readPin+0x66>
    16b8:	6b c0       	rjmp	.+214    	; 0x1790 <GPIO_readPin+0x124>
    16ba:	4c 81       	ldd	r20, Y+4	; 0x04
    16bc:	5d 81       	ldd	r21, Y+5	; 0x05
    16be:	42 30       	cpi	r20, 0x02	; 2
    16c0:	51 05       	cpc	r21, r1
    16c2:	b9 f1       	breq	.+110    	; 0x1732 <GPIO_readPin+0xc6>
    16c4:	8c 81       	ldd	r24, Y+4	; 0x04
    16c6:	9d 81       	ldd	r25, Y+5	; 0x05
    16c8:	83 30       	cpi	r24, 0x03	; 3
    16ca:	91 05       	cpc	r25, r1
    16cc:	09 f4       	brne	.+2      	; 0x16d0 <GPIO_readPin+0x64>
    16ce:	49 c0       	rjmp	.+146    	; 0x1762 <GPIO_readPin+0xf6>
    16d0:	5f c0       	rjmp	.+190    	; 0x1790 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    16d2:	e9 e3       	ldi	r30, 0x39	; 57
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	28 2f       	mov	r18, r24
    16da:	30 e0       	ldi	r19, 0x00	; 0
    16dc:	8b 81       	ldd	r24, Y+3	; 0x03
    16de:	88 2f       	mov	r24, r24
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	a9 01       	movw	r20, r18
    16e4:	02 c0       	rjmp	.+4      	; 0x16ea <GPIO_readPin+0x7e>
    16e6:	55 95       	asr	r21
    16e8:	47 95       	ror	r20
    16ea:	8a 95       	dec	r24
    16ec:	e2 f7       	brpl	.-8      	; 0x16e6 <GPIO_readPin+0x7a>
    16ee:	ca 01       	movw	r24, r20
    16f0:	81 70       	andi	r24, 0x01	; 1
    16f2:	90 70       	andi	r25, 0x00	; 0
    16f4:	88 23       	and	r24, r24
    16f6:	19 f0       	breq	.+6      	; 0x16fe <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	89 83       	std	Y+1, r24	; 0x01
    16fc:	49 c0       	rjmp	.+146    	; 0x1790 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    16fe:	19 82       	std	Y+1, r1	; 0x01
    1700:	47 c0       	rjmp	.+142    	; 0x1790 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    1702:	e6 e3       	ldi	r30, 0x36	; 54
    1704:	f0 e0       	ldi	r31, 0x00	; 0
    1706:	80 81       	ld	r24, Z
    1708:	28 2f       	mov	r18, r24
    170a:	30 e0       	ldi	r19, 0x00	; 0
    170c:	8b 81       	ldd	r24, Y+3	; 0x03
    170e:	88 2f       	mov	r24, r24
    1710:	90 e0       	ldi	r25, 0x00	; 0
    1712:	a9 01       	movw	r20, r18
    1714:	02 c0       	rjmp	.+4      	; 0x171a <GPIO_readPin+0xae>
    1716:	55 95       	asr	r21
    1718:	47 95       	ror	r20
    171a:	8a 95       	dec	r24
    171c:	e2 f7       	brpl	.-8      	; 0x1716 <GPIO_readPin+0xaa>
    171e:	ca 01       	movw	r24, r20
    1720:	81 70       	andi	r24, 0x01	; 1
    1722:	90 70       	andi	r25, 0x00	; 0
    1724:	88 23       	and	r24, r24
    1726:	19 f0       	breq	.+6      	; 0x172e <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    1728:	81 e0       	ldi	r24, 0x01	; 1
    172a:	89 83       	std	Y+1, r24	; 0x01
    172c:	31 c0       	rjmp	.+98     	; 0x1790 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    172e:	19 82       	std	Y+1, r1	; 0x01
    1730:	2f c0       	rjmp	.+94     	; 0x1790 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    1732:	e3 e3       	ldi	r30, 0x33	; 51
    1734:	f0 e0       	ldi	r31, 0x00	; 0
    1736:	80 81       	ld	r24, Z
    1738:	28 2f       	mov	r18, r24
    173a:	30 e0       	ldi	r19, 0x00	; 0
    173c:	8b 81       	ldd	r24, Y+3	; 0x03
    173e:	88 2f       	mov	r24, r24
    1740:	90 e0       	ldi	r25, 0x00	; 0
    1742:	a9 01       	movw	r20, r18
    1744:	02 c0       	rjmp	.+4      	; 0x174a <GPIO_readPin+0xde>
    1746:	55 95       	asr	r21
    1748:	47 95       	ror	r20
    174a:	8a 95       	dec	r24
    174c:	e2 f7       	brpl	.-8      	; 0x1746 <GPIO_readPin+0xda>
    174e:	ca 01       	movw	r24, r20
    1750:	81 70       	andi	r24, 0x01	; 1
    1752:	90 70       	andi	r25, 0x00	; 0
    1754:	88 23       	and	r24, r24
    1756:	19 f0       	breq	.+6      	; 0x175e <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    1758:	81 e0       	ldi	r24, 0x01	; 1
    175a:	89 83       	std	Y+1, r24	; 0x01
    175c:	19 c0       	rjmp	.+50     	; 0x1790 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    175e:	19 82       	std	Y+1, r1	; 0x01
    1760:	17 c0       	rjmp	.+46     	; 0x1790 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    1762:	e0 e3       	ldi	r30, 0x30	; 48
    1764:	f0 e0       	ldi	r31, 0x00	; 0
    1766:	80 81       	ld	r24, Z
    1768:	28 2f       	mov	r18, r24
    176a:	30 e0       	ldi	r19, 0x00	; 0
    176c:	8b 81       	ldd	r24, Y+3	; 0x03
    176e:	88 2f       	mov	r24, r24
    1770:	90 e0       	ldi	r25, 0x00	; 0
    1772:	a9 01       	movw	r20, r18
    1774:	02 c0       	rjmp	.+4      	; 0x177a <GPIO_readPin+0x10e>
    1776:	55 95       	asr	r21
    1778:	47 95       	ror	r20
    177a:	8a 95       	dec	r24
    177c:	e2 f7       	brpl	.-8      	; 0x1776 <GPIO_readPin+0x10a>
    177e:	ca 01       	movw	r24, r20
    1780:	81 70       	andi	r24, 0x01	; 1
    1782:	90 70       	andi	r25, 0x00	; 0
    1784:	88 23       	and	r24, r24
    1786:	19 f0       	breq	.+6      	; 0x178e <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    1788:	81 e0       	ldi	r24, 0x01	; 1
    178a:	89 83       	std	Y+1, r24	; 0x01
    178c:	01 c0       	rjmp	.+2      	; 0x1790 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    178e:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    1790:	89 81       	ldd	r24, Y+1	; 0x01
}
    1792:	0f 90       	pop	r0
    1794:	0f 90       	pop	r0
    1796:	0f 90       	pop	r0
    1798:	0f 90       	pop	r0
    179a:	0f 90       	pop	r0
    179c:	cf 91       	pop	r28
    179e:	df 91       	pop	r29
    17a0:	08 95       	ret

000017a2 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    17a2:	df 93       	push	r29
    17a4:	cf 93       	push	r28
    17a6:	00 d0       	rcall	.+0      	; 0x17a8 <GPIO_setupPortDirection+0x6>
    17a8:	00 d0       	rcall	.+0      	; 0x17aa <GPIO_setupPortDirection+0x8>
    17aa:	cd b7       	in	r28, 0x3d	; 61
    17ac:	de b7       	in	r29, 0x3e	; 62
    17ae:	89 83       	std	Y+1, r24	; 0x01
    17b0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    17b2:	89 81       	ldd	r24, Y+1	; 0x01
    17b4:	84 30       	cpi	r24, 0x04	; 4
    17b6:	90 f5       	brcc	.+100    	; 0x181c <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    17b8:	89 81       	ldd	r24, Y+1	; 0x01
    17ba:	28 2f       	mov	r18, r24
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	3c 83       	std	Y+4, r19	; 0x04
    17c0:	2b 83       	std	Y+3, r18	; 0x03
    17c2:	8b 81       	ldd	r24, Y+3	; 0x03
    17c4:	9c 81       	ldd	r25, Y+4	; 0x04
    17c6:	81 30       	cpi	r24, 0x01	; 1
    17c8:	91 05       	cpc	r25, r1
    17ca:	d1 f0       	breq	.+52     	; 0x1800 <GPIO_setupPortDirection+0x5e>
    17cc:	2b 81       	ldd	r18, Y+3	; 0x03
    17ce:	3c 81       	ldd	r19, Y+4	; 0x04
    17d0:	22 30       	cpi	r18, 0x02	; 2
    17d2:	31 05       	cpc	r19, r1
    17d4:	2c f4       	brge	.+10     	; 0x17e0 <GPIO_setupPortDirection+0x3e>
    17d6:	8b 81       	ldd	r24, Y+3	; 0x03
    17d8:	9c 81       	ldd	r25, Y+4	; 0x04
    17da:	00 97       	sbiw	r24, 0x00	; 0
    17dc:	61 f0       	breq	.+24     	; 0x17f6 <GPIO_setupPortDirection+0x54>
    17de:	1e c0       	rjmp	.+60     	; 0x181c <GPIO_setupPortDirection+0x7a>
    17e0:	2b 81       	ldd	r18, Y+3	; 0x03
    17e2:	3c 81       	ldd	r19, Y+4	; 0x04
    17e4:	22 30       	cpi	r18, 0x02	; 2
    17e6:	31 05       	cpc	r19, r1
    17e8:	81 f0       	breq	.+32     	; 0x180a <GPIO_setupPortDirection+0x68>
    17ea:	8b 81       	ldd	r24, Y+3	; 0x03
    17ec:	9c 81       	ldd	r25, Y+4	; 0x04
    17ee:	83 30       	cpi	r24, 0x03	; 3
    17f0:	91 05       	cpc	r25, r1
    17f2:	81 f0       	breq	.+32     	; 0x1814 <GPIO_setupPortDirection+0x72>
    17f4:	13 c0       	rjmp	.+38     	; 0x181c <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    17f6:	ea e3       	ldi	r30, 0x3A	; 58
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	8a 81       	ldd	r24, Y+2	; 0x02
    17fc:	80 83       	st	Z, r24
    17fe:	0e c0       	rjmp	.+28     	; 0x181c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    1800:	e7 e3       	ldi	r30, 0x37	; 55
    1802:	f0 e0       	ldi	r31, 0x00	; 0
    1804:	8a 81       	ldd	r24, Y+2	; 0x02
    1806:	80 83       	st	Z, r24
    1808:	09 c0       	rjmp	.+18     	; 0x181c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    180a:	e4 e3       	ldi	r30, 0x34	; 52
    180c:	f0 e0       	ldi	r31, 0x00	; 0
    180e:	8a 81       	ldd	r24, Y+2	; 0x02
    1810:	80 83       	st	Z, r24
    1812:	04 c0       	rjmp	.+8      	; 0x181c <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    1814:	e1 e3       	ldi	r30, 0x31	; 49
    1816:	f0 e0       	ldi	r31, 0x00	; 0
    1818:	8a 81       	ldd	r24, Y+2	; 0x02
    181a:	80 83       	st	Z, r24
			break;
		}
	}
}
    181c:	0f 90       	pop	r0
    181e:	0f 90       	pop	r0
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	cf 91       	pop	r28
    1826:	df 91       	pop	r29
    1828:	08 95       	ret

0000182a <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    182a:	df 93       	push	r29
    182c:	cf 93       	push	r28
    182e:	00 d0       	rcall	.+0      	; 0x1830 <GPIO_writePort+0x6>
    1830:	00 d0       	rcall	.+0      	; 0x1832 <GPIO_writePort+0x8>
    1832:	cd b7       	in	r28, 0x3d	; 61
    1834:	de b7       	in	r29, 0x3e	; 62
    1836:	89 83       	std	Y+1, r24	; 0x01
    1838:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    183a:	89 81       	ldd	r24, Y+1	; 0x01
    183c:	84 30       	cpi	r24, 0x04	; 4
    183e:	90 f5       	brcc	.+100    	; 0x18a4 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    1840:	89 81       	ldd	r24, Y+1	; 0x01
    1842:	28 2f       	mov	r18, r24
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	3c 83       	std	Y+4, r19	; 0x04
    1848:	2b 83       	std	Y+3, r18	; 0x03
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	9c 81       	ldd	r25, Y+4	; 0x04
    184e:	81 30       	cpi	r24, 0x01	; 1
    1850:	91 05       	cpc	r25, r1
    1852:	d1 f0       	breq	.+52     	; 0x1888 <GPIO_writePort+0x5e>
    1854:	2b 81       	ldd	r18, Y+3	; 0x03
    1856:	3c 81       	ldd	r19, Y+4	; 0x04
    1858:	22 30       	cpi	r18, 0x02	; 2
    185a:	31 05       	cpc	r19, r1
    185c:	2c f4       	brge	.+10     	; 0x1868 <GPIO_writePort+0x3e>
    185e:	8b 81       	ldd	r24, Y+3	; 0x03
    1860:	9c 81       	ldd	r25, Y+4	; 0x04
    1862:	00 97       	sbiw	r24, 0x00	; 0
    1864:	61 f0       	breq	.+24     	; 0x187e <GPIO_writePort+0x54>
    1866:	1e c0       	rjmp	.+60     	; 0x18a4 <GPIO_writePort+0x7a>
    1868:	2b 81       	ldd	r18, Y+3	; 0x03
    186a:	3c 81       	ldd	r19, Y+4	; 0x04
    186c:	22 30       	cpi	r18, 0x02	; 2
    186e:	31 05       	cpc	r19, r1
    1870:	81 f0       	breq	.+32     	; 0x1892 <GPIO_writePort+0x68>
    1872:	8b 81       	ldd	r24, Y+3	; 0x03
    1874:	9c 81       	ldd	r25, Y+4	; 0x04
    1876:	83 30       	cpi	r24, 0x03	; 3
    1878:	91 05       	cpc	r25, r1
    187a:	81 f0       	breq	.+32     	; 0x189c <GPIO_writePort+0x72>
    187c:	13 c0       	rjmp	.+38     	; 0x18a4 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    187e:	eb e3       	ldi	r30, 0x3B	; 59
    1880:	f0 e0       	ldi	r31, 0x00	; 0
    1882:	8a 81       	ldd	r24, Y+2	; 0x02
    1884:	80 83       	st	Z, r24
    1886:	0e c0       	rjmp	.+28     	; 0x18a4 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    1888:	e8 e3       	ldi	r30, 0x38	; 56
    188a:	f0 e0       	ldi	r31, 0x00	; 0
    188c:	8a 81       	ldd	r24, Y+2	; 0x02
    188e:	80 83       	st	Z, r24
    1890:	09 c0       	rjmp	.+18     	; 0x18a4 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    1892:	e5 e3       	ldi	r30, 0x35	; 53
    1894:	f0 e0       	ldi	r31, 0x00	; 0
    1896:	8a 81       	ldd	r24, Y+2	; 0x02
    1898:	80 83       	st	Z, r24
    189a:	04 c0       	rjmp	.+8      	; 0x18a4 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    189c:	e2 e3       	ldi	r30, 0x32	; 50
    189e:	f0 e0       	ldi	r31, 0x00	; 0
    18a0:	8a 81       	ldd	r24, Y+2	; 0x02
    18a2:	80 83       	st	Z, r24
			break;
		}
	}
}
    18a4:	0f 90       	pop	r0
    18a6:	0f 90       	pop	r0
    18a8:	0f 90       	pop	r0
    18aa:	0f 90       	pop	r0
    18ac:	cf 91       	pop	r28
    18ae:	df 91       	pop	r29
    18b0:	08 95       	ret

000018b2 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    18b2:	df 93       	push	r29
    18b4:	cf 93       	push	r28
    18b6:	00 d0       	rcall	.+0      	; 0x18b8 <GPIO_readPort+0x6>
    18b8:	00 d0       	rcall	.+0      	; 0x18ba <GPIO_readPort+0x8>
    18ba:	cd b7       	in	r28, 0x3d	; 61
    18bc:	de b7       	in	r29, 0x3e	; 62
    18be:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    18c0:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    18c2:	8a 81       	ldd	r24, Y+2	; 0x02
    18c4:	84 30       	cpi	r24, 0x04	; 4
    18c6:	90 f5       	brcc	.+100    	; 0x192c <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    18c8:	8a 81       	ldd	r24, Y+2	; 0x02
    18ca:	28 2f       	mov	r18, r24
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	3c 83       	std	Y+4, r19	; 0x04
    18d0:	2b 83       	std	Y+3, r18	; 0x03
    18d2:	8b 81       	ldd	r24, Y+3	; 0x03
    18d4:	9c 81       	ldd	r25, Y+4	; 0x04
    18d6:	81 30       	cpi	r24, 0x01	; 1
    18d8:	91 05       	cpc	r25, r1
    18da:	d1 f0       	breq	.+52     	; 0x1910 <GPIO_readPort+0x5e>
    18dc:	2b 81       	ldd	r18, Y+3	; 0x03
    18de:	3c 81       	ldd	r19, Y+4	; 0x04
    18e0:	22 30       	cpi	r18, 0x02	; 2
    18e2:	31 05       	cpc	r19, r1
    18e4:	2c f4       	brge	.+10     	; 0x18f0 <GPIO_readPort+0x3e>
    18e6:	8b 81       	ldd	r24, Y+3	; 0x03
    18e8:	9c 81       	ldd	r25, Y+4	; 0x04
    18ea:	00 97       	sbiw	r24, 0x00	; 0
    18ec:	61 f0       	breq	.+24     	; 0x1906 <GPIO_readPort+0x54>
    18ee:	1e c0       	rjmp	.+60     	; 0x192c <GPIO_readPort+0x7a>
    18f0:	2b 81       	ldd	r18, Y+3	; 0x03
    18f2:	3c 81       	ldd	r19, Y+4	; 0x04
    18f4:	22 30       	cpi	r18, 0x02	; 2
    18f6:	31 05       	cpc	r19, r1
    18f8:	81 f0       	breq	.+32     	; 0x191a <GPIO_readPort+0x68>
    18fa:	8b 81       	ldd	r24, Y+3	; 0x03
    18fc:	9c 81       	ldd	r25, Y+4	; 0x04
    18fe:	83 30       	cpi	r24, 0x03	; 3
    1900:	91 05       	cpc	r25, r1
    1902:	81 f0       	breq	.+32     	; 0x1924 <GPIO_readPort+0x72>
    1904:	13 c0       	rjmp	.+38     	; 0x192c <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    1906:	e9 e3       	ldi	r30, 0x39	; 57
    1908:	f0 e0       	ldi	r31, 0x00	; 0
    190a:	80 81       	ld	r24, Z
    190c:	89 83       	std	Y+1, r24	; 0x01
    190e:	0e c0       	rjmp	.+28     	; 0x192c <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    1910:	e6 e3       	ldi	r30, 0x36	; 54
    1912:	f0 e0       	ldi	r31, 0x00	; 0
    1914:	80 81       	ld	r24, Z
    1916:	89 83       	std	Y+1, r24	; 0x01
    1918:	09 c0       	rjmp	.+18     	; 0x192c <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    191a:	e3 e3       	ldi	r30, 0x33	; 51
    191c:	f0 e0       	ldi	r31, 0x00	; 0
    191e:	80 81       	ld	r24, Z
    1920:	89 83       	std	Y+1, r24	; 0x01
    1922:	04 c0       	rjmp	.+8      	; 0x192c <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    1924:	e0 e3       	ldi	r30, 0x30	; 48
    1926:	f0 e0       	ldi	r31, 0x00	; 0
    1928:	80 81       	ld	r24, Z
    192a:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    192c:	89 81       	ldd	r24, Y+1	; 0x01
}
    192e:	0f 90       	pop	r0
    1930:	0f 90       	pop	r0
    1932:	0f 90       	pop	r0
    1934:	0f 90       	pop	r0
    1936:	cf 91       	pop	r28
    1938:	df 91       	pop	r29
    193a:	08 95       	ret

0000193c <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    193c:	df 93       	push	r29
    193e:	cf 93       	push	r28
    1940:	cd b7       	in	r28, 0x3d	; 61
    1942:	de b7       	in	r29, 0x3e	; 62
    1944:	60 97       	sbiw	r28, 0x10	; 16
    1946:	0f b6       	in	r0, 0x3f	; 63
    1948:	f8 94       	cli
    194a:	de bf       	out	0x3e, r29	; 62
    194c:	0f be       	out	0x3f, r0	; 63
    194e:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    1950:	81 e0       	ldi	r24, 0x01	; 1
    1952:	64 e0       	ldi	r22, 0x04	; 4
    1954:	40 e0       	ldi	r20, 0x00	; 0
    1956:	0e 94 60 09 	call	0x12c0	; 0x12c0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    195a:	81 e0       	ldi	r24, 0x01	; 1
    195c:	65 e0       	ldi	r22, 0x05	; 5
    195e:	40 e0       	ldi	r20, 0x00	; 0
    1960:	0e 94 60 09 	call	0x12c0	; 0x12c0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	66 e0       	ldi	r22, 0x06	; 6
    1968:	40 e0       	ldi	r20, 0x00	; 0
    196a:	0e 94 60 09 	call	0x12c0	; 0x12c0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    196e:	81 e0       	ldi	r24, 0x01	; 1
    1970:	67 e0       	ldi	r22, 0x07	; 7
    1972:	40 e0       	ldi	r20, 0x00	; 0
    1974:	0e 94 60 09 	call	0x12c0	; 0x12c0 <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    1978:	83 e0       	ldi	r24, 0x03	; 3
    197a:	62 e0       	ldi	r22, 0x02	; 2
    197c:	40 e0       	ldi	r20, 0x00	; 0
    197e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    1982:	83 e0       	ldi	r24, 0x03	; 3
    1984:	63 e0       	ldi	r22, 0x03	; 3
    1986:	40 e0       	ldi	r20, 0x00	; 0
    1988:	0e 94 60 09 	call	0x12c0	; 0x12c0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    198c:	83 e0       	ldi	r24, 0x03	; 3
    198e:	64 e0       	ldi	r22, 0x04	; 4
    1990:	40 e0       	ldi	r20, 0x00	; 0
    1992:	0e 94 60 09 	call	0x12c0	; 0x12c0 <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    1996:	83 e0       	ldi	r24, 0x03	; 3
    1998:	65 e0       	ldi	r22, 0x05	; 5
    199a:	40 e0       	ldi	r20, 0x00	; 0
    199c:	0e 94 60 09 	call	0x12c0	; 0x12c0 <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    19a0:	1f 86       	std	Y+15, r1	; 0x0f
    19a2:	b4 c0       	rjmp	.+360    	; 0x1b0c <KEYPAD_getPressedKey+0x1d0>
		{
			/* 
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    19a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19a6:	98 2f       	mov	r25, r24
    19a8:	9c 5f       	subi	r25, 0xFC	; 252
    19aa:	81 e0       	ldi	r24, 0x01	; 1
    19ac:	69 2f       	mov	r22, r25
    19ae:	41 e0       	ldi	r20, 0x01	; 1
    19b0:	0e 94 60 09 	call	0x12c0	; 0x12c0 <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    19b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    19b6:	98 2f       	mov	r25, r24
    19b8:	9c 5f       	subi	r25, 0xFC	; 252
    19ba:	81 e0       	ldi	r24, 0x01	; 1
    19bc:	69 2f       	mov	r22, r25
    19be:	40 e0       	ldi	r20, 0x00	; 0
    19c0:	0e 94 4b 0a 	call	0x1496	; 0x1496 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    19c4:	18 8a       	std	Y+16, r1	; 0x10
    19c6:	22 c0       	rjmp	.+68     	; 0x1a0c <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    19c8:	88 89       	ldd	r24, Y+16	; 0x10
    19ca:	98 2f       	mov	r25, r24
    19cc:	9e 5f       	subi	r25, 0xFE	; 254
    19ce:	83 e0       	ldi	r24, 0x03	; 3
    19d0:	69 2f       	mov	r22, r25
    19d2:	0e 94 36 0b 	call	0x166c	; 0x166c <GPIO_readPin>
    19d6:	88 23       	and	r24, r24
    19d8:	b1 f4       	brne	.+44     	; 0x1a06 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    19da:	8f 85       	ldd	r24, Y+15	; 0x0f
    19dc:	88 2f       	mov	r24, r24
    19de:	90 e0       	ldi	r25, 0x00	; 0
    19e0:	88 0f       	add	r24, r24
    19e2:	99 1f       	adc	r25, r25
    19e4:	88 0f       	add	r24, r24
    19e6:	99 1f       	adc	r25, r25
    19e8:	98 2f       	mov	r25, r24
    19ea:	88 89       	ldd	r24, Y+16	; 0x10
    19ec:	89 0f       	add	r24, r25
    19ee:	8f 5f       	subi	r24, 0xFF	; 255
    19f0:	0e 94 8b 0d 	call	0x1b16	; 0x1b16 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}	
}
    19f4:	60 96       	adiw	r28, 0x10	; 16
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	f8 94       	cli
    19fa:	de bf       	out	0x3e, r29	; 62
    19fc:	0f be       	out	0x3f, r0	; 63
    19fe:	cd bf       	out	0x3d, r28	; 61
    1a00:	cf 91       	pop	r28
    1a02:	df 91       	pop	r29
    1a04:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    1a06:	88 89       	ldd	r24, Y+16	; 0x10
    1a08:	8f 5f       	subi	r24, 0xFF	; 255
    1a0a:	88 8b       	std	Y+16, r24	; 0x10
    1a0c:	88 89       	ldd	r24, Y+16	; 0x10
    1a0e:	84 30       	cpi	r24, 0x04	; 4
    1a10:	d8 f2       	brcs	.-74     	; 0x19c8 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    1a12:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a14:	98 2f       	mov	r25, r24
    1a16:	9c 5f       	subi	r25, 0xFC	; 252
    1a18:	81 e0       	ldi	r24, 0x01	; 1
    1a1a:	69 2f       	mov	r22, r25
    1a1c:	40 e0       	ldi	r20, 0x00	; 0
    1a1e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <GPIO_setupPinDirection>
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	90 e0       	ldi	r25, 0x00	; 0
    1a26:	a0 ea       	ldi	r26, 0xA0	; 160
    1a28:	b0 e4       	ldi	r27, 0x40	; 64
    1a2a:	8b 87       	std	Y+11, r24	; 0x0b
    1a2c:	9c 87       	std	Y+12, r25	; 0x0c
    1a2e:	ad 87       	std	Y+13, r26	; 0x0d
    1a30:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a32:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a34:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a36:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a38:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a3a:	20 e0       	ldi	r18, 0x00	; 0
    1a3c:	30 e0       	ldi	r19, 0x00	; 0
    1a3e:	4a ef       	ldi	r20, 0xFA	; 250
    1a40:	54 e4       	ldi	r21, 0x44	; 68
    1a42:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	8f 83       	std	Y+7, r24	; 0x07
    1a4c:	98 87       	std	Y+8, r25	; 0x08
    1a4e:	a9 87       	std	Y+9, r26	; 0x09
    1a50:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a52:	6f 81       	ldd	r22, Y+7	; 0x07
    1a54:	78 85       	ldd	r23, Y+8	; 0x08
    1a56:	89 85       	ldd	r24, Y+9	; 0x09
    1a58:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a5a:	20 e0       	ldi	r18, 0x00	; 0
    1a5c:	30 e0       	ldi	r19, 0x00	; 0
    1a5e:	40 e8       	ldi	r20, 0x80	; 128
    1a60:	5f e3       	ldi	r21, 0x3F	; 63
    1a62:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1a66:	88 23       	and	r24, r24
    1a68:	2c f4       	brge	.+10     	; 0x1a74 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    1a6a:	81 e0       	ldi	r24, 0x01	; 1
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	9e 83       	std	Y+6, r25	; 0x06
    1a70:	8d 83       	std	Y+5, r24	; 0x05
    1a72:	3f c0       	rjmp	.+126    	; 0x1af2 <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    1a74:	6f 81       	ldd	r22, Y+7	; 0x07
    1a76:	78 85       	ldd	r23, Y+8	; 0x08
    1a78:	89 85       	ldd	r24, Y+9	; 0x09
    1a7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a7c:	20 e0       	ldi	r18, 0x00	; 0
    1a7e:	3f ef       	ldi	r19, 0xFF	; 255
    1a80:	4f e7       	ldi	r20, 0x7F	; 127
    1a82:	57 e4       	ldi	r21, 0x47	; 71
    1a84:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	4c f5       	brge	.+82     	; 0x1ade <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1a8c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a8e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a90:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a92:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a94:	20 e0       	ldi	r18, 0x00	; 0
    1a96:	30 e0       	ldi	r19, 0x00	; 0
    1a98:	40 e2       	ldi	r20, 0x20	; 32
    1a9a:	51 e4       	ldi	r21, 0x41	; 65
    1a9c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aa0:	dc 01       	movw	r26, r24
    1aa2:	cb 01       	movw	r24, r22
    1aa4:	bc 01       	movw	r22, r24
    1aa6:	cd 01       	movw	r24, r26
    1aa8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aac:	dc 01       	movw	r26, r24
    1aae:	cb 01       	movw	r24, r22
    1ab0:	9e 83       	std	Y+6, r25	; 0x06
    1ab2:	8d 83       	std	Y+5, r24	; 0x05
    1ab4:	0f c0       	rjmp	.+30     	; 0x1ad4 <KEYPAD_getPressedKey+0x198>
    1ab6:	88 ec       	ldi	r24, 0xC8	; 200
    1ab8:	90 e0       	ldi	r25, 0x00	; 0
    1aba:	9c 83       	std	Y+4, r25	; 0x04
    1abc:	8b 83       	std	Y+3, r24	; 0x03
    1abe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ac0:	9c 81       	ldd	r25, Y+4	; 0x04
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <KEYPAD_getPressedKey+0x186>
    1ac6:	9c 83       	std	Y+4, r25	; 0x04
    1ac8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1aca:	8d 81       	ldd	r24, Y+5	; 0x05
    1acc:	9e 81       	ldd	r25, Y+6	; 0x06
    1ace:	01 97       	sbiw	r24, 0x01	; 1
    1ad0:	9e 83       	std	Y+6, r25	; 0x06
    1ad2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ad4:	8d 81       	ldd	r24, Y+5	; 0x05
    1ad6:	9e 81       	ldd	r25, Y+6	; 0x06
    1ad8:	00 97       	sbiw	r24, 0x00	; 0
    1ada:	69 f7       	brne	.-38     	; 0x1ab6 <KEYPAD_getPressedKey+0x17a>
    1adc:	14 c0       	rjmp	.+40     	; 0x1b06 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1ade:	6f 81       	ldd	r22, Y+7	; 0x07
    1ae0:	78 85       	ldd	r23, Y+8	; 0x08
    1ae2:	89 85       	ldd	r24, Y+9	; 0x09
    1ae4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ae6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1aea:	dc 01       	movw	r26, r24
    1aec:	cb 01       	movw	r24, r22
    1aee:	9e 83       	std	Y+6, r25	; 0x06
    1af0:	8d 83       	std	Y+5, r24	; 0x05
    1af2:	8d 81       	ldd	r24, Y+5	; 0x05
    1af4:	9e 81       	ldd	r25, Y+6	; 0x06
    1af6:	9a 83       	std	Y+2, r25	; 0x02
    1af8:	89 83       	std	Y+1, r24	; 0x01
    1afa:	89 81       	ldd	r24, Y+1	; 0x01
    1afc:	9a 81       	ldd	r25, Y+2	; 0x02
    1afe:	01 97       	sbiw	r24, 0x01	; 1
    1b00:	f1 f7       	brne	.-4      	; 0x1afe <KEYPAD_getPressedKey+0x1c2>
    1b02:	9a 83       	std	Y+2, r25	; 0x02
    1b04:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    1b06:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b08:	8f 5f       	subi	r24, 0xFF	; 255
    1b0a:	8f 87       	std	Y+15, r24	; 0x0f
    1b0c:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b0e:	84 30       	cpi	r24, 0x04	; 4
    1b10:	08 f4       	brcc	.+2      	; 0x1b14 <KEYPAD_getPressedKey+0x1d8>
    1b12:	48 cf       	rjmp	.-368    	; 0x19a4 <KEYPAD_getPressedKey+0x68>
    1b14:	45 cf       	rjmp	.-374    	; 0x19a0 <KEYPAD_getPressedKey+0x64>

00001b16 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    1b16:	df 93       	push	r29
    1b18:	cf 93       	push	r28
    1b1a:	00 d0       	rcall	.+0      	; 0x1b1c <KEYPAD_4x4_adjustKeyNumber+0x6>
    1b1c:	00 d0       	rcall	.+0      	; 0x1b1e <KEYPAD_4x4_adjustKeyNumber+0x8>
    1b1e:	cd b7       	in	r28, 0x3d	; 61
    1b20:	de b7       	in	r29, 0x3e	; 62
    1b22:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    1b24:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	28 2f       	mov	r18, r24
    1b2a:	30 e0       	ldi	r19, 0x00	; 0
    1b2c:	3c 83       	std	Y+4, r19	; 0x04
    1b2e:	2b 83       	std	Y+3, r18	; 0x03
    1b30:	8b 81       	ldd	r24, Y+3	; 0x03
    1b32:	9c 81       	ldd	r25, Y+4	; 0x04
    1b34:	88 30       	cpi	r24, 0x08	; 8
    1b36:	91 05       	cpc	r25, r1
    1b38:	09 f4       	brne	.+2      	; 0x1b3c <KEYPAD_4x4_adjustKeyNumber+0x26>
    1b3a:	70 c0       	rjmp	.+224    	; 0x1c1c <KEYPAD_4x4_adjustKeyNumber+0x106>
    1b3c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b3e:	3c 81       	ldd	r19, Y+4	; 0x04
    1b40:	29 30       	cpi	r18, 0x09	; 9
    1b42:	31 05       	cpc	r19, r1
    1b44:	5c f5       	brge	.+86     	; 0x1b9c <KEYPAD_4x4_adjustKeyNumber+0x86>
    1b46:	8b 81       	ldd	r24, Y+3	; 0x03
    1b48:	9c 81       	ldd	r25, Y+4	; 0x04
    1b4a:	84 30       	cpi	r24, 0x04	; 4
    1b4c:	91 05       	cpc	r25, r1
    1b4e:	09 f4       	brne	.+2      	; 0x1b52 <KEYPAD_4x4_adjustKeyNumber+0x3c>
    1b50:	59 c0       	rjmp	.+178    	; 0x1c04 <KEYPAD_4x4_adjustKeyNumber+0xee>
    1b52:	2b 81       	ldd	r18, Y+3	; 0x03
    1b54:	3c 81       	ldd	r19, Y+4	; 0x04
    1b56:	25 30       	cpi	r18, 0x05	; 5
    1b58:	31 05       	cpc	r19, r1
    1b5a:	9c f4       	brge	.+38     	; 0x1b82 <KEYPAD_4x4_adjustKeyNumber+0x6c>
    1b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    1b5e:	9c 81       	ldd	r25, Y+4	; 0x04
    1b60:	82 30       	cpi	r24, 0x02	; 2
    1b62:	91 05       	cpc	r25, r1
    1b64:	09 f4       	brne	.+2      	; 0x1b68 <KEYPAD_4x4_adjustKeyNumber+0x52>
    1b66:	48 c0       	rjmp	.+144    	; 0x1bf8 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    1b68:	2b 81       	ldd	r18, Y+3	; 0x03
    1b6a:	3c 81       	ldd	r19, Y+4	; 0x04
    1b6c:	23 30       	cpi	r18, 0x03	; 3
    1b6e:	31 05       	cpc	r19, r1
    1b70:	0c f0       	brlt	.+2      	; 0x1b74 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    1b72:	45 c0       	rjmp	.+138    	; 0x1bfe <KEYPAD_4x4_adjustKeyNumber+0xe8>
    1b74:	8b 81       	ldd	r24, Y+3	; 0x03
    1b76:	9c 81       	ldd	r25, Y+4	; 0x04
    1b78:	81 30       	cpi	r24, 0x01	; 1
    1b7a:	91 05       	cpc	r25, r1
    1b7c:	09 f4       	brne	.+2      	; 0x1b80 <KEYPAD_4x4_adjustKeyNumber+0x6a>
    1b7e:	39 c0       	rjmp	.+114    	; 0x1bf2 <KEYPAD_4x4_adjustKeyNumber+0xdc>
    1b80:	67 c0       	rjmp	.+206    	; 0x1c50 <KEYPAD_4x4_adjustKeyNumber+0x13a>
    1b82:	2b 81       	ldd	r18, Y+3	; 0x03
    1b84:	3c 81       	ldd	r19, Y+4	; 0x04
    1b86:	26 30       	cpi	r18, 0x06	; 6
    1b88:	31 05       	cpc	r19, r1
    1b8a:	09 f4       	brne	.+2      	; 0x1b8e <KEYPAD_4x4_adjustKeyNumber+0x78>
    1b8c:	41 c0       	rjmp	.+130    	; 0x1c10 <KEYPAD_4x4_adjustKeyNumber+0xfa>
    1b8e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b90:	9c 81       	ldd	r25, Y+4	; 0x04
    1b92:	87 30       	cpi	r24, 0x07	; 7
    1b94:	91 05       	cpc	r25, r1
    1b96:	0c f0       	brlt	.+2      	; 0x1b9a <KEYPAD_4x4_adjustKeyNumber+0x84>
    1b98:	3e c0       	rjmp	.+124    	; 0x1c16 <KEYPAD_4x4_adjustKeyNumber+0x100>
    1b9a:	37 c0       	rjmp	.+110    	; 0x1c0a <KEYPAD_4x4_adjustKeyNumber+0xf4>
    1b9c:	2b 81       	ldd	r18, Y+3	; 0x03
    1b9e:	3c 81       	ldd	r19, Y+4	; 0x04
    1ba0:	2c 30       	cpi	r18, 0x0C	; 12
    1ba2:	31 05       	cpc	r19, r1
    1ba4:	09 f4       	brne	.+2      	; 0x1ba8 <KEYPAD_4x4_adjustKeyNumber+0x92>
    1ba6:	46 c0       	rjmp	.+140    	; 0x1c34 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    1ba8:	8b 81       	ldd	r24, Y+3	; 0x03
    1baa:	9c 81       	ldd	r25, Y+4	; 0x04
    1bac:	8d 30       	cpi	r24, 0x0D	; 13
    1bae:	91 05       	cpc	r25, r1
    1bb0:	5c f4       	brge	.+22     	; 0x1bc8 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    1bb2:	2b 81       	ldd	r18, Y+3	; 0x03
    1bb4:	3c 81       	ldd	r19, Y+4	; 0x04
    1bb6:	2a 30       	cpi	r18, 0x0A	; 10
    1bb8:	31 05       	cpc	r19, r1
    1bba:	b1 f1       	breq	.+108    	; 0x1c28 <KEYPAD_4x4_adjustKeyNumber+0x112>
    1bbc:	8b 81       	ldd	r24, Y+3	; 0x03
    1bbe:	9c 81       	ldd	r25, Y+4	; 0x04
    1bc0:	8b 30       	cpi	r24, 0x0B	; 11
    1bc2:	91 05       	cpc	r25, r1
    1bc4:	a4 f5       	brge	.+104    	; 0x1c2e <KEYPAD_4x4_adjustKeyNumber+0x118>
    1bc6:	2d c0       	rjmp	.+90     	; 0x1c22 <KEYPAD_4x4_adjustKeyNumber+0x10c>
    1bc8:	2b 81       	ldd	r18, Y+3	; 0x03
    1bca:	3c 81       	ldd	r19, Y+4	; 0x04
    1bcc:	2e 30       	cpi	r18, 0x0E	; 14
    1bce:	31 05       	cpc	r19, r1
    1bd0:	b9 f1       	breq	.+110    	; 0x1c40 <KEYPAD_4x4_adjustKeyNumber+0x12a>
    1bd2:	8b 81       	ldd	r24, Y+3	; 0x03
    1bd4:	9c 81       	ldd	r25, Y+4	; 0x04
    1bd6:	8e 30       	cpi	r24, 0x0E	; 14
    1bd8:	91 05       	cpc	r25, r1
    1bda:	7c f1       	brlt	.+94     	; 0x1c3a <KEYPAD_4x4_adjustKeyNumber+0x124>
    1bdc:	2b 81       	ldd	r18, Y+3	; 0x03
    1bde:	3c 81       	ldd	r19, Y+4	; 0x04
    1be0:	2f 30       	cpi	r18, 0x0F	; 15
    1be2:	31 05       	cpc	r19, r1
    1be4:	79 f1       	breq	.+94     	; 0x1c44 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    1be6:	8b 81       	ldd	r24, Y+3	; 0x03
    1be8:	9c 81       	ldd	r25, Y+4	; 0x04
    1bea:	80 31       	cpi	r24, 0x10	; 16
    1bec:	91 05       	cpc	r25, r1
    1bee:	69 f1       	breq	.+90     	; 0x1c4a <KEYPAD_4x4_adjustKeyNumber+0x134>
    1bf0:	2f c0       	rjmp	.+94     	; 0x1c50 <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    1bf2:	87 e0       	ldi	r24, 0x07	; 7
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	2e c0       	rjmp	.+92     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    1bf8:	88 e0       	ldi	r24, 0x08	; 8
    1bfa:	89 83       	std	Y+1, r24	; 0x01
    1bfc:	2b c0       	rjmp	.+86     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    1bfe:	89 e0       	ldi	r24, 0x09	; 9
    1c00:	89 83       	std	Y+1, r24	; 0x01
    1c02:	28 c0       	rjmp	.+80     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    1c04:	85 e2       	ldi	r24, 0x25	; 37
    1c06:	89 83       	std	Y+1, r24	; 0x01
    1c08:	25 c0       	rjmp	.+74     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    1c0a:	84 e0       	ldi	r24, 0x04	; 4
    1c0c:	89 83       	std	Y+1, r24	; 0x01
    1c0e:	22 c0       	rjmp	.+68     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    1c10:	85 e0       	ldi	r24, 0x05	; 5
    1c12:	89 83       	std	Y+1, r24	; 0x01
    1c14:	1f c0       	rjmp	.+62     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    1c16:	86 e0       	ldi	r24, 0x06	; 6
    1c18:	89 83       	std	Y+1, r24	; 0x01
    1c1a:	1c c0       	rjmp	.+56     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    1c1c:	8a e2       	ldi	r24, 0x2A	; 42
    1c1e:	89 83       	std	Y+1, r24	; 0x01
    1c20:	19 c0       	rjmp	.+50     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;		
		case 9: keypad_button = 1;
    1c22:	81 e0       	ldi	r24, 0x01	; 1
    1c24:	89 83       	std	Y+1, r24	; 0x01
    1c26:	16 c0       	rjmp	.+44     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    1c28:	82 e0       	ldi	r24, 0x02	; 2
    1c2a:	89 83       	std	Y+1, r24	; 0x01
    1c2c:	13 c0       	rjmp	.+38     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    1c2e:	83 e0       	ldi	r24, 0x03	; 3
    1c30:	89 83       	std	Y+1, r24	; 0x01
    1c32:	10 c0       	rjmp	.+32     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    1c34:	8d e2       	ldi	r24, 0x2D	; 45
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	0d c0       	rjmp	.+26     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    1c3a:	8d e0       	ldi	r24, 0x0D	; 13
    1c3c:	89 83       	std	Y+1, r24	; 0x01
    1c3e:	0a c0       	rjmp	.+20     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;			
		case 14: keypad_button = 0;
    1c40:	19 82       	std	Y+1, r1	; 0x01
    1c42:	08 c0       	rjmp	.+16     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    1c44:	8d e3       	ldi	r24, 0x3D	; 61
    1c46:	89 83       	std	Y+1, r24	; 0x01
    1c48:	05 c0       	rjmp	.+10     	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    1c4a:	8b e2       	ldi	r24, 0x2B	; 43
    1c4c:	89 83       	std	Y+1, r24	; 0x01
    1c4e:	02 c0       	rjmp	.+4      	; 0x1c54 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    1c50:	8a 81       	ldd	r24, Y+2	; 0x02
    1c52:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    1c54:	89 81       	ldd	r24, Y+1	; 0x01
} 
    1c56:	0f 90       	pop	r0
    1c58:	0f 90       	pop	r0
    1c5a:	0f 90       	pop	r0
    1c5c:	0f 90       	pop	r0
    1c5e:	cf 91       	pop	r28
    1c60:	df 91       	pop	r29
    1c62:	08 95       	ret

00001c64 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    1c64:	df 93       	push	r29
    1c66:	cf 93       	push	r28
    1c68:	cd b7       	in	r28, 0x3d	; 61
    1c6a:	de b7       	in	r29, 0x3e	; 62
    1c6c:	2e 97       	sbiw	r28, 0x0e	; 14
    1c6e:	0f b6       	in	r0, 0x3f	; 63
    1c70:	f8 94       	cli
    1c72:	de bf       	out	0x3e, r29	; 62
    1c74:	0f be       	out	0x3f, r0	; 63
    1c76:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    1c78:	81 e0       	ldi	r24, 0x01	; 1
    1c7a:	60 e0       	ldi	r22, 0x00	; 0
    1c7c:	41 e0       	ldi	r20, 0x01	; 1
    1c7e:	0e 94 60 09 	call	0x12c0	; 0x12c0 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    1c82:	81 e0       	ldi	r24, 0x01	; 1
    1c84:	61 e0       	ldi	r22, 0x01	; 1
    1c86:	41 e0       	ldi	r20, 0x01	; 1
    1c88:	0e 94 60 09 	call	0x12c0	; 0x12c0 <GPIO_setupPinDirection>
    1c8c:	80 e0       	ldi	r24, 0x00	; 0
    1c8e:	90 e0       	ldi	r25, 0x00	; 0
    1c90:	a0 ea       	ldi	r26, 0xA0	; 160
    1c92:	b1 e4       	ldi	r27, 0x41	; 65
    1c94:	8b 87       	std	Y+11, r24	; 0x0b
    1c96:	9c 87       	std	Y+12, r25	; 0x0c
    1c98:	ad 87       	std	Y+13, r26	; 0x0d
    1c9a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c9c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c9e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ca0:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ca2:	9e 85       	ldd	r25, Y+14	; 0x0e
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	4a ef       	ldi	r20, 0xFA	; 250
    1caa:	54 e4       	ldi	r21, 0x44	; 68
    1cac:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cb0:	dc 01       	movw	r26, r24
    1cb2:	cb 01       	movw	r24, r22
    1cb4:	8f 83       	std	Y+7, r24	; 0x07
    1cb6:	98 87       	std	Y+8, r25	; 0x08
    1cb8:	a9 87       	std	Y+9, r26	; 0x09
    1cba:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1cbc:	6f 81       	ldd	r22, Y+7	; 0x07
    1cbe:	78 85       	ldd	r23, Y+8	; 0x08
    1cc0:	89 85       	ldd	r24, Y+9	; 0x09
    1cc2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc4:	20 e0       	ldi	r18, 0x00	; 0
    1cc6:	30 e0       	ldi	r19, 0x00	; 0
    1cc8:	40 e8       	ldi	r20, 0x80	; 128
    1cca:	5f e3       	ldi	r21, 0x3F	; 63
    1ccc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cd0:	88 23       	and	r24, r24
    1cd2:	2c f4       	brge	.+10     	; 0x1cde <LCD_init+0x7a>
		__ticks = 1;
    1cd4:	81 e0       	ldi	r24, 0x01	; 1
    1cd6:	90 e0       	ldi	r25, 0x00	; 0
    1cd8:	9e 83       	std	Y+6, r25	; 0x06
    1cda:	8d 83       	std	Y+5, r24	; 0x05
    1cdc:	3f c0       	rjmp	.+126    	; 0x1d5c <LCD_init+0xf8>
	else if (__tmp > 65535)
    1cde:	6f 81       	ldd	r22, Y+7	; 0x07
    1ce0:	78 85       	ldd	r23, Y+8	; 0x08
    1ce2:	89 85       	ldd	r24, Y+9	; 0x09
    1ce4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ce6:	20 e0       	ldi	r18, 0x00	; 0
    1ce8:	3f ef       	ldi	r19, 0xFF	; 255
    1cea:	4f e7       	ldi	r20, 0x7F	; 127
    1cec:	57 e4       	ldi	r21, 0x47	; 71
    1cee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cf2:	18 16       	cp	r1, r24
    1cf4:	4c f5       	brge	.+82     	; 0x1d48 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cf6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cf8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cfa:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cfc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cfe:	20 e0       	ldi	r18, 0x00	; 0
    1d00:	30 e0       	ldi	r19, 0x00	; 0
    1d02:	40 e2       	ldi	r20, 0x20	; 32
    1d04:	51 e4       	ldi	r21, 0x41	; 65
    1d06:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d0a:	dc 01       	movw	r26, r24
    1d0c:	cb 01       	movw	r24, r22
    1d0e:	bc 01       	movw	r22, r24
    1d10:	cd 01       	movw	r24, r26
    1d12:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d16:	dc 01       	movw	r26, r24
    1d18:	cb 01       	movw	r24, r22
    1d1a:	9e 83       	std	Y+6, r25	; 0x06
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
    1d1e:	0f c0       	rjmp	.+30     	; 0x1d3e <LCD_init+0xda>
    1d20:	88 ec       	ldi	r24, 0xC8	; 200
    1d22:	90 e0       	ldi	r25, 0x00	; 0
    1d24:	9c 83       	std	Y+4, r25	; 0x04
    1d26:	8b 83       	std	Y+3, r24	; 0x03
    1d28:	8b 81       	ldd	r24, Y+3	; 0x03
    1d2a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d2c:	01 97       	sbiw	r24, 0x01	; 1
    1d2e:	f1 f7       	brne	.-4      	; 0x1d2c <LCD_init+0xc8>
    1d30:	9c 83       	std	Y+4, r25	; 0x04
    1d32:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d34:	8d 81       	ldd	r24, Y+5	; 0x05
    1d36:	9e 81       	ldd	r25, Y+6	; 0x06
    1d38:	01 97       	sbiw	r24, 0x01	; 1
    1d3a:	9e 83       	std	Y+6, r25	; 0x06
    1d3c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d3e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d40:	9e 81       	ldd	r25, Y+6	; 0x06
    1d42:	00 97       	sbiw	r24, 0x00	; 0
    1d44:	69 f7       	brne	.-38     	; 0x1d20 <LCD_init+0xbc>
    1d46:	14 c0       	rjmp	.+40     	; 0x1d70 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d48:	6f 81       	ldd	r22, Y+7	; 0x07
    1d4a:	78 85       	ldd	r23, Y+8	; 0x08
    1d4c:	89 85       	ldd	r24, Y+9	; 0x09
    1d4e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d54:	dc 01       	movw	r26, r24
    1d56:	cb 01       	movw	r24, r22
    1d58:	9e 83       	std	Y+6, r25	; 0x06
    1d5a:	8d 83       	std	Y+5, r24	; 0x05
    1d5c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d5e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d60:	9a 83       	std	Y+2, r25	; 0x02
    1d62:	89 83       	std	Y+1, r24	; 0x01
    1d64:	89 81       	ldd	r24, Y+1	; 0x01
    1d66:	9a 81       	ldd	r25, Y+2	; 0x02
    1d68:	01 97       	sbiw	r24, 0x01	; 1
    1d6a:	f1 f7       	brne	.-4      	; 0x1d68 <LCD_init+0x104>
    1d6c:	9a 83       	std	Y+2, r25	; 0x02
    1d6e:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	6f ef       	ldi	r22, 0xFF	; 255
    1d74:	0e 94 d1 0b 	call	0x17a2	; 0x17a2 <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    1d78:	88 e3       	ldi	r24, 0x38	; 56
    1d7a:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    1d7e:	8c e0       	ldi	r24, 0x0C	; 12
    1d80:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    1d84:	81 e0       	ldi	r24, 0x01	; 1
    1d86:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_sendCommand>
}
    1d8a:	2e 96       	adiw	r28, 0x0e	; 14
    1d8c:	0f b6       	in	r0, 0x3f	; 63
    1d8e:	f8 94       	cli
    1d90:	de bf       	out	0x3e, r29	; 62
    1d92:	0f be       	out	0x3f, r0	; 63
    1d94:	cd bf       	out	0x3d, r28	; 61
    1d96:	cf 91       	pop	r28
    1d98:	df 91       	pop	r29
    1d9a:	08 95       	ret

00001d9c <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    1d9c:	df 93       	push	r29
    1d9e:	cf 93       	push	r28
    1da0:	cd b7       	in	r28, 0x3d	; 61
    1da2:	de b7       	in	r29, 0x3e	; 62
    1da4:	e9 97       	sbiw	r28, 0x39	; 57
    1da6:	0f b6       	in	r0, 0x3f	; 63
    1da8:	f8 94       	cli
    1daa:	de bf       	out	0x3e, r29	; 62
    1dac:	0f be       	out	0x3f, r0	; 63
    1dae:	cd bf       	out	0x3d, r28	; 61
    1db0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    1db2:	81 e0       	ldi	r24, 0x01	; 1
    1db4:	60 e0       	ldi	r22, 0x00	; 0
    1db6:	40 e0       	ldi	r20, 0x00	; 0
    1db8:	0e 94 4b 0a 	call	0x1496	; 0x1496 <GPIO_writePin>
    1dbc:	80 e0       	ldi	r24, 0x00	; 0
    1dbe:	90 e0       	ldi	r25, 0x00	; 0
    1dc0:	a0 e8       	ldi	r26, 0x80	; 128
    1dc2:	bf e3       	ldi	r27, 0x3F	; 63
    1dc4:	8d ab       	std	Y+53, r24	; 0x35
    1dc6:	9e ab       	std	Y+54, r25	; 0x36
    1dc8:	af ab       	std	Y+55, r26	; 0x37
    1dca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1dcc:	6d a9       	ldd	r22, Y+53	; 0x35
    1dce:	7e a9       	ldd	r23, Y+54	; 0x36
    1dd0:	8f a9       	ldd	r24, Y+55	; 0x37
    1dd2:	98 ad       	ldd	r25, Y+56	; 0x38
    1dd4:	20 e0       	ldi	r18, 0x00	; 0
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	4a ef       	ldi	r20, 0xFA	; 250
    1dda:	54 e4       	ldi	r21, 0x44	; 68
    1ddc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1de0:	dc 01       	movw	r26, r24
    1de2:	cb 01       	movw	r24, r22
    1de4:	89 ab       	std	Y+49, r24	; 0x31
    1de6:	9a ab       	std	Y+50, r25	; 0x32
    1de8:	ab ab       	std	Y+51, r26	; 0x33
    1dea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1dec:	69 a9       	ldd	r22, Y+49	; 0x31
    1dee:	7a a9       	ldd	r23, Y+50	; 0x32
    1df0:	8b a9       	ldd	r24, Y+51	; 0x33
    1df2:	9c a9       	ldd	r25, Y+52	; 0x34
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e8       	ldi	r20, 0x80	; 128
    1dfa:	5f e3       	ldi	r21, 0x3F	; 63
    1dfc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1e00:	88 23       	and	r24, r24
    1e02:	2c f4       	brge	.+10     	; 0x1e0e <LCD_sendCommand+0x72>
		__ticks = 1;
    1e04:	81 e0       	ldi	r24, 0x01	; 1
    1e06:	90 e0       	ldi	r25, 0x00	; 0
    1e08:	98 ab       	std	Y+48, r25	; 0x30
    1e0a:	8f a7       	std	Y+47, r24	; 0x2f
    1e0c:	3f c0       	rjmp	.+126    	; 0x1e8c <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    1e0e:	69 a9       	ldd	r22, Y+49	; 0x31
    1e10:	7a a9       	ldd	r23, Y+50	; 0x32
    1e12:	8b a9       	ldd	r24, Y+51	; 0x33
    1e14:	9c a9       	ldd	r25, Y+52	; 0x34
    1e16:	20 e0       	ldi	r18, 0x00	; 0
    1e18:	3f ef       	ldi	r19, 0xFF	; 255
    1e1a:	4f e7       	ldi	r20, 0x7F	; 127
    1e1c:	57 e4       	ldi	r21, 0x47	; 71
    1e1e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1e22:	18 16       	cp	r1, r24
    1e24:	4c f5       	brge	.+82     	; 0x1e78 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1e26:	6d a9       	ldd	r22, Y+53	; 0x35
    1e28:	7e a9       	ldd	r23, Y+54	; 0x36
    1e2a:	8f a9       	ldd	r24, Y+55	; 0x37
    1e2c:	98 ad       	ldd	r25, Y+56	; 0x38
    1e2e:	20 e0       	ldi	r18, 0x00	; 0
    1e30:	30 e0       	ldi	r19, 0x00	; 0
    1e32:	40 e2       	ldi	r20, 0x20	; 32
    1e34:	51 e4       	ldi	r21, 0x41	; 65
    1e36:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e3a:	dc 01       	movw	r26, r24
    1e3c:	cb 01       	movw	r24, r22
    1e3e:	bc 01       	movw	r22, r24
    1e40:	cd 01       	movw	r24, r26
    1e42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e46:	dc 01       	movw	r26, r24
    1e48:	cb 01       	movw	r24, r22
    1e4a:	98 ab       	std	Y+48, r25	; 0x30
    1e4c:	8f a7       	std	Y+47, r24	; 0x2f
    1e4e:	0f c0       	rjmp	.+30     	; 0x1e6e <LCD_sendCommand+0xd2>
    1e50:	88 ec       	ldi	r24, 0xC8	; 200
    1e52:	90 e0       	ldi	r25, 0x00	; 0
    1e54:	9e a7       	std	Y+46, r25	; 0x2e
    1e56:	8d a7       	std	Y+45, r24	; 0x2d
    1e58:	8d a5       	ldd	r24, Y+45	; 0x2d
    1e5a:	9e a5       	ldd	r25, Y+46	; 0x2e
    1e5c:	01 97       	sbiw	r24, 0x01	; 1
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <LCD_sendCommand+0xc0>
    1e60:	9e a7       	std	Y+46, r25	; 0x2e
    1e62:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1e64:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e66:	98 a9       	ldd	r25, Y+48	; 0x30
    1e68:	01 97       	sbiw	r24, 0x01	; 1
    1e6a:	98 ab       	std	Y+48, r25	; 0x30
    1e6c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e6e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e70:	98 a9       	ldd	r25, Y+48	; 0x30
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	69 f7       	brne	.-38     	; 0x1e50 <LCD_sendCommand+0xb4>
    1e76:	14 c0       	rjmp	.+40     	; 0x1ea0 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e78:	69 a9       	ldd	r22, Y+49	; 0x31
    1e7a:	7a a9       	ldd	r23, Y+50	; 0x32
    1e7c:	8b a9       	ldd	r24, Y+51	; 0x33
    1e7e:	9c a9       	ldd	r25, Y+52	; 0x34
    1e80:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e84:	dc 01       	movw	r26, r24
    1e86:	cb 01       	movw	r24, r22
    1e88:	98 ab       	std	Y+48, r25	; 0x30
    1e8a:	8f a7       	std	Y+47, r24	; 0x2f
    1e8c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e8e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e90:	9c a7       	std	Y+44, r25	; 0x2c
    1e92:	8b a7       	std	Y+43, r24	; 0x2b
    1e94:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e96:	9c a5       	ldd	r25, Y+44	; 0x2c
    1e98:	01 97       	sbiw	r24, 0x01	; 1
    1e9a:	f1 f7       	brne	.-4      	; 0x1e98 <LCD_sendCommand+0xfc>
    1e9c:	9c a7       	std	Y+44, r25	; 0x2c
    1e9e:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    1ea0:	81 e0       	ldi	r24, 0x01	; 1
    1ea2:	61 e0       	ldi	r22, 0x01	; 1
    1ea4:	41 e0       	ldi	r20, 0x01	; 1
    1ea6:	0e 94 4b 0a 	call	0x1496	; 0x1496 <GPIO_writePin>
    1eaa:	80 e0       	ldi	r24, 0x00	; 0
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	a0 e8       	ldi	r26, 0x80	; 128
    1eb0:	bf e3       	ldi	r27, 0x3F	; 63
    1eb2:	8f a3       	std	Y+39, r24	; 0x27
    1eb4:	98 a7       	std	Y+40, r25	; 0x28
    1eb6:	a9 a7       	std	Y+41, r26	; 0x29
    1eb8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1eba:	6f a1       	ldd	r22, Y+39	; 0x27
    1ebc:	78 a5       	ldd	r23, Y+40	; 0x28
    1ebe:	89 a5       	ldd	r24, Y+41	; 0x29
    1ec0:	9a a5       	ldd	r25, Y+42	; 0x2a
    1ec2:	20 e0       	ldi	r18, 0x00	; 0
    1ec4:	30 e0       	ldi	r19, 0x00	; 0
    1ec6:	4a ef       	ldi	r20, 0xFA	; 250
    1ec8:	54 e4       	ldi	r21, 0x44	; 68
    1eca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ece:	dc 01       	movw	r26, r24
    1ed0:	cb 01       	movw	r24, r22
    1ed2:	8b a3       	std	Y+35, r24	; 0x23
    1ed4:	9c a3       	std	Y+36, r25	; 0x24
    1ed6:	ad a3       	std	Y+37, r26	; 0x25
    1ed8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1eda:	6b a1       	ldd	r22, Y+35	; 0x23
    1edc:	7c a1       	ldd	r23, Y+36	; 0x24
    1ede:	8d a1       	ldd	r24, Y+37	; 0x25
    1ee0:	9e a1       	ldd	r25, Y+38	; 0x26
    1ee2:	20 e0       	ldi	r18, 0x00	; 0
    1ee4:	30 e0       	ldi	r19, 0x00	; 0
    1ee6:	40 e8       	ldi	r20, 0x80	; 128
    1ee8:	5f e3       	ldi	r21, 0x3F	; 63
    1eea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1eee:	88 23       	and	r24, r24
    1ef0:	2c f4       	brge	.+10     	; 0x1efc <LCD_sendCommand+0x160>
		__ticks = 1;
    1ef2:	81 e0       	ldi	r24, 0x01	; 1
    1ef4:	90 e0       	ldi	r25, 0x00	; 0
    1ef6:	9a a3       	std	Y+34, r25	; 0x22
    1ef8:	89 a3       	std	Y+33, r24	; 0x21
    1efa:	3f c0       	rjmp	.+126    	; 0x1f7a <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    1efc:	6b a1       	ldd	r22, Y+35	; 0x23
    1efe:	7c a1       	ldd	r23, Y+36	; 0x24
    1f00:	8d a1       	ldd	r24, Y+37	; 0x25
    1f02:	9e a1       	ldd	r25, Y+38	; 0x26
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	3f ef       	ldi	r19, 0xFF	; 255
    1f08:	4f e7       	ldi	r20, 0x7F	; 127
    1f0a:	57 e4       	ldi	r21, 0x47	; 71
    1f0c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f10:	18 16       	cp	r1, r24
    1f12:	4c f5       	brge	.+82     	; 0x1f66 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f14:	6f a1       	ldd	r22, Y+39	; 0x27
    1f16:	78 a5       	ldd	r23, Y+40	; 0x28
    1f18:	89 a5       	ldd	r24, Y+41	; 0x29
    1f1a:	9a a5       	ldd	r25, Y+42	; 0x2a
    1f1c:	20 e0       	ldi	r18, 0x00	; 0
    1f1e:	30 e0       	ldi	r19, 0x00	; 0
    1f20:	40 e2       	ldi	r20, 0x20	; 32
    1f22:	51 e4       	ldi	r21, 0x41	; 65
    1f24:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f28:	dc 01       	movw	r26, r24
    1f2a:	cb 01       	movw	r24, r22
    1f2c:	bc 01       	movw	r22, r24
    1f2e:	cd 01       	movw	r24, r26
    1f30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f34:	dc 01       	movw	r26, r24
    1f36:	cb 01       	movw	r24, r22
    1f38:	9a a3       	std	Y+34, r25	; 0x22
    1f3a:	89 a3       	std	Y+33, r24	; 0x21
    1f3c:	0f c0       	rjmp	.+30     	; 0x1f5c <LCD_sendCommand+0x1c0>
    1f3e:	88 ec       	ldi	r24, 0xC8	; 200
    1f40:	90 e0       	ldi	r25, 0x00	; 0
    1f42:	98 a3       	std	Y+32, r25	; 0x20
    1f44:	8f 8f       	std	Y+31, r24	; 0x1f
    1f46:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1f48:	98 a1       	ldd	r25, Y+32	; 0x20
    1f4a:	01 97       	sbiw	r24, 0x01	; 1
    1f4c:	f1 f7       	brne	.-4      	; 0x1f4a <LCD_sendCommand+0x1ae>
    1f4e:	98 a3       	std	Y+32, r25	; 0x20
    1f50:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f52:	89 a1       	ldd	r24, Y+33	; 0x21
    1f54:	9a a1       	ldd	r25, Y+34	; 0x22
    1f56:	01 97       	sbiw	r24, 0x01	; 1
    1f58:	9a a3       	std	Y+34, r25	; 0x22
    1f5a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f5c:	89 a1       	ldd	r24, Y+33	; 0x21
    1f5e:	9a a1       	ldd	r25, Y+34	; 0x22
    1f60:	00 97       	sbiw	r24, 0x00	; 0
    1f62:	69 f7       	brne	.-38     	; 0x1f3e <LCD_sendCommand+0x1a2>
    1f64:	14 c0       	rjmp	.+40     	; 0x1f8e <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f66:	6b a1       	ldd	r22, Y+35	; 0x23
    1f68:	7c a1       	ldd	r23, Y+36	; 0x24
    1f6a:	8d a1       	ldd	r24, Y+37	; 0x25
    1f6c:	9e a1       	ldd	r25, Y+38	; 0x26
    1f6e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f72:	dc 01       	movw	r26, r24
    1f74:	cb 01       	movw	r24, r22
    1f76:	9a a3       	std	Y+34, r25	; 0x22
    1f78:	89 a3       	std	Y+33, r24	; 0x21
    1f7a:	89 a1       	ldd	r24, Y+33	; 0x21
    1f7c:	9a a1       	ldd	r25, Y+34	; 0x22
    1f7e:	9e 8f       	std	Y+30, r25	; 0x1e
    1f80:	8d 8f       	std	Y+29, r24	; 0x1d
    1f82:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1f84:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1f86:	01 97       	sbiw	r24, 0x01	; 1
    1f88:	f1 f7       	brne	.-4      	; 0x1f86 <LCD_sendCommand+0x1ea>
    1f8a:	9e 8f       	std	Y+30, r25	; 0x1e
    1f8c:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    1f8e:	80 e0       	ldi	r24, 0x00	; 0
    1f90:	69 ad       	ldd	r22, Y+57	; 0x39
    1f92:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePort>
    1f96:	80 e0       	ldi	r24, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	a0 e8       	ldi	r26, 0x80	; 128
    1f9c:	bf e3       	ldi	r27, 0x3F	; 63
    1f9e:	89 8f       	std	Y+25, r24	; 0x19
    1fa0:	9a 8f       	std	Y+26, r25	; 0x1a
    1fa2:	ab 8f       	std	Y+27, r26	; 0x1b
    1fa4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1fa6:	69 8d       	ldd	r22, Y+25	; 0x19
    1fa8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1faa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1fac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1fae:	20 e0       	ldi	r18, 0x00	; 0
    1fb0:	30 e0       	ldi	r19, 0x00	; 0
    1fb2:	4a ef       	ldi	r20, 0xFA	; 250
    1fb4:	54 e4       	ldi	r21, 0x44	; 68
    1fb6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fba:	dc 01       	movw	r26, r24
    1fbc:	cb 01       	movw	r24, r22
    1fbe:	8d 8b       	std	Y+21, r24	; 0x15
    1fc0:	9e 8b       	std	Y+22, r25	; 0x16
    1fc2:	af 8b       	std	Y+23, r26	; 0x17
    1fc4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1fc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc8:	7e 89       	ldd	r23, Y+22	; 0x16
    1fca:	8f 89       	ldd	r24, Y+23	; 0x17
    1fcc:	98 8d       	ldd	r25, Y+24	; 0x18
    1fce:	20 e0       	ldi	r18, 0x00	; 0
    1fd0:	30 e0       	ldi	r19, 0x00	; 0
    1fd2:	40 e8       	ldi	r20, 0x80	; 128
    1fd4:	5f e3       	ldi	r21, 0x3F	; 63
    1fd6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1fda:	88 23       	and	r24, r24
    1fdc:	2c f4       	brge	.+10     	; 0x1fe8 <LCD_sendCommand+0x24c>
		__ticks = 1;
    1fde:	81 e0       	ldi	r24, 0x01	; 1
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	9c 8b       	std	Y+20, r25	; 0x14
    1fe4:	8b 8b       	std	Y+19, r24	; 0x13
    1fe6:	3f c0       	rjmp	.+126    	; 0x2066 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    1fe8:	6d 89       	ldd	r22, Y+21	; 0x15
    1fea:	7e 89       	ldd	r23, Y+22	; 0x16
    1fec:	8f 89       	ldd	r24, Y+23	; 0x17
    1fee:	98 8d       	ldd	r25, Y+24	; 0x18
    1ff0:	20 e0       	ldi	r18, 0x00	; 0
    1ff2:	3f ef       	ldi	r19, 0xFF	; 255
    1ff4:	4f e7       	ldi	r20, 0x7F	; 127
    1ff6:	57 e4       	ldi	r21, 0x47	; 71
    1ff8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ffc:	18 16       	cp	r1, r24
    1ffe:	4c f5       	brge	.+82     	; 0x2052 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2000:	69 8d       	ldd	r22, Y+25	; 0x19
    2002:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2004:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2006:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2008:	20 e0       	ldi	r18, 0x00	; 0
    200a:	30 e0       	ldi	r19, 0x00	; 0
    200c:	40 e2       	ldi	r20, 0x20	; 32
    200e:	51 e4       	ldi	r21, 0x41	; 65
    2010:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2014:	dc 01       	movw	r26, r24
    2016:	cb 01       	movw	r24, r22
    2018:	bc 01       	movw	r22, r24
    201a:	cd 01       	movw	r24, r26
    201c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2020:	dc 01       	movw	r26, r24
    2022:	cb 01       	movw	r24, r22
    2024:	9c 8b       	std	Y+20, r25	; 0x14
    2026:	8b 8b       	std	Y+19, r24	; 0x13
    2028:	0f c0       	rjmp	.+30     	; 0x2048 <LCD_sendCommand+0x2ac>
    202a:	88 ec       	ldi	r24, 0xC8	; 200
    202c:	90 e0       	ldi	r25, 0x00	; 0
    202e:	9a 8b       	std	Y+18, r25	; 0x12
    2030:	89 8b       	std	Y+17, r24	; 0x11
    2032:	89 89       	ldd	r24, Y+17	; 0x11
    2034:	9a 89       	ldd	r25, Y+18	; 0x12
    2036:	01 97       	sbiw	r24, 0x01	; 1
    2038:	f1 f7       	brne	.-4      	; 0x2036 <LCD_sendCommand+0x29a>
    203a:	9a 8b       	std	Y+18, r25	; 0x12
    203c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    203e:	8b 89       	ldd	r24, Y+19	; 0x13
    2040:	9c 89       	ldd	r25, Y+20	; 0x14
    2042:	01 97       	sbiw	r24, 0x01	; 1
    2044:	9c 8b       	std	Y+20, r25	; 0x14
    2046:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2048:	8b 89       	ldd	r24, Y+19	; 0x13
    204a:	9c 89       	ldd	r25, Y+20	; 0x14
    204c:	00 97       	sbiw	r24, 0x00	; 0
    204e:	69 f7       	brne	.-38     	; 0x202a <LCD_sendCommand+0x28e>
    2050:	14 c0       	rjmp	.+40     	; 0x207a <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2052:	6d 89       	ldd	r22, Y+21	; 0x15
    2054:	7e 89       	ldd	r23, Y+22	; 0x16
    2056:	8f 89       	ldd	r24, Y+23	; 0x17
    2058:	98 8d       	ldd	r25, Y+24	; 0x18
    205a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    205e:	dc 01       	movw	r26, r24
    2060:	cb 01       	movw	r24, r22
    2062:	9c 8b       	std	Y+20, r25	; 0x14
    2064:	8b 8b       	std	Y+19, r24	; 0x13
    2066:	8b 89       	ldd	r24, Y+19	; 0x13
    2068:	9c 89       	ldd	r25, Y+20	; 0x14
    206a:	98 8b       	std	Y+16, r25	; 0x10
    206c:	8f 87       	std	Y+15, r24	; 0x0f
    206e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2070:	98 89       	ldd	r25, Y+16	; 0x10
    2072:	01 97       	sbiw	r24, 0x01	; 1
    2074:	f1 f7       	brne	.-4      	; 0x2072 <LCD_sendCommand+0x2d6>
    2076:	98 8b       	std	Y+16, r25	; 0x10
    2078:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    207a:	81 e0       	ldi	r24, 0x01	; 1
    207c:	61 e0       	ldi	r22, 0x01	; 1
    207e:	40 e0       	ldi	r20, 0x00	; 0
    2080:	0e 94 4b 0a 	call	0x1496	; 0x1496 <GPIO_writePin>
    2084:	80 e0       	ldi	r24, 0x00	; 0
    2086:	90 e0       	ldi	r25, 0x00	; 0
    2088:	a0 e8       	ldi	r26, 0x80	; 128
    208a:	bf e3       	ldi	r27, 0x3F	; 63
    208c:	8b 87       	std	Y+11, r24	; 0x0b
    208e:	9c 87       	std	Y+12, r25	; 0x0c
    2090:	ad 87       	std	Y+13, r26	; 0x0d
    2092:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2094:	6b 85       	ldd	r22, Y+11	; 0x0b
    2096:	7c 85       	ldd	r23, Y+12	; 0x0c
    2098:	8d 85       	ldd	r24, Y+13	; 0x0d
    209a:	9e 85       	ldd	r25, Y+14	; 0x0e
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	30 e0       	ldi	r19, 0x00	; 0
    20a0:	4a ef       	ldi	r20, 0xFA	; 250
    20a2:	54 e4       	ldi	r21, 0x44	; 68
    20a4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20a8:	dc 01       	movw	r26, r24
    20aa:	cb 01       	movw	r24, r22
    20ac:	8f 83       	std	Y+7, r24	; 0x07
    20ae:	98 87       	std	Y+8, r25	; 0x08
    20b0:	a9 87       	std	Y+9, r26	; 0x09
    20b2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20b4:	6f 81       	ldd	r22, Y+7	; 0x07
    20b6:	78 85       	ldd	r23, Y+8	; 0x08
    20b8:	89 85       	ldd	r24, Y+9	; 0x09
    20ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	30 e0       	ldi	r19, 0x00	; 0
    20c0:	40 e8       	ldi	r20, 0x80	; 128
    20c2:	5f e3       	ldi	r21, 0x3F	; 63
    20c4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20c8:	88 23       	and	r24, r24
    20ca:	2c f4       	brge	.+10     	; 0x20d6 <LCD_sendCommand+0x33a>
		__ticks = 1;
    20cc:	81 e0       	ldi	r24, 0x01	; 1
    20ce:	90 e0       	ldi	r25, 0x00	; 0
    20d0:	9e 83       	std	Y+6, r25	; 0x06
    20d2:	8d 83       	std	Y+5, r24	; 0x05
    20d4:	3f c0       	rjmp	.+126    	; 0x2154 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    20d6:	6f 81       	ldd	r22, Y+7	; 0x07
    20d8:	78 85       	ldd	r23, Y+8	; 0x08
    20da:	89 85       	ldd	r24, Y+9	; 0x09
    20dc:	9a 85       	ldd	r25, Y+10	; 0x0a
    20de:	20 e0       	ldi	r18, 0x00	; 0
    20e0:	3f ef       	ldi	r19, 0xFF	; 255
    20e2:	4f e7       	ldi	r20, 0x7F	; 127
    20e4:	57 e4       	ldi	r21, 0x47	; 71
    20e6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20ea:	18 16       	cp	r1, r24
    20ec:	4c f5       	brge	.+82     	; 0x2140 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    20f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    20f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    20f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    20f6:	20 e0       	ldi	r18, 0x00	; 0
    20f8:	30 e0       	ldi	r19, 0x00	; 0
    20fa:	40 e2       	ldi	r20, 0x20	; 32
    20fc:	51 e4       	ldi	r21, 0x41	; 65
    20fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2102:	dc 01       	movw	r26, r24
    2104:	cb 01       	movw	r24, r22
    2106:	bc 01       	movw	r22, r24
    2108:	cd 01       	movw	r24, r26
    210a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    210e:	dc 01       	movw	r26, r24
    2110:	cb 01       	movw	r24, r22
    2112:	9e 83       	std	Y+6, r25	; 0x06
    2114:	8d 83       	std	Y+5, r24	; 0x05
    2116:	0f c0       	rjmp	.+30     	; 0x2136 <LCD_sendCommand+0x39a>
    2118:	88 ec       	ldi	r24, 0xC8	; 200
    211a:	90 e0       	ldi	r25, 0x00	; 0
    211c:	9c 83       	std	Y+4, r25	; 0x04
    211e:	8b 83       	std	Y+3, r24	; 0x03
    2120:	8b 81       	ldd	r24, Y+3	; 0x03
    2122:	9c 81       	ldd	r25, Y+4	; 0x04
    2124:	01 97       	sbiw	r24, 0x01	; 1
    2126:	f1 f7       	brne	.-4      	; 0x2124 <LCD_sendCommand+0x388>
    2128:	9c 83       	std	Y+4, r25	; 0x04
    212a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    212c:	8d 81       	ldd	r24, Y+5	; 0x05
    212e:	9e 81       	ldd	r25, Y+6	; 0x06
    2130:	01 97       	sbiw	r24, 0x01	; 1
    2132:	9e 83       	std	Y+6, r25	; 0x06
    2134:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2136:	8d 81       	ldd	r24, Y+5	; 0x05
    2138:	9e 81       	ldd	r25, Y+6	; 0x06
    213a:	00 97       	sbiw	r24, 0x00	; 0
    213c:	69 f7       	brne	.-38     	; 0x2118 <LCD_sendCommand+0x37c>
    213e:	14 c0       	rjmp	.+40     	; 0x2168 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2140:	6f 81       	ldd	r22, Y+7	; 0x07
    2142:	78 85       	ldd	r23, Y+8	; 0x08
    2144:	89 85       	ldd	r24, Y+9	; 0x09
    2146:	9a 85       	ldd	r25, Y+10	; 0x0a
    2148:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    214c:	dc 01       	movw	r26, r24
    214e:	cb 01       	movw	r24, r22
    2150:	9e 83       	std	Y+6, r25	; 0x06
    2152:	8d 83       	std	Y+5, r24	; 0x05
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	9a 83       	std	Y+2, r25	; 0x02
    215a:	89 83       	std	Y+1, r24	; 0x01
    215c:	89 81       	ldd	r24, Y+1	; 0x01
    215e:	9a 81       	ldd	r25, Y+2	; 0x02
    2160:	01 97       	sbiw	r24, 0x01	; 1
    2162:	f1 f7       	brne	.-4      	; 0x2160 <LCD_sendCommand+0x3c4>
    2164:	9a 83       	std	Y+2, r25	; 0x02
    2166:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2168:	e9 96       	adiw	r28, 0x39	; 57
    216a:	0f b6       	in	r0, 0x3f	; 63
    216c:	f8 94       	cli
    216e:	de bf       	out	0x3e, r29	; 62
    2170:	0f be       	out	0x3f, r0	; 63
    2172:	cd bf       	out	0x3d, r28	; 61
    2174:	cf 91       	pop	r28
    2176:	df 91       	pop	r29
    2178:	08 95       	ret

0000217a <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    217a:	df 93       	push	r29
    217c:	cf 93       	push	r28
    217e:	cd b7       	in	r28, 0x3d	; 61
    2180:	de b7       	in	r29, 0x3e	; 62
    2182:	e9 97       	sbiw	r28, 0x39	; 57
    2184:	0f b6       	in	r0, 0x3f	; 63
    2186:	f8 94       	cli
    2188:	de bf       	out	0x3e, r29	; 62
    218a:	0f be       	out	0x3f, r0	; 63
    218c:	cd bf       	out	0x3d, r28	; 61
    218e:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    2190:	81 e0       	ldi	r24, 0x01	; 1
    2192:	60 e0       	ldi	r22, 0x00	; 0
    2194:	41 e0       	ldi	r20, 0x01	; 1
    2196:	0e 94 4b 0a 	call	0x1496	; 0x1496 <GPIO_writePin>
    219a:	80 e0       	ldi	r24, 0x00	; 0
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	a0 e8       	ldi	r26, 0x80	; 128
    21a0:	bf e3       	ldi	r27, 0x3F	; 63
    21a2:	8d ab       	std	Y+53, r24	; 0x35
    21a4:	9e ab       	std	Y+54, r25	; 0x36
    21a6:	af ab       	std	Y+55, r26	; 0x37
    21a8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21aa:	6d a9       	ldd	r22, Y+53	; 0x35
    21ac:	7e a9       	ldd	r23, Y+54	; 0x36
    21ae:	8f a9       	ldd	r24, Y+55	; 0x37
    21b0:	98 ad       	ldd	r25, Y+56	; 0x38
    21b2:	20 e0       	ldi	r18, 0x00	; 0
    21b4:	30 e0       	ldi	r19, 0x00	; 0
    21b6:	4a ef       	ldi	r20, 0xFA	; 250
    21b8:	54 e4       	ldi	r21, 0x44	; 68
    21ba:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21be:	dc 01       	movw	r26, r24
    21c0:	cb 01       	movw	r24, r22
    21c2:	89 ab       	std	Y+49, r24	; 0x31
    21c4:	9a ab       	std	Y+50, r25	; 0x32
    21c6:	ab ab       	std	Y+51, r26	; 0x33
    21c8:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    21ca:	69 a9       	ldd	r22, Y+49	; 0x31
    21cc:	7a a9       	ldd	r23, Y+50	; 0x32
    21ce:	8b a9       	ldd	r24, Y+51	; 0x33
    21d0:	9c a9       	ldd	r25, Y+52	; 0x34
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e8       	ldi	r20, 0x80	; 128
    21d8:	5f e3       	ldi	r21, 0x3F	; 63
    21da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21de:	88 23       	and	r24, r24
    21e0:	2c f4       	brge	.+10     	; 0x21ec <LCD_displayCharacter+0x72>
		__ticks = 1;
    21e2:	81 e0       	ldi	r24, 0x01	; 1
    21e4:	90 e0       	ldi	r25, 0x00	; 0
    21e6:	98 ab       	std	Y+48, r25	; 0x30
    21e8:	8f a7       	std	Y+47, r24	; 0x2f
    21ea:	3f c0       	rjmp	.+126    	; 0x226a <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    21ec:	69 a9       	ldd	r22, Y+49	; 0x31
    21ee:	7a a9       	ldd	r23, Y+50	; 0x32
    21f0:	8b a9       	ldd	r24, Y+51	; 0x33
    21f2:	9c a9       	ldd	r25, Y+52	; 0x34
    21f4:	20 e0       	ldi	r18, 0x00	; 0
    21f6:	3f ef       	ldi	r19, 0xFF	; 255
    21f8:	4f e7       	ldi	r20, 0x7F	; 127
    21fa:	57 e4       	ldi	r21, 0x47	; 71
    21fc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2200:	18 16       	cp	r1, r24
    2202:	4c f5       	brge	.+82     	; 0x2256 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2204:	6d a9       	ldd	r22, Y+53	; 0x35
    2206:	7e a9       	ldd	r23, Y+54	; 0x36
    2208:	8f a9       	ldd	r24, Y+55	; 0x37
    220a:	98 ad       	ldd	r25, Y+56	; 0x38
    220c:	20 e0       	ldi	r18, 0x00	; 0
    220e:	30 e0       	ldi	r19, 0x00	; 0
    2210:	40 e2       	ldi	r20, 0x20	; 32
    2212:	51 e4       	ldi	r21, 0x41	; 65
    2214:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2218:	dc 01       	movw	r26, r24
    221a:	cb 01       	movw	r24, r22
    221c:	bc 01       	movw	r22, r24
    221e:	cd 01       	movw	r24, r26
    2220:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2224:	dc 01       	movw	r26, r24
    2226:	cb 01       	movw	r24, r22
    2228:	98 ab       	std	Y+48, r25	; 0x30
    222a:	8f a7       	std	Y+47, r24	; 0x2f
    222c:	0f c0       	rjmp	.+30     	; 0x224c <LCD_displayCharacter+0xd2>
    222e:	88 ec       	ldi	r24, 0xC8	; 200
    2230:	90 e0       	ldi	r25, 0x00	; 0
    2232:	9e a7       	std	Y+46, r25	; 0x2e
    2234:	8d a7       	std	Y+45, r24	; 0x2d
    2236:	8d a5       	ldd	r24, Y+45	; 0x2d
    2238:	9e a5       	ldd	r25, Y+46	; 0x2e
    223a:	01 97       	sbiw	r24, 0x01	; 1
    223c:	f1 f7       	brne	.-4      	; 0x223a <LCD_displayCharacter+0xc0>
    223e:	9e a7       	std	Y+46, r25	; 0x2e
    2240:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2242:	8f a5       	ldd	r24, Y+47	; 0x2f
    2244:	98 a9       	ldd	r25, Y+48	; 0x30
    2246:	01 97       	sbiw	r24, 0x01	; 1
    2248:	98 ab       	std	Y+48, r25	; 0x30
    224a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    224c:	8f a5       	ldd	r24, Y+47	; 0x2f
    224e:	98 a9       	ldd	r25, Y+48	; 0x30
    2250:	00 97       	sbiw	r24, 0x00	; 0
    2252:	69 f7       	brne	.-38     	; 0x222e <LCD_displayCharacter+0xb4>
    2254:	14 c0       	rjmp	.+40     	; 0x227e <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2256:	69 a9       	ldd	r22, Y+49	; 0x31
    2258:	7a a9       	ldd	r23, Y+50	; 0x32
    225a:	8b a9       	ldd	r24, Y+51	; 0x33
    225c:	9c a9       	ldd	r25, Y+52	; 0x34
    225e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2262:	dc 01       	movw	r26, r24
    2264:	cb 01       	movw	r24, r22
    2266:	98 ab       	std	Y+48, r25	; 0x30
    2268:	8f a7       	std	Y+47, r24	; 0x2f
    226a:	8f a5       	ldd	r24, Y+47	; 0x2f
    226c:	98 a9       	ldd	r25, Y+48	; 0x30
    226e:	9c a7       	std	Y+44, r25	; 0x2c
    2270:	8b a7       	std	Y+43, r24	; 0x2b
    2272:	8b a5       	ldd	r24, Y+43	; 0x2b
    2274:	9c a5       	ldd	r25, Y+44	; 0x2c
    2276:	01 97       	sbiw	r24, 0x01	; 1
    2278:	f1 f7       	brne	.-4      	; 0x2276 <LCD_displayCharacter+0xfc>
    227a:	9c a7       	std	Y+44, r25	; 0x2c
    227c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	61 e0       	ldi	r22, 0x01	; 1
    2282:	41 e0       	ldi	r20, 0x01	; 1
    2284:	0e 94 4b 0a 	call	0x1496	; 0x1496 <GPIO_writePin>
    2288:	80 e0       	ldi	r24, 0x00	; 0
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	a0 e8       	ldi	r26, 0x80	; 128
    228e:	bf e3       	ldi	r27, 0x3F	; 63
    2290:	8f a3       	std	Y+39, r24	; 0x27
    2292:	98 a7       	std	Y+40, r25	; 0x28
    2294:	a9 a7       	std	Y+41, r26	; 0x29
    2296:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2298:	6f a1       	ldd	r22, Y+39	; 0x27
    229a:	78 a5       	ldd	r23, Y+40	; 0x28
    229c:	89 a5       	ldd	r24, Y+41	; 0x29
    229e:	9a a5       	ldd	r25, Y+42	; 0x2a
    22a0:	20 e0       	ldi	r18, 0x00	; 0
    22a2:	30 e0       	ldi	r19, 0x00	; 0
    22a4:	4a ef       	ldi	r20, 0xFA	; 250
    22a6:	54 e4       	ldi	r21, 0x44	; 68
    22a8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22ac:	dc 01       	movw	r26, r24
    22ae:	cb 01       	movw	r24, r22
    22b0:	8b a3       	std	Y+35, r24	; 0x23
    22b2:	9c a3       	std	Y+36, r25	; 0x24
    22b4:	ad a3       	std	Y+37, r26	; 0x25
    22b6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    22b8:	6b a1       	ldd	r22, Y+35	; 0x23
    22ba:	7c a1       	ldd	r23, Y+36	; 0x24
    22bc:	8d a1       	ldd	r24, Y+37	; 0x25
    22be:	9e a1       	ldd	r25, Y+38	; 0x26
    22c0:	20 e0       	ldi	r18, 0x00	; 0
    22c2:	30 e0       	ldi	r19, 0x00	; 0
    22c4:	40 e8       	ldi	r20, 0x80	; 128
    22c6:	5f e3       	ldi	r21, 0x3F	; 63
    22c8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    22cc:	88 23       	and	r24, r24
    22ce:	2c f4       	brge	.+10     	; 0x22da <LCD_displayCharacter+0x160>
		__ticks = 1;
    22d0:	81 e0       	ldi	r24, 0x01	; 1
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	9a a3       	std	Y+34, r25	; 0x22
    22d6:	89 a3       	std	Y+33, r24	; 0x21
    22d8:	3f c0       	rjmp	.+126    	; 0x2358 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    22da:	6b a1       	ldd	r22, Y+35	; 0x23
    22dc:	7c a1       	ldd	r23, Y+36	; 0x24
    22de:	8d a1       	ldd	r24, Y+37	; 0x25
    22e0:	9e a1       	ldd	r25, Y+38	; 0x26
    22e2:	20 e0       	ldi	r18, 0x00	; 0
    22e4:	3f ef       	ldi	r19, 0xFF	; 255
    22e6:	4f e7       	ldi	r20, 0x7F	; 127
    22e8:	57 e4       	ldi	r21, 0x47	; 71
    22ea:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    22ee:	18 16       	cp	r1, r24
    22f0:	4c f5       	brge	.+82     	; 0x2344 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22f2:	6f a1       	ldd	r22, Y+39	; 0x27
    22f4:	78 a5       	ldd	r23, Y+40	; 0x28
    22f6:	89 a5       	ldd	r24, Y+41	; 0x29
    22f8:	9a a5       	ldd	r25, Y+42	; 0x2a
    22fa:	20 e0       	ldi	r18, 0x00	; 0
    22fc:	30 e0       	ldi	r19, 0x00	; 0
    22fe:	40 e2       	ldi	r20, 0x20	; 32
    2300:	51 e4       	ldi	r21, 0x41	; 65
    2302:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2306:	dc 01       	movw	r26, r24
    2308:	cb 01       	movw	r24, r22
    230a:	bc 01       	movw	r22, r24
    230c:	cd 01       	movw	r24, r26
    230e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2312:	dc 01       	movw	r26, r24
    2314:	cb 01       	movw	r24, r22
    2316:	9a a3       	std	Y+34, r25	; 0x22
    2318:	89 a3       	std	Y+33, r24	; 0x21
    231a:	0f c0       	rjmp	.+30     	; 0x233a <LCD_displayCharacter+0x1c0>
    231c:	88 ec       	ldi	r24, 0xC8	; 200
    231e:	90 e0       	ldi	r25, 0x00	; 0
    2320:	98 a3       	std	Y+32, r25	; 0x20
    2322:	8f 8f       	std	Y+31, r24	; 0x1f
    2324:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2326:	98 a1       	ldd	r25, Y+32	; 0x20
    2328:	01 97       	sbiw	r24, 0x01	; 1
    232a:	f1 f7       	brne	.-4      	; 0x2328 <LCD_displayCharacter+0x1ae>
    232c:	98 a3       	std	Y+32, r25	; 0x20
    232e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2330:	89 a1       	ldd	r24, Y+33	; 0x21
    2332:	9a a1       	ldd	r25, Y+34	; 0x22
    2334:	01 97       	sbiw	r24, 0x01	; 1
    2336:	9a a3       	std	Y+34, r25	; 0x22
    2338:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    233a:	89 a1       	ldd	r24, Y+33	; 0x21
    233c:	9a a1       	ldd	r25, Y+34	; 0x22
    233e:	00 97       	sbiw	r24, 0x00	; 0
    2340:	69 f7       	brne	.-38     	; 0x231c <LCD_displayCharacter+0x1a2>
    2342:	14 c0       	rjmp	.+40     	; 0x236c <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2344:	6b a1       	ldd	r22, Y+35	; 0x23
    2346:	7c a1       	ldd	r23, Y+36	; 0x24
    2348:	8d a1       	ldd	r24, Y+37	; 0x25
    234a:	9e a1       	ldd	r25, Y+38	; 0x26
    234c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2350:	dc 01       	movw	r26, r24
    2352:	cb 01       	movw	r24, r22
    2354:	9a a3       	std	Y+34, r25	; 0x22
    2356:	89 a3       	std	Y+33, r24	; 0x21
    2358:	89 a1       	ldd	r24, Y+33	; 0x21
    235a:	9a a1       	ldd	r25, Y+34	; 0x22
    235c:	9e 8f       	std	Y+30, r25	; 0x1e
    235e:	8d 8f       	std	Y+29, r24	; 0x1d
    2360:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2362:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2364:	01 97       	sbiw	r24, 0x01	; 1
    2366:	f1 f7       	brne	.-4      	; 0x2364 <LCD_displayCharacter+0x1ea>
    2368:	9e 8f       	std	Y+30, r25	; 0x1e
    236a:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    236c:	80 e0       	ldi	r24, 0x00	; 0
    236e:	69 ad       	ldd	r22, Y+57	; 0x39
    2370:	0e 94 15 0c 	call	0x182a	; 0x182a <GPIO_writePort>
    2374:	80 e0       	ldi	r24, 0x00	; 0
    2376:	90 e0       	ldi	r25, 0x00	; 0
    2378:	a0 e8       	ldi	r26, 0x80	; 128
    237a:	bf e3       	ldi	r27, 0x3F	; 63
    237c:	89 8f       	std	Y+25, r24	; 0x19
    237e:	9a 8f       	std	Y+26, r25	; 0x1a
    2380:	ab 8f       	std	Y+27, r26	; 0x1b
    2382:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2384:	69 8d       	ldd	r22, Y+25	; 0x19
    2386:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2388:	8b 8d       	ldd	r24, Y+27	; 0x1b
    238a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	4a ef       	ldi	r20, 0xFA	; 250
    2392:	54 e4       	ldi	r21, 0x44	; 68
    2394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	8d 8b       	std	Y+21, r24	; 0x15
    239e:	9e 8b       	std	Y+22, r25	; 0x16
    23a0:	af 8b       	std	Y+23, r26	; 0x17
    23a2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    23a4:	6d 89       	ldd	r22, Y+21	; 0x15
    23a6:	7e 89       	ldd	r23, Y+22	; 0x16
    23a8:	8f 89       	ldd	r24, Y+23	; 0x17
    23aa:	98 8d       	ldd	r25, Y+24	; 0x18
    23ac:	20 e0       	ldi	r18, 0x00	; 0
    23ae:	30 e0       	ldi	r19, 0x00	; 0
    23b0:	40 e8       	ldi	r20, 0x80	; 128
    23b2:	5f e3       	ldi	r21, 0x3F	; 63
    23b4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23b8:	88 23       	and	r24, r24
    23ba:	2c f4       	brge	.+10     	; 0x23c6 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    23bc:	81 e0       	ldi	r24, 0x01	; 1
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	9c 8b       	std	Y+20, r25	; 0x14
    23c2:	8b 8b       	std	Y+19, r24	; 0x13
    23c4:	3f c0       	rjmp	.+126    	; 0x2444 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    23c6:	6d 89       	ldd	r22, Y+21	; 0x15
    23c8:	7e 89       	ldd	r23, Y+22	; 0x16
    23ca:	8f 89       	ldd	r24, Y+23	; 0x17
    23cc:	98 8d       	ldd	r25, Y+24	; 0x18
    23ce:	20 e0       	ldi	r18, 0x00	; 0
    23d0:	3f ef       	ldi	r19, 0xFF	; 255
    23d2:	4f e7       	ldi	r20, 0x7F	; 127
    23d4:	57 e4       	ldi	r21, 0x47	; 71
    23d6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23da:	18 16       	cp	r1, r24
    23dc:	4c f5       	brge	.+82     	; 0x2430 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23de:	69 8d       	ldd	r22, Y+25	; 0x19
    23e0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23e2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    23e4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    23e6:	20 e0       	ldi	r18, 0x00	; 0
    23e8:	30 e0       	ldi	r19, 0x00	; 0
    23ea:	40 e2       	ldi	r20, 0x20	; 32
    23ec:	51 e4       	ldi	r21, 0x41	; 65
    23ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f2:	dc 01       	movw	r26, r24
    23f4:	cb 01       	movw	r24, r22
    23f6:	bc 01       	movw	r22, r24
    23f8:	cd 01       	movw	r24, r26
    23fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fe:	dc 01       	movw	r26, r24
    2400:	cb 01       	movw	r24, r22
    2402:	9c 8b       	std	Y+20, r25	; 0x14
    2404:	8b 8b       	std	Y+19, r24	; 0x13
    2406:	0f c0       	rjmp	.+30     	; 0x2426 <LCD_displayCharacter+0x2ac>
    2408:	88 ec       	ldi	r24, 0xC8	; 200
    240a:	90 e0       	ldi	r25, 0x00	; 0
    240c:	9a 8b       	std	Y+18, r25	; 0x12
    240e:	89 8b       	std	Y+17, r24	; 0x11
    2410:	89 89       	ldd	r24, Y+17	; 0x11
    2412:	9a 89       	ldd	r25, Y+18	; 0x12
    2414:	01 97       	sbiw	r24, 0x01	; 1
    2416:	f1 f7       	brne	.-4      	; 0x2414 <LCD_displayCharacter+0x29a>
    2418:	9a 8b       	std	Y+18, r25	; 0x12
    241a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241c:	8b 89       	ldd	r24, Y+19	; 0x13
    241e:	9c 89       	ldd	r25, Y+20	; 0x14
    2420:	01 97       	sbiw	r24, 0x01	; 1
    2422:	9c 8b       	std	Y+20, r25	; 0x14
    2424:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2426:	8b 89       	ldd	r24, Y+19	; 0x13
    2428:	9c 89       	ldd	r25, Y+20	; 0x14
    242a:	00 97       	sbiw	r24, 0x00	; 0
    242c:	69 f7       	brne	.-38     	; 0x2408 <LCD_displayCharacter+0x28e>
    242e:	14 c0       	rjmp	.+40     	; 0x2458 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2430:	6d 89       	ldd	r22, Y+21	; 0x15
    2432:	7e 89       	ldd	r23, Y+22	; 0x16
    2434:	8f 89       	ldd	r24, Y+23	; 0x17
    2436:	98 8d       	ldd	r25, Y+24	; 0x18
    2438:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243c:	dc 01       	movw	r26, r24
    243e:	cb 01       	movw	r24, r22
    2440:	9c 8b       	std	Y+20, r25	; 0x14
    2442:	8b 8b       	std	Y+19, r24	; 0x13
    2444:	8b 89       	ldd	r24, Y+19	; 0x13
    2446:	9c 89       	ldd	r25, Y+20	; 0x14
    2448:	98 8b       	std	Y+16, r25	; 0x10
    244a:	8f 87       	std	Y+15, r24	; 0x0f
    244c:	8f 85       	ldd	r24, Y+15	; 0x0f
    244e:	98 89       	ldd	r25, Y+16	; 0x10
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <LCD_displayCharacter+0x2d6>
    2454:	98 8b       	std	Y+16, r25	; 0x10
    2456:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2458:	81 e0       	ldi	r24, 0x01	; 1
    245a:	61 e0       	ldi	r22, 0x01	; 1
    245c:	40 e0       	ldi	r20, 0x00	; 0
    245e:	0e 94 4b 0a 	call	0x1496	; 0x1496 <GPIO_writePin>
    2462:	80 e0       	ldi	r24, 0x00	; 0
    2464:	90 e0       	ldi	r25, 0x00	; 0
    2466:	a0 e8       	ldi	r26, 0x80	; 128
    2468:	bf e3       	ldi	r27, 0x3F	; 63
    246a:	8b 87       	std	Y+11, r24	; 0x0b
    246c:	9c 87       	std	Y+12, r25	; 0x0c
    246e:	ad 87       	std	Y+13, r26	; 0x0d
    2470:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2472:	6b 85       	ldd	r22, Y+11	; 0x0b
    2474:	7c 85       	ldd	r23, Y+12	; 0x0c
    2476:	8d 85       	ldd	r24, Y+13	; 0x0d
    2478:	9e 85       	ldd	r25, Y+14	; 0x0e
    247a:	20 e0       	ldi	r18, 0x00	; 0
    247c:	30 e0       	ldi	r19, 0x00	; 0
    247e:	4a ef       	ldi	r20, 0xFA	; 250
    2480:	54 e4       	ldi	r21, 0x44	; 68
    2482:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	8f 83       	std	Y+7, r24	; 0x07
    248c:	98 87       	std	Y+8, r25	; 0x08
    248e:	a9 87       	std	Y+9, r26	; 0x09
    2490:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2492:	6f 81       	ldd	r22, Y+7	; 0x07
    2494:	78 85       	ldd	r23, Y+8	; 0x08
    2496:	89 85       	ldd	r24, Y+9	; 0x09
    2498:	9a 85       	ldd	r25, Y+10	; 0x0a
    249a:	20 e0       	ldi	r18, 0x00	; 0
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	40 e8       	ldi	r20, 0x80	; 128
    24a0:	5f e3       	ldi	r21, 0x3F	; 63
    24a2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24a6:	88 23       	and	r24, r24
    24a8:	2c f4       	brge	.+10     	; 0x24b4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    24aa:	81 e0       	ldi	r24, 0x01	; 1
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	9e 83       	std	Y+6, r25	; 0x06
    24b0:	8d 83       	std	Y+5, r24	; 0x05
    24b2:	3f c0       	rjmp	.+126    	; 0x2532 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    24b4:	6f 81       	ldd	r22, Y+7	; 0x07
    24b6:	78 85       	ldd	r23, Y+8	; 0x08
    24b8:	89 85       	ldd	r24, Y+9	; 0x09
    24ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    24bc:	20 e0       	ldi	r18, 0x00	; 0
    24be:	3f ef       	ldi	r19, 0xFF	; 255
    24c0:	4f e7       	ldi	r20, 0x7F	; 127
    24c2:	57 e4       	ldi	r21, 0x47	; 71
    24c4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24c8:	18 16       	cp	r1, r24
    24ca:	4c f5       	brge	.+82     	; 0x251e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    24ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    24d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    24d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    24d4:	20 e0       	ldi	r18, 0x00	; 0
    24d6:	30 e0       	ldi	r19, 0x00	; 0
    24d8:	40 e2       	ldi	r20, 0x20	; 32
    24da:	51 e4       	ldi	r21, 0x41	; 65
    24dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24e0:	dc 01       	movw	r26, r24
    24e2:	cb 01       	movw	r24, r22
    24e4:	bc 01       	movw	r22, r24
    24e6:	cd 01       	movw	r24, r26
    24e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24ec:	dc 01       	movw	r26, r24
    24ee:	cb 01       	movw	r24, r22
    24f0:	9e 83       	std	Y+6, r25	; 0x06
    24f2:	8d 83       	std	Y+5, r24	; 0x05
    24f4:	0f c0       	rjmp	.+30     	; 0x2514 <LCD_displayCharacter+0x39a>
    24f6:	88 ec       	ldi	r24, 0xC8	; 200
    24f8:	90 e0       	ldi	r25, 0x00	; 0
    24fa:	9c 83       	std	Y+4, r25	; 0x04
    24fc:	8b 83       	std	Y+3, r24	; 0x03
    24fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2500:	9c 81       	ldd	r25, Y+4	; 0x04
    2502:	01 97       	sbiw	r24, 0x01	; 1
    2504:	f1 f7       	brne	.-4      	; 0x2502 <LCD_displayCharacter+0x388>
    2506:	9c 83       	std	Y+4, r25	; 0x04
    2508:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    250a:	8d 81       	ldd	r24, Y+5	; 0x05
    250c:	9e 81       	ldd	r25, Y+6	; 0x06
    250e:	01 97       	sbiw	r24, 0x01	; 1
    2510:	9e 83       	std	Y+6, r25	; 0x06
    2512:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2514:	8d 81       	ldd	r24, Y+5	; 0x05
    2516:	9e 81       	ldd	r25, Y+6	; 0x06
    2518:	00 97       	sbiw	r24, 0x00	; 0
    251a:	69 f7       	brne	.-38     	; 0x24f6 <LCD_displayCharacter+0x37c>
    251c:	14 c0       	rjmp	.+40     	; 0x2546 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    251e:	6f 81       	ldd	r22, Y+7	; 0x07
    2520:	78 85       	ldd	r23, Y+8	; 0x08
    2522:	89 85       	ldd	r24, Y+9	; 0x09
    2524:	9a 85       	ldd	r25, Y+10	; 0x0a
    2526:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    252a:	dc 01       	movw	r26, r24
    252c:	cb 01       	movw	r24, r22
    252e:	9e 83       	std	Y+6, r25	; 0x06
    2530:	8d 83       	std	Y+5, r24	; 0x05
    2532:	8d 81       	ldd	r24, Y+5	; 0x05
    2534:	9e 81       	ldd	r25, Y+6	; 0x06
    2536:	9a 83       	std	Y+2, r25	; 0x02
    2538:	89 83       	std	Y+1, r24	; 0x01
    253a:	89 81       	ldd	r24, Y+1	; 0x01
    253c:	9a 81       	ldd	r25, Y+2	; 0x02
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <LCD_displayCharacter+0x3c4>
    2542:	9a 83       	std	Y+2, r25	; 0x02
    2544:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2546:	e9 96       	adiw	r28, 0x39	; 57
    2548:	0f b6       	in	r0, 0x3f	; 63
    254a:	f8 94       	cli
    254c:	de bf       	out	0x3e, r29	; 62
    254e:	0f be       	out	0x3f, r0	; 63
    2550:	cd bf       	out	0x3d, r28	; 61
    2552:	cf 91       	pop	r28
    2554:	df 91       	pop	r29
    2556:	08 95       	ret

00002558 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2558:	df 93       	push	r29
    255a:	cf 93       	push	r28
    255c:	00 d0       	rcall	.+0      	; 0x255e <LCD_displayString+0x6>
    255e:	0f 92       	push	r0
    2560:	cd b7       	in	r28, 0x3d	; 61
    2562:	de b7       	in	r29, 0x3e	; 62
    2564:	9b 83       	std	Y+3, r25	; 0x03
    2566:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2568:	19 82       	std	Y+1, r1	; 0x01
    256a:	0e c0       	rjmp	.+28     	; 0x2588 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    256c:	89 81       	ldd	r24, Y+1	; 0x01
    256e:	28 2f       	mov	r18, r24
    2570:	30 e0       	ldi	r19, 0x00	; 0
    2572:	8a 81       	ldd	r24, Y+2	; 0x02
    2574:	9b 81       	ldd	r25, Y+3	; 0x03
    2576:	fc 01       	movw	r30, r24
    2578:	e2 0f       	add	r30, r18
    257a:	f3 1f       	adc	r31, r19
    257c:	80 81       	ld	r24, Z
    257e:	0e 94 bd 10 	call	0x217a	; 0x217a <LCD_displayCharacter>
		i++;
    2582:	89 81       	ldd	r24, Y+1	; 0x01
    2584:	8f 5f       	subi	r24, 0xFF	; 255
    2586:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2588:	89 81       	ldd	r24, Y+1	; 0x01
    258a:	28 2f       	mov	r18, r24
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	8a 81       	ldd	r24, Y+2	; 0x02
    2590:	9b 81       	ldd	r25, Y+3	; 0x03
    2592:	fc 01       	movw	r30, r24
    2594:	e2 0f       	add	r30, r18
    2596:	f3 1f       	adc	r31, r19
    2598:	80 81       	ld	r24, Z
    259a:	88 23       	and	r24, r24
    259c:	39 f7       	brne	.-50     	; 0x256c <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    259e:	0f 90       	pop	r0
    25a0:	0f 90       	pop	r0
    25a2:	0f 90       	pop	r0
    25a4:	cf 91       	pop	r28
    25a6:	df 91       	pop	r29
    25a8:	08 95       	ret

000025aa <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    25aa:	df 93       	push	r29
    25ac:	cf 93       	push	r28
    25ae:	00 d0       	rcall	.+0      	; 0x25b0 <LCD_moveCursor+0x6>
    25b0:	00 d0       	rcall	.+0      	; 0x25b2 <LCD_moveCursor+0x8>
    25b2:	0f 92       	push	r0
    25b4:	cd b7       	in	r28, 0x3d	; 61
    25b6:	de b7       	in	r29, 0x3e	; 62
    25b8:	8a 83       	std	Y+2, r24	; 0x02
    25ba:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    25bc:	8a 81       	ldd	r24, Y+2	; 0x02
    25be:	28 2f       	mov	r18, r24
    25c0:	30 e0       	ldi	r19, 0x00	; 0
    25c2:	3d 83       	std	Y+5, r19	; 0x05
    25c4:	2c 83       	std	Y+4, r18	; 0x04
    25c6:	8c 81       	ldd	r24, Y+4	; 0x04
    25c8:	9d 81       	ldd	r25, Y+5	; 0x05
    25ca:	81 30       	cpi	r24, 0x01	; 1
    25cc:	91 05       	cpc	r25, r1
    25ce:	c1 f0       	breq	.+48     	; 0x2600 <LCD_moveCursor+0x56>
    25d0:	2c 81       	ldd	r18, Y+4	; 0x04
    25d2:	3d 81       	ldd	r19, Y+5	; 0x05
    25d4:	22 30       	cpi	r18, 0x02	; 2
    25d6:	31 05       	cpc	r19, r1
    25d8:	2c f4       	brge	.+10     	; 0x25e4 <LCD_moveCursor+0x3a>
    25da:	8c 81       	ldd	r24, Y+4	; 0x04
    25dc:	9d 81       	ldd	r25, Y+5	; 0x05
    25de:	00 97       	sbiw	r24, 0x00	; 0
    25e0:	61 f0       	breq	.+24     	; 0x25fa <LCD_moveCursor+0x50>
    25e2:	19 c0       	rjmp	.+50     	; 0x2616 <LCD_moveCursor+0x6c>
    25e4:	2c 81       	ldd	r18, Y+4	; 0x04
    25e6:	3d 81       	ldd	r19, Y+5	; 0x05
    25e8:	22 30       	cpi	r18, 0x02	; 2
    25ea:	31 05       	cpc	r19, r1
    25ec:	69 f0       	breq	.+26     	; 0x2608 <LCD_moveCursor+0x5e>
    25ee:	8c 81       	ldd	r24, Y+4	; 0x04
    25f0:	9d 81       	ldd	r25, Y+5	; 0x05
    25f2:	83 30       	cpi	r24, 0x03	; 3
    25f4:	91 05       	cpc	r25, r1
    25f6:	61 f0       	breq	.+24     	; 0x2610 <LCD_moveCursor+0x66>
    25f8:	0e c0       	rjmp	.+28     	; 0x2616 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    25fa:	8b 81       	ldd	r24, Y+3	; 0x03
    25fc:	89 83       	std	Y+1, r24	; 0x01
    25fe:	0b c0       	rjmp	.+22     	; 0x2616 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2600:	8b 81       	ldd	r24, Y+3	; 0x03
    2602:	80 5c       	subi	r24, 0xC0	; 192
    2604:	89 83       	std	Y+1, r24	; 0x01
    2606:	07 c0       	rjmp	.+14     	; 0x2616 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	80 5f       	subi	r24, 0xF0	; 240
    260c:	89 83       	std	Y+1, r24	; 0x01
    260e:	03 c0       	rjmp	.+6      	; 0x2616 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2610:	8b 81       	ldd	r24, Y+3	; 0x03
    2612:	80 5b       	subi	r24, 0xB0	; 176
    2614:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2616:	89 81       	ldd	r24, Y+1	; 0x01
    2618:	80 68       	ori	r24, 0x80	; 128
    261a:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_sendCommand>
}
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	0f 90       	pop	r0
    2628:	cf 91       	pop	r28
    262a:	df 91       	pop	r29
    262c:	08 95       	ret

0000262e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    262e:	df 93       	push	r29
    2630:	cf 93       	push	r28
    2632:	00 d0       	rcall	.+0      	; 0x2634 <LCD_displayStringRowColumn+0x6>
    2634:	00 d0       	rcall	.+0      	; 0x2636 <LCD_displayStringRowColumn+0x8>
    2636:	cd b7       	in	r28, 0x3d	; 61
    2638:	de b7       	in	r29, 0x3e	; 62
    263a:	89 83       	std	Y+1, r24	; 0x01
    263c:	6a 83       	std	Y+2, r22	; 0x02
    263e:	5c 83       	std	Y+4, r21	; 0x04
    2640:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2642:	89 81       	ldd	r24, Y+1	; 0x01
    2644:	6a 81       	ldd	r22, Y+2	; 0x02
    2646:	0e 94 d5 12 	call	0x25aa	; 0x25aa <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    264a:	8b 81       	ldd	r24, Y+3	; 0x03
    264c:	9c 81       	ldd	r25, Y+4	; 0x04
    264e:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
}
    2652:	0f 90       	pop	r0
    2654:	0f 90       	pop	r0
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	cf 91       	pop	r28
    265c:	df 91       	pop	r29
    265e:	08 95       	ret

00002660 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2660:	df 93       	push	r29
    2662:	cf 93       	push	r28
    2664:	cd b7       	in	r28, 0x3d	; 61
    2666:	de b7       	in	r29, 0x3e	; 62
    2668:	62 97       	sbiw	r28, 0x12	; 18
    266a:	0f b6       	in	r0, 0x3f	; 63
    266c:	f8 94       	cli
    266e:	de bf       	out	0x3e, r29	; 62
    2670:	0f be       	out	0x3f, r0	; 63
    2672:	cd bf       	out	0x3d, r28	; 61
    2674:	9a 8b       	std	Y+18, r25	; 0x12
    2676:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2678:	89 89       	ldd	r24, Y+17	; 0x11
    267a:	9a 89       	ldd	r25, Y+18	; 0x12
    267c:	9e 01       	movw	r18, r28
    267e:	2f 5f       	subi	r18, 0xFF	; 255
    2680:	3f 4f       	sbci	r19, 0xFF	; 255
    2682:	b9 01       	movw	r22, r18
    2684:	4a e0       	ldi	r20, 0x0A	; 10
    2686:	50 e0       	ldi	r21, 0x00	; 0
    2688:	0e 94 e8 15 	call	0x2bd0	; 0x2bd0 <itoa>
   LCD_displayString(buff); /* Display the string */
    268c:	ce 01       	movw	r24, r28
    268e:	01 96       	adiw	r24, 0x01	; 1
    2690:	0e 94 ac 12 	call	0x2558	; 0x2558 <LCD_displayString>
}
    2694:	62 96       	adiw	r28, 0x12	; 18
    2696:	0f b6       	in	r0, 0x3f	; 63
    2698:	f8 94       	cli
    269a:	de bf       	out	0x3e, r29	; 62
    269c:	0f be       	out	0x3f, r0	; 63
    269e:	cd bf       	out	0x3d, r28	; 61
    26a0:	cf 91       	pop	r28
    26a2:	df 91       	pop	r29
    26a4:	08 95       	ret

000026a6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    26a6:	df 93       	push	r29
    26a8:	cf 93       	push	r28
    26aa:	cd b7       	in	r28, 0x3d	; 61
    26ac:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    26ae:	81 e0       	ldi	r24, 0x01	; 1
    26b0:	0e 94 ce 0e 	call	0x1d9c	; 0x1d9c <LCD_sendCommand>
}
    26b4:	cf 91       	pop	r28
    26b6:	df 91       	pop	r29
    26b8:	08 95       	ret

000026ba <__vector_9>:


static volatile void (*g_CallBackPtr)(void) = NULL_PTR;	//global pointer to function to be used for the cb


ISR(TIMER1_OVF_vect){
    26ba:	1f 92       	push	r1
    26bc:	0f 92       	push	r0
    26be:	0f b6       	in	r0, 0x3f	; 63
    26c0:	0f 92       	push	r0
    26c2:	11 24       	eor	r1, r1
    26c4:	2f 93       	push	r18
    26c6:	3f 93       	push	r19
    26c8:	4f 93       	push	r20
    26ca:	5f 93       	push	r21
    26cc:	6f 93       	push	r22
    26ce:	7f 93       	push	r23
    26d0:	8f 93       	push	r24
    26d2:	9f 93       	push	r25
    26d4:	af 93       	push	r26
    26d6:	bf 93       	push	r27
    26d8:	ef 93       	push	r30
    26da:	ff 93       	push	r31
    26dc:	df 93       	push	r29
    26de:	cf 93       	push	r28
    26e0:	cd b7       	in	r28, 0x3d	; 61
    26e2:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr();
    26e4:	e0 91 79 01 	lds	r30, 0x0179
    26e8:	f0 91 7a 01 	lds	r31, 0x017A
    26ec:	09 95       	icall
}
    26ee:	cf 91       	pop	r28
    26f0:	df 91       	pop	r29
    26f2:	ff 91       	pop	r31
    26f4:	ef 91       	pop	r30
    26f6:	bf 91       	pop	r27
    26f8:	af 91       	pop	r26
    26fa:	9f 91       	pop	r25
    26fc:	8f 91       	pop	r24
    26fe:	7f 91       	pop	r23
    2700:	6f 91       	pop	r22
    2702:	5f 91       	pop	r21
    2704:	4f 91       	pop	r20
    2706:	3f 91       	pop	r19
    2708:	2f 91       	pop	r18
    270a:	0f 90       	pop	r0
    270c:	0f be       	out	0x3f, r0	; 63
    270e:	0f 90       	pop	r0
    2710:	1f 90       	pop	r1
    2712:	18 95       	reti

00002714 <__vector_7>:

ISR(TIMER1_COMPA_vect){
    2714:	1f 92       	push	r1
    2716:	0f 92       	push	r0
    2718:	0f b6       	in	r0, 0x3f	; 63
    271a:	0f 92       	push	r0
    271c:	11 24       	eor	r1, r1
    271e:	2f 93       	push	r18
    2720:	3f 93       	push	r19
    2722:	4f 93       	push	r20
    2724:	5f 93       	push	r21
    2726:	6f 93       	push	r22
    2728:	7f 93       	push	r23
    272a:	8f 93       	push	r24
    272c:	9f 93       	push	r25
    272e:	af 93       	push	r26
    2730:	bf 93       	push	r27
    2732:	ef 93       	push	r30
    2734:	ff 93       	push	r31
    2736:	df 93       	push	r29
    2738:	cf 93       	push	r28
    273a:	cd b7       	in	r28, 0x3d	; 61
    273c:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr();
    273e:	e0 91 79 01 	lds	r30, 0x0179
    2742:	f0 91 7a 01 	lds	r31, 0x017A
    2746:	09 95       	icall
}
    2748:	cf 91       	pop	r28
    274a:	df 91       	pop	r29
    274c:	ff 91       	pop	r31
    274e:	ef 91       	pop	r30
    2750:	bf 91       	pop	r27
    2752:	af 91       	pop	r26
    2754:	9f 91       	pop	r25
    2756:	8f 91       	pop	r24
    2758:	7f 91       	pop	r23
    275a:	6f 91       	pop	r22
    275c:	5f 91       	pop	r21
    275e:	4f 91       	pop	r20
    2760:	3f 91       	pop	r19
    2762:	2f 91       	pop	r18
    2764:	0f 90       	pop	r0
    2766:	0f be       	out	0x3f, r0	; 63
    2768:	0f 90       	pop	r0
    276a:	1f 90       	pop	r1
    276c:	18 95       	reti

0000276e <Timer_1_init>:


void Timer_1_init(const Timer1_ConfigType * Config_Ptr){
    276e:	df 93       	push	r29
    2770:	cf 93       	push	r28
    2772:	00 d0       	rcall	.+0      	; 0x2774 <Timer_1_init+0x6>
    2774:	cd b7       	in	r28, 0x3d	; 61
    2776:	de b7       	in	r29, 0x3e	; 62
    2778:	9a 83       	std	Y+2, r25	; 0x02
    277a:	89 83       	std	Y+1, r24	; 0x01

	//in normal mode WGM10 WGM11 WGM12 WGM13 are all 0 so we can set them all to 0 by default
	CLEAR_BIT(TCCR1A,WGM10);
    277c:	af e4       	ldi	r26, 0x4F	; 79
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	ef e4       	ldi	r30, 0x4F	; 79
    2782:	f0 e0       	ldi	r31, 0x00	; 0
    2784:	80 81       	ld	r24, Z
    2786:	8e 7f       	andi	r24, 0xFE	; 254
    2788:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    278a:	af e4       	ldi	r26, 0x4F	; 79
    278c:	b0 e0       	ldi	r27, 0x00	; 0
    278e:	ef e4       	ldi	r30, 0x4F	; 79
    2790:	f0 e0       	ldi	r31, 0x00	; 0
    2792:	80 81       	ld	r24, Z
    2794:	8d 7f       	andi	r24, 0xFD	; 253
    2796:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    2798:	ae e4       	ldi	r26, 0x4E	; 78
    279a:	b0 e0       	ldi	r27, 0x00	; 0
    279c:	ee e4       	ldi	r30, 0x4E	; 78
    279e:	f0 e0       	ldi	r31, 0x00	; 0
    27a0:	80 81       	ld	r24, Z
    27a2:	87 7f       	andi	r24, 0xF7	; 247
    27a4:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    27a6:	ae e4       	ldi	r26, 0x4E	; 78
    27a8:	b0 e0       	ldi	r27, 0x00	; 0
    27aa:	ee e4       	ldi	r30, 0x4E	; 78
    27ac:	f0 e0       	ldi	r31, 0x00	; 0
    27ae:	80 81       	ld	r24, Z
    27b0:	8f 7e       	andi	r24, 0xEF	; 239
    27b2:	8c 93       	st	X, r24


	if(Config_Ptr->mode == CTC_OCR){
    27b4:	e9 81       	ldd	r30, Y+1	; 0x01
    27b6:	fa 81       	ldd	r31, Y+2	; 0x02
    27b8:	85 81       	ldd	r24, Z+5	; 0x05
    27ba:	84 30       	cpi	r24, 0x04	; 4
    27bc:	c1 f4       	brne	.+48     	; 0x27ee <Timer_1_init+0x80>

		//in CTC mode only WGM12 is 1
		SET_BIT(TCCR1B,WGM12);
    27be:	ae e4       	ldi	r26, 0x4E	; 78
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	ee e4       	ldi	r30, 0x4E	; 78
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	88 60       	ori	r24, 0x08	; 8
    27ca:	8c 93       	st	X, r24

		//assign the compare value to OCR1A
		OCR1A = Config_Ptr->compare_value;
    27cc:	aa e4       	ldi	r26, 0x4A	; 74
    27ce:	b0 e0       	ldi	r27, 0x00	; 0
    27d0:	e9 81       	ldd	r30, Y+1	; 0x01
    27d2:	fa 81       	ldd	r31, Y+2	; 0x02
    27d4:	82 81       	ldd	r24, Z+2	; 0x02
    27d6:	93 81       	ldd	r25, Z+3	; 0x03
    27d8:	11 96       	adiw	r26, 0x01	; 1
    27da:	9c 93       	st	X, r25
    27dc:	8e 93       	st	-X, r24

		//enable interrupt for OCIE1A
		SET_BIT(TIMSK,OCIE1A);
    27de:	a9 e5       	ldi	r26, 0x59	; 89
    27e0:	b0 e0       	ldi	r27, 0x00	; 0
    27e2:	e9 e5       	ldi	r30, 0x59	; 89
    27e4:	f0 e0       	ldi	r31, 0x00	; 0
    27e6:	80 81       	ld	r24, Z
    27e8:	80 61       	ori	r24, 0x10	; 16
    27ea:	8c 93       	st	X, r24
    27ec:	0c c0       	rjmp	.+24     	; 0x2806 <Timer_1_init+0x98>

	}else if(Config_Ptr->mode == NORMAL){
    27ee:	e9 81       	ldd	r30, Y+1	; 0x01
    27f0:	fa 81       	ldd	r31, Y+2	; 0x02
    27f2:	85 81       	ldd	r24, Z+5	; 0x05
    27f4:	88 23       	and	r24, r24
    27f6:	39 f4       	brne	.+14     	; 0x2806 <Timer_1_init+0x98>

		//enable interrupt for TOIE1
		SET_BIT(TIMSK,TOIE1);
    27f8:	a9 e5       	ldi	r26, 0x59	; 89
    27fa:	b0 e0       	ldi	r27, 0x00	; 0
    27fc:	e9 e5       	ldi	r30, 0x59	; 89
    27fe:	f0 e0       	ldi	r31, 0x00	; 0
    2800:	80 81       	ld	r24, Z
    2802:	84 60       	ori	r24, 0x04	; 4
    2804:	8c 93       	st	X, r24

	}

	//only active when using non-PWM mode
	SET_BIT(TCCR1A,FOC1A);
    2806:	af e4       	ldi	r26, 0x4F	; 79
    2808:	b0 e0       	ldi	r27, 0x00	; 0
    280a:	ef e4       	ldi	r30, 0x4F	; 79
    280c:	f0 e0       	ldi	r31, 0x00	; 0
    280e:	80 81       	ld	r24, Z
    2810:	88 60       	ori	r24, 0x08	; 8
    2812:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    2814:	af e4       	ldi	r26, 0x4F	; 79
    2816:	b0 e0       	ldi	r27, 0x00	; 0
    2818:	ef e4       	ldi	r30, 0x4F	; 79
    281a:	f0 e0       	ldi	r31, 0x00	; 0
    281c:	80 81       	ld	r24, Z
    281e:	84 60       	ori	r24, 0x04	; 4
    2820:	8c 93       	st	X, r24

	//assign initial value
	TCNT1 = Config_Ptr->initial_value;
    2822:	ac e4       	ldi	r26, 0x4C	; 76
    2824:	b0 e0       	ldi	r27, 0x00	; 0
    2826:	e9 81       	ldd	r30, Y+1	; 0x01
    2828:	fa 81       	ldd	r31, Y+2	; 0x02
    282a:	80 81       	ld	r24, Z
    282c:	91 81       	ldd	r25, Z+1	; 0x01
    282e:	11 96       	adiw	r26, 0x01	; 1
    2830:	9c 93       	st	X, r25
    2832:	8e 93       	st	-X, r24


//	TCCR1B 0 to 2 clock select
//	clock bits are 0 1 2    0000 0111 = f7
//							1111 1000 = ~f7
	TCCR1B = (TCCR1B & ~0xf7) | ( ( (Config_Ptr->prescaler) <<0) & 0xf7 );
    2834:	ae e4       	ldi	r26, 0x4E	; 78
    2836:	b0 e0       	ldi	r27, 0x00	; 0
    2838:	ee e4       	ldi	r30, 0x4E	; 78
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	80 81       	ld	r24, Z
    283e:	98 2f       	mov	r25, r24
    2840:	98 70       	andi	r25, 0x08	; 8
    2842:	e9 81       	ldd	r30, Y+1	; 0x01
    2844:	fa 81       	ldd	r31, Y+2	; 0x02
    2846:	84 81       	ldd	r24, Z+4	; 0x04
    2848:	87 7f       	andi	r24, 0xF7	; 247
    284a:	89 2b       	or	r24, r25
    284c:	8c 93       	st	X, r24


}
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <Timer_1_deInit>:




void Timer_1_deInit(void){
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	cd b7       	in	r28, 0x3d	; 61
    285e:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr = NULL_PTR;
    2860:	10 92 7a 01 	sts	0x017A, r1
    2864:	10 92 79 01 	sts	0x0179, r1
	TCCR1A = 0;
    2868:	ef e4       	ldi	r30, 0x4F	; 79
    286a:	f0 e0       	ldi	r31, 0x00	; 0
    286c:	10 82       	st	Z, r1
	TCCR1B = 0;
    286e:	ee e4       	ldi	r30, 0x4E	; 78
    2870:	f0 e0       	ldi	r31, 0x00	; 0
    2872:	10 82       	st	Z, r1
	TCNT1 = 0;
    2874:	ec e4       	ldi	r30, 0x4C	; 76
    2876:	f0 e0       	ldi	r31, 0x00	; 0
    2878:	11 82       	std	Z+1, r1	; 0x01
    287a:	10 82       	st	Z, r1
	OCR1A = 0;
    287c:	ea e4       	ldi	r30, 0x4A	; 74
    287e:	f0 e0       	ldi	r31, 0x00	; 0
    2880:	11 82       	std	Z+1, r1	; 0x01
    2882:	10 82       	st	Z, r1
	TIMSK &= 0x3c;
    2884:	a9 e5       	ldi	r26, 0x59	; 89
    2886:	b0 e0       	ldi	r27, 0x00	; 0
    2888:	e9 e5       	ldi	r30, 0x59	; 89
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	80 81       	ld	r24, Z
    288e:	8c 73       	andi	r24, 0x3C	; 60
    2890:	8c 93       	st	X, r24
}
    2892:	cf 91       	pop	r28
    2894:	df 91       	pop	r29
    2896:	08 95       	ret

00002898 <Timer_1_setCallBack>:



void Timer_1_setCallBack(void(*a_ptr)(void)){
    2898:	df 93       	push	r29
    289a:	cf 93       	push	r28
    289c:	00 d0       	rcall	.+0      	; 0x289e <Timer_1_setCallBack+0x6>
    289e:	cd b7       	in	r28, 0x3d	; 61
    28a0:	de b7       	in	r29, 0x3e	; 62
    28a2:	9a 83       	std	Y+2, r25	; 0x02
    28a4:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr=a_ptr;
    28a6:	89 81       	ldd	r24, Y+1	; 0x01
    28a8:	9a 81       	ldd	r25, Y+2	; 0x02
    28aa:	90 93 7a 01 	sts	0x017A, r25
    28ae:	80 93 79 01 	sts	0x0179, r24
}
    28b2:	0f 90       	pop	r0
    28b4:	0f 90       	pop	r0
    28b6:	cf 91       	pop	r28
    28b8:	df 91       	pop	r29
    28ba:	08 95       	ret

000028bc <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType *UART_CONFIG_PTR)
{
    28bc:	df 93       	push	r29
    28be:	cf 93       	push	r28
    28c0:	00 d0       	rcall	.+0      	; 0x28c2 <UART_init+0x6>
    28c2:	00 d0       	rcall	.+0      	; 0x28c4 <UART_init+0x8>
    28c4:	cd b7       	in	r28, 0x3d	; 61
    28c6:	de b7       	in	r29, 0x3e	; 62
    28c8:	9c 83       	std	Y+4, r25	; 0x04
    28ca:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    28cc:	1a 82       	std	Y+2, r1	; 0x02
    28ce:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    28d0:	eb e2       	ldi	r30, 0x2B	; 43
    28d2:	f0 e0       	ldi	r31, 0x00	; 0
    28d4:	82 e0       	ldi	r24, 0x02	; 2
    28d6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    28d8:	ea e2       	ldi	r30, 0x2A	; 42
    28da:	f0 e0       	ldi	r31, 0x00	; 0
    28dc:	88 e1       	ldi	r24, 0x18	; 24
    28de:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	SET_BIT(UCSRC,URSEL);
    28e0:	a0 e4       	ldi	r26, 0x40	; 64
    28e2:	b0 e0       	ldi	r27, 0x00	; 0
    28e4:	e0 e4       	ldi	r30, 0x40	; 64
    28e6:	f0 e0       	ldi	r31, 0x00	; 0
    28e8:	80 81       	ld	r24, Z
    28ea:	80 68       	ori	r24, 0x80	; 128
    28ec:	8c 93       	st	X, r24

	UCSRC =( (UCSRC & ~0x40) | ( ( (UART_CONFIG_PTR->synchronization)<<UMSEL) & 0x40 ) );
    28ee:	a0 e4       	ldi	r26, 0x40	; 64
    28f0:	b0 e0       	ldi	r27, 0x00	; 0
    28f2:	e0 e4       	ldi	r30, 0x40	; 64
    28f4:	f0 e0       	ldi	r31, 0x00	; 0
    28f6:	80 81       	ld	r24, Z
    28f8:	28 2f       	mov	r18, r24
    28fa:	2f 7b       	andi	r18, 0xBF	; 191
    28fc:	eb 81       	ldd	r30, Y+3	; 0x03
    28fe:	fc 81       	ldd	r31, Y+4	; 0x04
    2900:	87 81       	ldd	r24, Z+7	; 0x07
    2902:	88 2f       	mov	r24, r24
    2904:	90 e0       	ldi	r25, 0x00	; 0
    2906:	00 24       	eor	r0, r0
    2908:	96 95       	lsr	r25
    290a:	87 95       	ror	r24
    290c:	07 94       	ror	r0
    290e:	96 95       	lsr	r25
    2910:	87 95       	ror	r24
    2912:	07 94       	ror	r0
    2914:	98 2f       	mov	r25, r24
    2916:	80 2d       	mov	r24, r0
    2918:	80 74       	andi	r24, 0x40	; 64
    291a:	82 2b       	or	r24, r18
    291c:	8c 93       	st	X, r24
	UCSRC =( (UCSRC & ~0x30) | ( ( (UART_CONFIG_PTR->parity)<<UPM0) & 0x30) );
    291e:	a0 e4       	ldi	r26, 0x40	; 64
    2920:	b0 e0       	ldi	r27, 0x00	; 0
    2922:	e0 e4       	ldi	r30, 0x40	; 64
    2924:	f0 e0       	ldi	r31, 0x00	; 0
    2926:	80 81       	ld	r24, Z
    2928:	28 2f       	mov	r18, r24
    292a:	2f 7c       	andi	r18, 0xCF	; 207
    292c:	eb 81       	ldd	r30, Y+3	; 0x03
    292e:	fc 81       	ldd	r31, Y+4	; 0x04
    2930:	81 81       	ldd	r24, Z+1	; 0x01
    2932:	88 2f       	mov	r24, r24
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	82 95       	swap	r24
    2938:	92 95       	swap	r25
    293a:	90 7f       	andi	r25, 0xF0	; 240
    293c:	98 27       	eor	r25, r24
    293e:	80 7f       	andi	r24, 0xF0	; 240
    2940:	98 27       	eor	r25, r24
    2942:	80 73       	andi	r24, 0x30	; 48
    2944:	82 2b       	or	r24, r18
    2946:	8c 93       	st	X, r24
	UCSRC =( (UCSRC & ~0x08) | ( ( (UART_CONFIG_PTR->stop_bit)<<USBS) & 0x08) );
    2948:	a0 e4       	ldi	r26, 0x40	; 64
    294a:	b0 e0       	ldi	r27, 0x00	; 0
    294c:	e0 e4       	ldi	r30, 0x40	; 64
    294e:	f0 e0       	ldi	r31, 0x00	; 0
    2950:	80 81       	ld	r24, Z
    2952:	28 2f       	mov	r18, r24
    2954:	27 7f       	andi	r18, 0xF7	; 247
    2956:	eb 81       	ldd	r30, Y+3	; 0x03
    2958:	fc 81       	ldd	r31, Y+4	; 0x04
    295a:	82 81       	ldd	r24, Z+2	; 0x02
    295c:	88 2f       	mov	r24, r24
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	88 0f       	add	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	88 0f       	add	r24, r24
    2966:	99 1f       	adc	r25, r25
    2968:	88 0f       	add	r24, r24
    296a:	99 1f       	adc	r25, r25
    296c:	88 70       	andi	r24, 0x08	; 8
    296e:	82 2b       	or	r24, r18
    2970:	8c 93       	st	X, r24
	UCSRC =( (UCSRC & ~0x06) | ( ( (UART_CONFIG_PTR->bit_data)<<UCSZ0) & 0x06) );
    2972:	a0 e4       	ldi	r26, 0x40	; 64
    2974:	b0 e0       	ldi	r27, 0x00	; 0
    2976:	e0 e4       	ldi	r30, 0x40	; 64
    2978:	f0 e0       	ldi	r31, 0x00	; 0
    297a:	80 81       	ld	r24, Z
    297c:	28 2f       	mov	r18, r24
    297e:	29 7f       	andi	r18, 0xF9	; 249
    2980:	eb 81       	ldd	r30, Y+3	; 0x03
    2982:	fc 81       	ldd	r31, Y+4	; 0x04
    2984:	80 81       	ld	r24, Z
    2986:	88 2f       	mov	r24, r24
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	88 0f       	add	r24, r24
    298c:	99 1f       	adc	r25, r25
    298e:	86 70       	andi	r24, 0x06	; 6
    2990:	82 2b       	or	r24, r18
    2992:	8c 93       	st	X, r24


	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (UART_CONFIG_PTR->baud_rate * 8UL))) - 1);
    2994:	eb 81       	ldd	r30, Y+3	; 0x03
    2996:	fc 81       	ldd	r31, Y+4	; 0x04
    2998:	83 81       	ldd	r24, Z+3	; 0x03
    299a:	94 81       	ldd	r25, Z+4	; 0x04
    299c:	a5 81       	ldd	r26, Z+5	; 0x05
    299e:	b6 81       	ldd	r27, Z+6	; 0x06
    29a0:	88 0f       	add	r24, r24
    29a2:	99 1f       	adc	r25, r25
    29a4:	aa 1f       	adc	r26, r26
    29a6:	bb 1f       	adc	r27, r27
    29a8:	88 0f       	add	r24, r24
    29aa:	99 1f       	adc	r25, r25
    29ac:	aa 1f       	adc	r26, r26
    29ae:	bb 1f       	adc	r27, r27
    29b0:	88 0f       	add	r24, r24
    29b2:	99 1f       	adc	r25, r25
    29b4:	aa 1f       	adc	r26, r26
    29b6:	bb 1f       	adc	r27, r27
    29b8:	9c 01       	movw	r18, r24
    29ba:	ad 01       	movw	r20, r26
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	92 e1       	ldi	r25, 0x12	; 18
    29c0:	aa e7       	ldi	r26, 0x7A	; 122
    29c2:	b0 e0       	ldi	r27, 0x00	; 0
    29c4:	bc 01       	movw	r22, r24
    29c6:	cd 01       	movw	r24, r26
    29c8:	0e 94 8f 15 	call	0x2b1e	; 0x2b1e <__udivmodsi4>
    29cc:	da 01       	movw	r26, r20
    29ce:	c9 01       	movw	r24, r18
    29d0:	01 97       	sbiw	r24, 0x01	; 1
    29d2:	9a 83       	std	Y+2, r25	; 0x02
    29d4:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    29d6:	e0 e4       	ldi	r30, 0x40	; 64
    29d8:	f0 e0       	ldi	r31, 0x00	; 0
    29da:	89 81       	ldd	r24, Y+1	; 0x01
    29dc:	9a 81       	ldd	r25, Y+2	; 0x02
    29de:	89 2f       	mov	r24, r25
    29e0:	99 27       	eor	r25, r25
    29e2:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    29e4:	e9 e2       	ldi	r30, 0x29	; 41
    29e6:	f0 e0       	ldi	r31, 0x00	; 0
    29e8:	89 81       	ldd	r24, Y+1	; 0x01
    29ea:	80 83       	st	Z, r24
}
    29ec:	0f 90       	pop	r0
    29ee:	0f 90       	pop	r0
    29f0:	0f 90       	pop	r0
    29f2:	0f 90       	pop	r0
    29f4:	cf 91       	pop	r28
    29f6:	df 91       	pop	r29
    29f8:	08 95       	ret

000029fa <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    29fa:	df 93       	push	r29
    29fc:	cf 93       	push	r28
    29fe:	0f 92       	push	r0
    2a00:	cd b7       	in	r28, 0x3d	; 61
    2a02:	de b7       	in	r29, 0x3e	; 62
    2a04:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2a06:	eb e2       	ldi	r30, 0x2B	; 43
    2a08:	f0 e0       	ldi	r31, 0x00	; 0
    2a0a:	80 81       	ld	r24, Z
    2a0c:	88 2f       	mov	r24, r24
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	80 72       	andi	r24, 0x20	; 32
    2a12:	90 70       	andi	r25, 0x00	; 0
    2a14:	00 97       	sbiw	r24, 0x00	; 0
    2a16:	b9 f3       	breq	.-18     	; 0x2a06 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2a18:	ec e2       	ldi	r30, 0x2C	; 44
    2a1a:	f0 e0       	ldi	r31, 0x00	; 0
    2a1c:	89 81       	ldd	r24, Y+1	; 0x01
    2a1e:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2a20:	0f 90       	pop	r0
    2a22:	cf 91       	pop	r28
    2a24:	df 91       	pop	r29
    2a26:	08 95       	ret

00002a28 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2a28:	df 93       	push	r29
    2a2a:	cf 93       	push	r28
    2a2c:	cd b7       	in	r28, 0x3d	; 61
    2a2e:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2a30:	eb e2       	ldi	r30, 0x2B	; 43
    2a32:	f0 e0       	ldi	r31, 0x00	; 0
    2a34:	80 81       	ld	r24, Z
    2a36:	88 23       	and	r24, r24
    2a38:	dc f7       	brge	.-10     	; 0x2a30 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    2a3a:	ec e2       	ldi	r30, 0x2C	; 44
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
}
    2a40:	cf 91       	pop	r28
    2a42:	df 91       	pop	r29
    2a44:	08 95       	ret

00002a46 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2a46:	df 93       	push	r29
    2a48:	cf 93       	push	r28
    2a4a:	00 d0       	rcall	.+0      	; 0x2a4c <UART_sendString+0x6>
    2a4c:	0f 92       	push	r0
    2a4e:	cd b7       	in	r28, 0x3d	; 61
    2a50:	de b7       	in	r29, 0x3e	; 62
    2a52:	9b 83       	std	Y+3, r25	; 0x03
    2a54:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2a56:	19 82       	std	Y+1, r1	; 0x01
    2a58:	0e c0       	rjmp	.+28     	; 0x2a76 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	28 2f       	mov	r18, r24
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	8a 81       	ldd	r24, Y+2	; 0x02
    2a62:	9b 81       	ldd	r25, Y+3	; 0x03
    2a64:	fc 01       	movw	r30, r24
    2a66:	e2 0f       	add	r30, r18
    2a68:	f3 1f       	adc	r31, r19
    2a6a:	80 81       	ld	r24, Z
    2a6c:	0e 94 fd 14 	call	0x29fa	; 0x29fa <UART_sendByte>
		i++;
    2a70:	89 81       	ldd	r24, Y+1	; 0x01
    2a72:	8f 5f       	subi	r24, 0xFF	; 255
    2a74:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2a76:	89 81       	ldd	r24, Y+1	; 0x01
    2a78:	28 2f       	mov	r18, r24
    2a7a:	30 e0       	ldi	r19, 0x00	; 0
    2a7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2a7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2a80:	fc 01       	movw	r30, r24
    2a82:	e2 0f       	add	r30, r18
    2a84:	f3 1f       	adc	r31, r19
    2a86:	80 81       	ld	r24, Z
    2a88:	88 23       	and	r24, r24
    2a8a:	39 f7       	brne	.-50     	; 0x2a5a <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    2a8c:	0f 90       	pop	r0
    2a8e:	0f 90       	pop	r0
    2a90:	0f 90       	pop	r0
    2a92:	cf 91       	pop	r28
    2a94:	df 91       	pop	r29
    2a96:	08 95       	ret

00002a98 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2a98:	0f 93       	push	r16
    2a9a:	1f 93       	push	r17
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <UART_receiveString+0xa>
    2aa2:	0f 92       	push	r0
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	9b 83       	std	Y+3, r25	; 0x03
    2aaa:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2aac:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2aae:	89 81       	ldd	r24, Y+1	; 0x01
    2ab0:	28 2f       	mov	r18, r24
    2ab2:	30 e0       	ldi	r19, 0x00	; 0
    2ab4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ab6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ab8:	8c 01       	movw	r16, r24
    2aba:	02 0f       	add	r16, r18
    2abc:	13 1f       	adc	r17, r19
    2abe:	0e 94 14 15 	call	0x2a28	; 0x2a28 <UART_recieveByte>
    2ac2:	f8 01       	movw	r30, r16
    2ac4:	80 83       	st	Z, r24
    2ac6:	0f c0       	rjmp	.+30     	; 0x2ae6 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2ac8:	89 81       	ldd	r24, Y+1	; 0x01
    2aca:	8f 5f       	subi	r24, 0xFF	; 255
    2acc:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2ace:	89 81       	ldd	r24, Y+1	; 0x01
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad6:	9b 81       	ldd	r25, Y+3	; 0x03
    2ad8:	8c 01       	movw	r16, r24
    2ada:	02 0f       	add	r16, r18
    2adc:	13 1f       	adc	r17, r19
    2ade:	0e 94 14 15 	call	0x2a28	; 0x2a28 <UART_recieveByte>
    2ae2:	f8 01       	movw	r30, r16
    2ae4:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2ae6:	89 81       	ldd	r24, Y+1	; 0x01
    2ae8:	28 2f       	mov	r18, r24
    2aea:	30 e0       	ldi	r19, 0x00	; 0
    2aec:	8a 81       	ldd	r24, Y+2	; 0x02
    2aee:	9b 81       	ldd	r25, Y+3	; 0x03
    2af0:	fc 01       	movw	r30, r24
    2af2:	e2 0f       	add	r30, r18
    2af4:	f3 1f       	adc	r31, r19
    2af6:	80 81       	ld	r24, Z
    2af8:	83 32       	cpi	r24, 0x23	; 35
    2afa:	31 f7       	brne	.-52     	; 0x2ac8 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2afc:	89 81       	ldd	r24, Y+1	; 0x01
    2afe:	28 2f       	mov	r18, r24
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	8a 81       	ldd	r24, Y+2	; 0x02
    2b04:	9b 81       	ldd	r25, Y+3	; 0x03
    2b06:	fc 01       	movw	r30, r24
    2b08:	e2 0f       	add	r30, r18
    2b0a:	f3 1f       	adc	r31, r19
    2b0c:	10 82       	st	Z, r1
}
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0
    2b12:	0f 90       	pop	r0
    2b14:	cf 91       	pop	r28
    2b16:	df 91       	pop	r29
    2b18:	1f 91       	pop	r17
    2b1a:	0f 91       	pop	r16
    2b1c:	08 95       	ret

00002b1e <__udivmodsi4>:
    2b1e:	a1 e2       	ldi	r26, 0x21	; 33
    2b20:	1a 2e       	mov	r1, r26
    2b22:	aa 1b       	sub	r26, r26
    2b24:	bb 1b       	sub	r27, r27
    2b26:	fd 01       	movw	r30, r26
    2b28:	0d c0       	rjmp	.+26     	; 0x2b44 <__udivmodsi4_ep>

00002b2a <__udivmodsi4_loop>:
    2b2a:	aa 1f       	adc	r26, r26
    2b2c:	bb 1f       	adc	r27, r27
    2b2e:	ee 1f       	adc	r30, r30
    2b30:	ff 1f       	adc	r31, r31
    2b32:	a2 17       	cp	r26, r18
    2b34:	b3 07       	cpc	r27, r19
    2b36:	e4 07       	cpc	r30, r20
    2b38:	f5 07       	cpc	r31, r21
    2b3a:	20 f0       	brcs	.+8      	; 0x2b44 <__udivmodsi4_ep>
    2b3c:	a2 1b       	sub	r26, r18
    2b3e:	b3 0b       	sbc	r27, r19
    2b40:	e4 0b       	sbc	r30, r20
    2b42:	f5 0b       	sbc	r31, r21

00002b44 <__udivmodsi4_ep>:
    2b44:	66 1f       	adc	r22, r22
    2b46:	77 1f       	adc	r23, r23
    2b48:	88 1f       	adc	r24, r24
    2b4a:	99 1f       	adc	r25, r25
    2b4c:	1a 94       	dec	r1
    2b4e:	69 f7       	brne	.-38     	; 0x2b2a <__udivmodsi4_loop>
    2b50:	60 95       	com	r22
    2b52:	70 95       	com	r23
    2b54:	80 95       	com	r24
    2b56:	90 95       	com	r25
    2b58:	9b 01       	movw	r18, r22
    2b5a:	ac 01       	movw	r20, r24
    2b5c:	bd 01       	movw	r22, r26
    2b5e:	cf 01       	movw	r24, r30
    2b60:	08 95       	ret

00002b62 <__prologue_saves__>:
    2b62:	2f 92       	push	r2
    2b64:	3f 92       	push	r3
    2b66:	4f 92       	push	r4
    2b68:	5f 92       	push	r5
    2b6a:	6f 92       	push	r6
    2b6c:	7f 92       	push	r7
    2b6e:	8f 92       	push	r8
    2b70:	9f 92       	push	r9
    2b72:	af 92       	push	r10
    2b74:	bf 92       	push	r11
    2b76:	cf 92       	push	r12
    2b78:	df 92       	push	r13
    2b7a:	ef 92       	push	r14
    2b7c:	ff 92       	push	r15
    2b7e:	0f 93       	push	r16
    2b80:	1f 93       	push	r17
    2b82:	cf 93       	push	r28
    2b84:	df 93       	push	r29
    2b86:	cd b7       	in	r28, 0x3d	; 61
    2b88:	de b7       	in	r29, 0x3e	; 62
    2b8a:	ca 1b       	sub	r28, r26
    2b8c:	db 0b       	sbc	r29, r27
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	f8 94       	cli
    2b92:	de bf       	out	0x3e, r29	; 62
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	cd bf       	out	0x3d, r28	; 61
    2b98:	09 94       	ijmp

00002b9a <__epilogue_restores__>:
    2b9a:	2a 88       	ldd	r2, Y+18	; 0x12
    2b9c:	39 88       	ldd	r3, Y+17	; 0x11
    2b9e:	48 88       	ldd	r4, Y+16	; 0x10
    2ba0:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ba2:	6e 84       	ldd	r6, Y+14	; 0x0e
    2ba4:	7d 84       	ldd	r7, Y+13	; 0x0d
    2ba6:	8c 84       	ldd	r8, Y+12	; 0x0c
    2ba8:	9b 84       	ldd	r9, Y+11	; 0x0b
    2baa:	aa 84       	ldd	r10, Y+10	; 0x0a
    2bac:	b9 84       	ldd	r11, Y+9	; 0x09
    2bae:	c8 84       	ldd	r12, Y+8	; 0x08
    2bb0:	df 80       	ldd	r13, Y+7	; 0x07
    2bb2:	ee 80       	ldd	r14, Y+6	; 0x06
    2bb4:	fd 80       	ldd	r15, Y+5	; 0x05
    2bb6:	0c 81       	ldd	r16, Y+4	; 0x04
    2bb8:	1b 81       	ldd	r17, Y+3	; 0x03
    2bba:	aa 81       	ldd	r26, Y+2	; 0x02
    2bbc:	b9 81       	ldd	r27, Y+1	; 0x01
    2bbe:	ce 0f       	add	r28, r30
    2bc0:	d1 1d       	adc	r29, r1
    2bc2:	0f b6       	in	r0, 0x3f	; 63
    2bc4:	f8 94       	cli
    2bc6:	de bf       	out	0x3e, r29	; 62
    2bc8:	0f be       	out	0x3f, r0	; 63
    2bca:	cd bf       	out	0x3d, r28	; 61
    2bcc:	ed 01       	movw	r28, r26
    2bce:	08 95       	ret

00002bd0 <itoa>:
    2bd0:	fb 01       	movw	r30, r22
    2bd2:	9f 01       	movw	r18, r30
    2bd4:	e8 94       	clt
    2bd6:	42 30       	cpi	r20, 0x02	; 2
    2bd8:	c4 f0       	brlt	.+48     	; 0x2c0a <itoa+0x3a>
    2bda:	45 32       	cpi	r20, 0x25	; 37
    2bdc:	b4 f4       	brge	.+44     	; 0x2c0a <itoa+0x3a>
    2bde:	4a 30       	cpi	r20, 0x0A	; 10
    2be0:	29 f4       	brne	.+10     	; 0x2bec <itoa+0x1c>
    2be2:	97 fb       	bst	r25, 7
    2be4:	1e f4       	brtc	.+6      	; 0x2bec <itoa+0x1c>
    2be6:	90 95       	com	r25
    2be8:	81 95       	neg	r24
    2bea:	9f 4f       	sbci	r25, 0xFF	; 255
    2bec:	64 2f       	mov	r22, r20
    2bee:	77 27       	eor	r23, r23
    2bf0:	0e 94 19 16 	call	0x2c32	; 0x2c32 <__udivmodhi4>
    2bf4:	80 5d       	subi	r24, 0xD0	; 208
    2bf6:	8a 33       	cpi	r24, 0x3A	; 58
    2bf8:	0c f0       	brlt	.+2      	; 0x2bfc <itoa+0x2c>
    2bfa:	89 5d       	subi	r24, 0xD9	; 217
    2bfc:	81 93       	st	Z+, r24
    2bfe:	cb 01       	movw	r24, r22
    2c00:	00 97       	sbiw	r24, 0x00	; 0
    2c02:	a1 f7       	brne	.-24     	; 0x2bec <itoa+0x1c>
    2c04:	16 f4       	brtc	.+4      	; 0x2c0a <itoa+0x3a>
    2c06:	5d e2       	ldi	r21, 0x2D	; 45
    2c08:	51 93       	st	Z+, r21
    2c0a:	10 82       	st	Z, r1
    2c0c:	c9 01       	movw	r24, r18
    2c0e:	0c 94 09 16 	jmp	0x2c12	; 0x2c12 <strrev>

00002c12 <strrev>:
    2c12:	dc 01       	movw	r26, r24
    2c14:	fc 01       	movw	r30, r24
    2c16:	67 2f       	mov	r22, r23
    2c18:	71 91       	ld	r23, Z+
    2c1a:	77 23       	and	r23, r23
    2c1c:	e1 f7       	brne	.-8      	; 0x2c16 <strrev+0x4>
    2c1e:	32 97       	sbiw	r30, 0x02	; 2
    2c20:	04 c0       	rjmp	.+8      	; 0x2c2a <strrev+0x18>
    2c22:	7c 91       	ld	r23, X
    2c24:	6d 93       	st	X+, r22
    2c26:	70 83       	st	Z, r23
    2c28:	62 91       	ld	r22, -Z
    2c2a:	ae 17       	cp	r26, r30
    2c2c:	bf 07       	cpc	r27, r31
    2c2e:	c8 f3       	brcs	.-14     	; 0x2c22 <strrev+0x10>
    2c30:	08 95       	ret

00002c32 <__udivmodhi4>:
    2c32:	aa 1b       	sub	r26, r26
    2c34:	bb 1b       	sub	r27, r27
    2c36:	51 e1       	ldi	r21, 0x11	; 17
    2c38:	07 c0       	rjmp	.+14     	; 0x2c48 <__udivmodhi4_ep>

00002c3a <__udivmodhi4_loop>:
    2c3a:	aa 1f       	adc	r26, r26
    2c3c:	bb 1f       	adc	r27, r27
    2c3e:	a6 17       	cp	r26, r22
    2c40:	b7 07       	cpc	r27, r23
    2c42:	10 f0       	brcs	.+4      	; 0x2c48 <__udivmodhi4_ep>
    2c44:	a6 1b       	sub	r26, r22
    2c46:	b7 0b       	sbc	r27, r23

00002c48 <__udivmodhi4_ep>:
    2c48:	88 1f       	adc	r24, r24
    2c4a:	99 1f       	adc	r25, r25
    2c4c:	5a 95       	dec	r21
    2c4e:	a9 f7       	brne	.-22     	; 0x2c3a <__udivmodhi4_loop>
    2c50:	80 95       	com	r24
    2c52:	90 95       	com	r25
    2c54:	bc 01       	movw	r22, r24
    2c56:	cd 01       	movw	r24, r26
    2c58:	08 95       	ret

00002c5a <_exit>:
    2c5a:	f8 94       	cli

00002c5c <__stop_program>:
    2c5c:	ff cf       	rjmp	.-2      	; 0x2c5c <__stop_program>


CONTROL_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000034ac  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000090  00800060  000034ac  00003540  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000015  008000f0  008000f0  000035d0  2**0
                  ALLOC
  3 .stab         000036d8  00000000  00000000  000035d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001634  00000000  00000000  00006ca8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  000082dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  0000841c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000858c  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000a1d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000b0c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000be70  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bfd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000c25d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000ca2b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 01 17 	jmp	0x2e02	; 0x2e02 <__vector_7>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 d4 16 	jmp	0x2da8	; 0x2da8 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ea       	ldi	r30, 0xAC	; 172
      68:	f4 e3       	ldi	r31, 0x34	; 52
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a0 3f       	cpi	r26, 0xF0	; 240
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a0 ef       	ldi	r26, 0xF0	; 240
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a5 30       	cpi	r26, 0x05	; 5
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a3 05 	call	0xb46	; 0xb46 <main>
      8a:	0c 94 54 1a 	jmp	0x34a8	; 0x34a8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a7 ed       	ldi	r26, 0xD7	; 215
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 ec 19 	jmp	0x33d8	; 0x33d8 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	87 ed       	ldi	r24, 0xD7	; 215
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 08 1a 	jmp	0x3410	; 0x3410 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 f8 19 	jmp	0x33f0	; 0x33f0 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 14 1a 	jmp	0x3428	; 0x3428 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 fc 19 	jmp	0x33f8	; 0x33f8 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 18 1a 	jmp	0x3430	; 0x3430 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <main>:

UART_ConfigType UART_HMI={UART_8_Bits,UART_PARITY_EVEN,UART_STOPBIT_1_BIT,9600,UART_ASYNCHRONOUS};
Timer1_ConfigType Timer1_ConfigStruct = {0,31250,F_CPU_256,CTC_OCR};
TWI_ConfigType TWI_ConfigStruct = {0b00000010,0x02};

int main(){
     b46:	0f 93       	push	r16
     b48:	1f 93       	push	r17
     b4a:	df 93       	push	r29
     b4c:	cf 93       	push	r28
     b4e:	cd b7       	in	r28, 0x3d	; 61
     b50:	de b7       	in	r29, 0x3e	; 62
     b52:	c5 56       	subi	r28, 0x65	; 101
     b54:	d0 40       	sbci	r29, 0x00	; 0
     b56:	0f b6       	in	r0, 0x3f	; 63
     b58:	f8 94       	cli
     b5a:	de bf       	out	0x3e, r29	; 62
     b5c:	0f be       	out	0x3f, r0	; 63
     b5e:	cd bf       	out	0x3d, r28	; 61


	Buzzer_init();
     b60:	0e 94 e9 0c 	call	0x19d2	; 0x19d2 <Buzzer_init>
	DCMotor_Init();
     b64:	0e 94 12 0d 	call	0x1a24	; 0x1a24 <DCMotor_Init>
	UART_init(&UART_HMI);
     b68:	8f ed       	ldi	r24, 0xDF	; 223
     b6a:	90 e0       	ldi	r25, 0x00	; 0
     b6c:	0e 94 5c 18 	call	0x30b8	; 0x30b8 <UART_init>
	TWI_init(&TWI_ConfigStruct);
     b70:	8d ee       	ldi	r24, 0xED	; 237
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 d5 17 	call	0x2faa	; 0x2faa <TWI_init>

	uint8 compare_passwords_return;


	SREG |= (1<<7);
     b78:	af e5       	ldi	r26, 0x5F	; 95
     b7a:	b0 e0       	ldi	r27, 0x00	; 0
     b7c:	ef e5       	ldi	r30, 0x5F	; 95
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	80 81       	ld	r24, Z
     b82:	80 68       	ori	r24, 0x80	; 128
     b84:	8c 93       	st	X, r24

#if (DEBUGGING_MODE == ON)
	LCD_init();
     b86:	0e 94 52 11 	call	0x22a4	; 0x22a4 <LCD_init>
	LCD_displayString("Debugging...");
     b8a:	80 e6       	ldi	r24, 0x60	; 96
     b8c:	90 e0       	ldi	r25, 0x00	; 0
     b8e:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_displayString>
#endif

	for(;;){

		switch(control_stage){
     b92:	80 91 f0 00 	lds	r24, 0x00F0
     b96:	28 2f       	mov	r18, r24
     b98:	30 e0       	ldi	r19, 0x00	; 0
     b9a:	a6 96       	adiw	r28, 0x26	; 38
     b9c:	3f af       	std	Y+63, r19	; 0x3f
     b9e:	2e af       	std	Y+62, r18	; 0x3e
     ba0:	a6 97       	sbiw	r28, 0x26	; 38
     ba2:	a6 96       	adiw	r28, 0x26	; 38
     ba4:	8e ad       	ldd	r24, Y+62	; 0x3e
     ba6:	9f ad       	ldd	r25, Y+63	; 0x3f
     ba8:	a6 97       	sbiw	r28, 0x26	; 38
     baa:	81 30       	cpi	r24, 0x01	; 1
     bac:	91 05       	cpc	r25, r1
     bae:	09 f4       	brne	.+2      	; 0xbb2 <main+0x6c>
     bb0:	31 c2       	rjmp	.+1122   	; 0x1014 <main+0x4ce>
     bb2:	a6 96       	adiw	r28, 0x26	; 38
     bb4:	ee ad       	ldd	r30, Y+62	; 0x3e
     bb6:	ff ad       	ldd	r31, Y+63	; 0x3f
     bb8:	a6 97       	sbiw	r28, 0x26	; 38
     bba:	e2 30       	cpi	r30, 0x02	; 2
     bbc:	f1 05       	cpc	r31, r1
     bbe:	09 f4       	brne	.+2      	; 0xbc2 <main+0x7c>
     bc0:	11 c4       	rjmp	.+2082   	; 0x13e4 <main+0x89e>
     bc2:	a6 96       	adiw	r28, 0x26	; 38
     bc4:	2e ad       	ldd	r18, Y+62	; 0x3e
     bc6:	3f ad       	ldd	r19, Y+63	; 0x3f
     bc8:	a6 97       	sbiw	r28, 0x26	; 38
     bca:	21 15       	cp	r18, r1
     bcc:	31 05       	cpc	r19, r1
     bce:	09 f7       	brne	.-62     	; 0xb92 <main+0x4c>
		case 0:							//setting password
			//Receive first password
			UART_recieveArray(recived_password_1,PASSWORD_SIZE);
     bd0:	84 ef       	ldi	r24, 0xF4	; 244
     bd2:	90 e0       	ldi	r25, 0x00	; 0
     bd4:	65 e0       	ldi	r22, 0x05	; 5
     bd6:	0e 94 8d 19 	call	0x331a	; 0x331a <UART_recieveArray>
#if (DEBUGGING_MODE == ON)

			LCD_clearScreen();
     bda:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <LCD_clearScreen>
			LCD_displayArray(recived_password_1, PASSWORD_SIZE);
     bde:	84 ef       	ldi	r24, 0xF4	; 244
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	65 e0       	ldi	r22, 0x05	; 5
     be4:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_displayArray>
     be8:	fe 01       	movw	r30, r28
     bea:	e1 5a       	subi	r30, 0xA1	; 161
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	80 e0       	ldi	r24, 0x00	; 0
     bf0:	90 e0       	ldi	r25, 0x00	; 0
     bf2:	aa ef       	ldi	r26, 0xFA	; 250
     bf4:	b3 e4       	ldi	r27, 0x43	; 67
     bf6:	80 83       	st	Z, r24
     bf8:	91 83       	std	Z+1, r25	; 0x01
     bfa:	a2 83       	std	Z+2, r26	; 0x02
     bfc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     bfe:	8e 01       	movw	r16, r28
     c00:	05 5a       	subi	r16, 0xA5	; 165
     c02:	1f 4f       	sbci	r17, 0xFF	; 255
     c04:	fe 01       	movw	r30, r28
     c06:	e1 5a       	subi	r30, 0xA1	; 161
     c08:	ff 4f       	sbci	r31, 0xFF	; 255
     c0a:	60 81       	ld	r22, Z
     c0c:	71 81       	ldd	r23, Z+1	; 0x01
     c0e:	82 81       	ldd	r24, Z+2	; 0x02
     c10:	93 81       	ldd	r25, Z+3	; 0x03
     c12:	20 e0       	ldi	r18, 0x00	; 0
     c14:	30 e0       	ldi	r19, 0x00	; 0
     c16:	4a ef       	ldi	r20, 0xFA	; 250
     c18:	54 e4       	ldi	r21, 0x44	; 68
     c1a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c1e:	dc 01       	movw	r26, r24
     c20:	cb 01       	movw	r24, r22
     c22:	f8 01       	movw	r30, r16
     c24:	80 83       	st	Z, r24
     c26:	91 83       	std	Z+1, r25	; 0x01
     c28:	a2 83       	std	Z+2, r26	; 0x02
     c2a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c2c:	fe 01       	movw	r30, r28
     c2e:	e5 5a       	subi	r30, 0xA5	; 165
     c30:	ff 4f       	sbci	r31, 0xFF	; 255
     c32:	60 81       	ld	r22, Z
     c34:	71 81       	ldd	r23, Z+1	; 0x01
     c36:	82 81       	ldd	r24, Z+2	; 0x02
     c38:	93 81       	ldd	r25, Z+3	; 0x03
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	40 e8       	ldi	r20, 0x80	; 128
     c40:	5f e3       	ldi	r21, 0x3F	; 63
     c42:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c46:	88 23       	and	r24, r24
     c48:	44 f4       	brge	.+16     	; 0xc5a <main+0x114>
		__ticks = 1;
     c4a:	fe 01       	movw	r30, r28
     c4c:	e7 5a       	subi	r30, 0xA7	; 167
     c4e:	ff 4f       	sbci	r31, 0xFF	; 255
     c50:	81 e0       	ldi	r24, 0x01	; 1
     c52:	90 e0       	ldi	r25, 0x00	; 0
     c54:	91 83       	std	Z+1, r25	; 0x01
     c56:	80 83       	st	Z, r24
     c58:	64 c0       	rjmp	.+200    	; 0xd22 <main+0x1dc>
	else if (__tmp > 65535)
     c5a:	fe 01       	movw	r30, r28
     c5c:	e5 5a       	subi	r30, 0xA5	; 165
     c5e:	ff 4f       	sbci	r31, 0xFF	; 255
     c60:	60 81       	ld	r22, Z
     c62:	71 81       	ldd	r23, Z+1	; 0x01
     c64:	82 81       	ldd	r24, Z+2	; 0x02
     c66:	93 81       	ldd	r25, Z+3	; 0x03
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	3f ef       	ldi	r19, 0xFF	; 255
     c6c:	4f e7       	ldi	r20, 0x7F	; 127
     c6e:	57 e4       	ldi	r21, 0x47	; 71
     c70:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     c74:	18 16       	cp	r1, r24
     c76:	0c f0       	brlt	.+2      	; 0xc7a <main+0x134>
     c78:	43 c0       	rjmp	.+134    	; 0xd00 <main+0x1ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c7a:	fe 01       	movw	r30, r28
     c7c:	e1 5a       	subi	r30, 0xA1	; 161
     c7e:	ff 4f       	sbci	r31, 0xFF	; 255
     c80:	60 81       	ld	r22, Z
     c82:	71 81       	ldd	r23, Z+1	; 0x01
     c84:	82 81       	ldd	r24, Z+2	; 0x02
     c86:	93 81       	ldd	r25, Z+3	; 0x03
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	30 e0       	ldi	r19, 0x00	; 0
     c8c:	40 e2       	ldi	r20, 0x20	; 32
     c8e:	51 e4       	ldi	r21, 0x41	; 65
     c90:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c94:	dc 01       	movw	r26, r24
     c96:	cb 01       	movw	r24, r22
     c98:	8e 01       	movw	r16, r28
     c9a:	07 5a       	subi	r16, 0xA7	; 167
     c9c:	1f 4f       	sbci	r17, 0xFF	; 255
     c9e:	bc 01       	movw	r22, r24
     ca0:	cd 01       	movw	r24, r26
     ca2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	f8 01       	movw	r30, r16
     cac:	91 83       	std	Z+1, r25	; 0x01
     cae:	80 83       	st	Z, r24
     cb0:	1f c0       	rjmp	.+62     	; 0xcf0 <main+0x1aa>
     cb2:	fe 01       	movw	r30, r28
     cb4:	e9 5a       	subi	r30, 0xA9	; 169
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	88 ec       	ldi	r24, 0xC8	; 200
     cba:	90 e0       	ldi	r25, 0x00	; 0
     cbc:	91 83       	std	Z+1, r25	; 0x01
     cbe:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cc0:	fe 01       	movw	r30, r28
     cc2:	e9 5a       	subi	r30, 0xA9	; 169
     cc4:	ff 4f       	sbci	r31, 0xFF	; 255
     cc6:	80 81       	ld	r24, Z
     cc8:	91 81       	ldd	r25, Z+1	; 0x01
     cca:	01 97       	sbiw	r24, 0x01	; 1
     ccc:	f1 f7       	brne	.-4      	; 0xcca <main+0x184>
     cce:	fe 01       	movw	r30, r28
     cd0:	e9 5a       	subi	r30, 0xA9	; 169
     cd2:	ff 4f       	sbci	r31, 0xFF	; 255
     cd4:	91 83       	std	Z+1, r25	; 0x01
     cd6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     cd8:	de 01       	movw	r26, r28
     cda:	a7 5a       	subi	r26, 0xA7	; 167
     cdc:	bf 4f       	sbci	r27, 0xFF	; 255
     cde:	fe 01       	movw	r30, r28
     ce0:	e7 5a       	subi	r30, 0xA7	; 167
     ce2:	ff 4f       	sbci	r31, 0xFF	; 255
     ce4:	80 81       	ld	r24, Z
     ce6:	91 81       	ldd	r25, Z+1	; 0x01
     ce8:	01 97       	sbiw	r24, 0x01	; 1
     cea:	11 96       	adiw	r26, 0x01	; 1
     cec:	9c 93       	st	X, r25
     cee:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     cf0:	fe 01       	movw	r30, r28
     cf2:	e7 5a       	subi	r30, 0xA7	; 167
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	80 81       	ld	r24, Z
     cf8:	91 81       	ldd	r25, Z+1	; 0x01
     cfa:	00 97       	sbiw	r24, 0x00	; 0
     cfc:	d1 f6       	brne	.-76     	; 0xcb2 <main+0x16c>
     cfe:	27 c0       	rjmp	.+78     	; 0xd4e <main+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d00:	8e 01       	movw	r16, r28
     d02:	07 5a       	subi	r16, 0xA7	; 167
     d04:	1f 4f       	sbci	r17, 0xFF	; 255
     d06:	fe 01       	movw	r30, r28
     d08:	e5 5a       	subi	r30, 0xA5	; 165
     d0a:	ff 4f       	sbci	r31, 0xFF	; 255
     d0c:	60 81       	ld	r22, Z
     d0e:	71 81       	ldd	r23, Z+1	; 0x01
     d10:	82 81       	ldd	r24, Z+2	; 0x02
     d12:	93 81       	ldd	r25, Z+3	; 0x03
     d14:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d18:	dc 01       	movw	r26, r24
     d1a:	cb 01       	movw	r24, r22
     d1c:	f8 01       	movw	r30, r16
     d1e:	91 83       	std	Z+1, r25	; 0x01
     d20:	80 83       	st	Z, r24
     d22:	de 01       	movw	r26, r28
     d24:	ab 5a       	subi	r26, 0xAB	; 171
     d26:	bf 4f       	sbci	r27, 0xFF	; 255
     d28:	fe 01       	movw	r30, r28
     d2a:	e7 5a       	subi	r30, 0xA7	; 167
     d2c:	ff 4f       	sbci	r31, 0xFF	; 255
     d2e:	80 81       	ld	r24, Z
     d30:	91 81       	ldd	r25, Z+1	; 0x01
     d32:	8d 93       	st	X+, r24
     d34:	9c 93       	st	X, r25
     d36:	fe 01       	movw	r30, r28
     d38:	eb 5a       	subi	r30, 0xAB	; 171
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	80 81       	ld	r24, Z
     d3e:	91 81       	ldd	r25, Z+1	; 0x01
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	f1 f7       	brne	.-4      	; 0xd40 <main+0x1fa>
     d44:	fe 01       	movw	r30, r28
     d46:	eb 5a       	subi	r30, 0xAB	; 171
     d48:	ff 4f       	sbci	r31, 0xFF	; 255
     d4a:	91 83       	std	Z+1, r25	; 0x01
     d4c:	80 83       	st	Z, r24
			_delay_ms(500);
#endif

			//Receive second password
			UART_recieveArray(recived_password_2,PASSWORD_SIZE);
     d4e:	89 ef       	ldi	r24, 0xF9	; 249
     d50:	90 e0       	ldi	r25, 0x00	; 0
     d52:	65 e0       	ldi	r22, 0x05	; 5
     d54:	0e 94 8d 19 	call	0x331a	; 0x331a <UART_recieveArray>
#if (DEBUGGING_MODE == ON)

			LCD_clearScreen();
     d58:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <LCD_clearScreen>
			LCD_displayArray(recived_password_2, PASSWORD_SIZE);
     d5c:	89 ef       	ldi	r24, 0xF9	; 249
     d5e:	90 e0       	ldi	r25, 0x00	; 0
     d60:	65 e0       	ldi	r22, 0x05	; 5
     d62:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_displayArray>
     d66:	fe 01       	movw	r30, r28
     d68:	ef 5a       	subi	r30, 0xAF	; 175
     d6a:	ff 4f       	sbci	r31, 0xFF	; 255
     d6c:	80 e0       	ldi	r24, 0x00	; 0
     d6e:	90 e0       	ldi	r25, 0x00	; 0
     d70:	aa ef       	ldi	r26, 0xFA	; 250
     d72:	b3 e4       	ldi	r27, 0x43	; 67
     d74:	80 83       	st	Z, r24
     d76:	91 83       	std	Z+1, r25	; 0x01
     d78:	a2 83       	std	Z+2, r26	; 0x02
     d7a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d7c:	8e 01       	movw	r16, r28
     d7e:	03 5b       	subi	r16, 0xB3	; 179
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	fe 01       	movw	r30, r28
     d84:	ef 5a       	subi	r30, 0xAF	; 175
     d86:	ff 4f       	sbci	r31, 0xFF	; 255
     d88:	60 81       	ld	r22, Z
     d8a:	71 81       	ldd	r23, Z+1	; 0x01
     d8c:	82 81       	ldd	r24, Z+2	; 0x02
     d8e:	93 81       	ldd	r25, Z+3	; 0x03
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	4a ef       	ldi	r20, 0xFA	; 250
     d96:	54 e4       	ldi	r21, 0x44	; 68
     d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     d9c:	dc 01       	movw	r26, r24
     d9e:	cb 01       	movw	r24, r22
     da0:	f8 01       	movw	r30, r16
     da2:	80 83       	st	Z, r24
     da4:	91 83       	std	Z+1, r25	; 0x01
     da6:	a2 83       	std	Z+2, r26	; 0x02
     da8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     daa:	fe 01       	movw	r30, r28
     dac:	e3 5b       	subi	r30, 0xB3	; 179
     dae:	ff 4f       	sbci	r31, 0xFF	; 255
     db0:	60 81       	ld	r22, Z
     db2:	71 81       	ldd	r23, Z+1	; 0x01
     db4:	82 81       	ldd	r24, Z+2	; 0x02
     db6:	93 81       	ldd	r25, Z+3	; 0x03
     db8:	20 e0       	ldi	r18, 0x00	; 0
     dba:	30 e0       	ldi	r19, 0x00	; 0
     dbc:	40 e8       	ldi	r20, 0x80	; 128
     dbe:	5f e3       	ldi	r21, 0x3F	; 63
     dc0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     dc4:	88 23       	and	r24, r24
     dc6:	44 f4       	brge	.+16     	; 0xdd8 <main+0x292>
		__ticks = 1;
     dc8:	fe 01       	movw	r30, r28
     dca:	e5 5b       	subi	r30, 0xB5	; 181
     dcc:	ff 4f       	sbci	r31, 0xFF	; 255
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	91 83       	std	Z+1, r25	; 0x01
     dd4:	80 83       	st	Z, r24
     dd6:	64 c0       	rjmp	.+200    	; 0xea0 <main+0x35a>
	else if (__tmp > 65535)
     dd8:	fe 01       	movw	r30, r28
     dda:	e3 5b       	subi	r30, 0xB3	; 179
     ddc:	ff 4f       	sbci	r31, 0xFF	; 255
     dde:	60 81       	ld	r22, Z
     de0:	71 81       	ldd	r23, Z+1	; 0x01
     de2:	82 81       	ldd	r24, Z+2	; 0x02
     de4:	93 81       	ldd	r25, Z+3	; 0x03
     de6:	20 e0       	ldi	r18, 0x00	; 0
     de8:	3f ef       	ldi	r19, 0xFF	; 255
     dea:	4f e7       	ldi	r20, 0x7F	; 127
     dec:	57 e4       	ldi	r21, 0x47	; 71
     dee:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     df2:	18 16       	cp	r1, r24
     df4:	0c f0       	brlt	.+2      	; 0xdf8 <main+0x2b2>
     df6:	43 c0       	rjmp	.+134    	; 0xe7e <main+0x338>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     df8:	fe 01       	movw	r30, r28
     dfa:	ef 5a       	subi	r30, 0xAF	; 175
     dfc:	ff 4f       	sbci	r31, 0xFF	; 255
     dfe:	60 81       	ld	r22, Z
     e00:	71 81       	ldd	r23, Z+1	; 0x01
     e02:	82 81       	ldd	r24, Z+2	; 0x02
     e04:	93 81       	ldd	r25, Z+3	; 0x03
     e06:	20 e0       	ldi	r18, 0x00	; 0
     e08:	30 e0       	ldi	r19, 0x00	; 0
     e0a:	40 e2       	ldi	r20, 0x20	; 32
     e0c:	51 e4       	ldi	r21, 0x41	; 65
     e0e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e12:	dc 01       	movw	r26, r24
     e14:	cb 01       	movw	r24, r22
     e16:	8e 01       	movw	r16, r28
     e18:	05 5b       	subi	r16, 0xB5	; 181
     e1a:	1f 4f       	sbci	r17, 0xFF	; 255
     e1c:	bc 01       	movw	r22, r24
     e1e:	cd 01       	movw	r24, r26
     e20:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	f8 01       	movw	r30, r16
     e2a:	91 83       	std	Z+1, r25	; 0x01
     e2c:	80 83       	st	Z, r24
     e2e:	1f c0       	rjmp	.+62     	; 0xe6e <main+0x328>
     e30:	fe 01       	movw	r30, r28
     e32:	e7 5b       	subi	r30, 0xB7	; 183
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	88 ec       	ldi	r24, 0xC8	; 200
     e38:	90 e0       	ldi	r25, 0x00	; 0
     e3a:	91 83       	std	Z+1, r25	; 0x01
     e3c:	80 83       	st	Z, r24
     e3e:	fe 01       	movw	r30, r28
     e40:	e7 5b       	subi	r30, 0xB7	; 183
     e42:	ff 4f       	sbci	r31, 0xFF	; 255
     e44:	80 81       	ld	r24, Z
     e46:	91 81       	ldd	r25, Z+1	; 0x01
     e48:	01 97       	sbiw	r24, 0x01	; 1
     e4a:	f1 f7       	brne	.-4      	; 0xe48 <main+0x302>
     e4c:	fe 01       	movw	r30, r28
     e4e:	e7 5b       	subi	r30, 0xB7	; 183
     e50:	ff 4f       	sbci	r31, 0xFF	; 255
     e52:	91 83       	std	Z+1, r25	; 0x01
     e54:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e56:	de 01       	movw	r26, r28
     e58:	a5 5b       	subi	r26, 0xB5	; 181
     e5a:	bf 4f       	sbci	r27, 0xFF	; 255
     e5c:	fe 01       	movw	r30, r28
     e5e:	e5 5b       	subi	r30, 0xB5	; 181
     e60:	ff 4f       	sbci	r31, 0xFF	; 255
     e62:	80 81       	ld	r24, Z
     e64:	91 81       	ldd	r25, Z+1	; 0x01
     e66:	01 97       	sbiw	r24, 0x01	; 1
     e68:	11 96       	adiw	r26, 0x01	; 1
     e6a:	9c 93       	st	X, r25
     e6c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e6e:	fe 01       	movw	r30, r28
     e70:	e5 5b       	subi	r30, 0xB5	; 181
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	80 81       	ld	r24, Z
     e76:	91 81       	ldd	r25, Z+1	; 0x01
     e78:	00 97       	sbiw	r24, 0x00	; 0
     e7a:	d1 f6       	brne	.-76     	; 0xe30 <main+0x2ea>
     e7c:	27 c0       	rjmp	.+78     	; 0xecc <main+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e7e:	8e 01       	movw	r16, r28
     e80:	05 5b       	subi	r16, 0xB5	; 181
     e82:	1f 4f       	sbci	r17, 0xFF	; 255
     e84:	fe 01       	movw	r30, r28
     e86:	e3 5b       	subi	r30, 0xB3	; 179
     e88:	ff 4f       	sbci	r31, 0xFF	; 255
     e8a:	60 81       	ld	r22, Z
     e8c:	71 81       	ldd	r23, Z+1	; 0x01
     e8e:	82 81       	ldd	r24, Z+2	; 0x02
     e90:	93 81       	ldd	r25, Z+3	; 0x03
     e92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e96:	dc 01       	movw	r26, r24
     e98:	cb 01       	movw	r24, r22
     e9a:	f8 01       	movw	r30, r16
     e9c:	91 83       	std	Z+1, r25	; 0x01
     e9e:	80 83       	st	Z, r24
     ea0:	de 01       	movw	r26, r28
     ea2:	a9 5b       	subi	r26, 0xB9	; 185
     ea4:	bf 4f       	sbci	r27, 0xFF	; 255
     ea6:	fe 01       	movw	r30, r28
     ea8:	e5 5b       	subi	r30, 0xB5	; 181
     eaa:	ff 4f       	sbci	r31, 0xFF	; 255
     eac:	80 81       	ld	r24, Z
     eae:	91 81       	ldd	r25, Z+1	; 0x01
     eb0:	8d 93       	st	X+, r24
     eb2:	9c 93       	st	X, r25
     eb4:	fe 01       	movw	r30, r28
     eb6:	e9 5b       	subi	r30, 0xB9	; 185
     eb8:	ff 4f       	sbci	r31, 0xFF	; 255
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	f1 f7       	brne	.-4      	; 0xebe <main+0x378>
     ec2:	fe 01       	movw	r30, r28
     ec4:	e9 5b       	subi	r30, 0xB9	; 185
     ec6:	ff 4f       	sbci	r31, 0xFF	; 255
     ec8:	91 83       	std	Z+1, r25	; 0x01
     eca:	80 83       	st	Z, r24
			_delay_ms(500);
#endif

			//compare passwords
			LCD_clearScreen();
     ecc:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <LCD_clearScreen>
			compare_passwords_return=compare_passwords(recived_password_1, recived_password_2);
     ed0:	84 ef       	ldi	r24, 0xF4	; 244
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	29 ef       	ldi	r18, 0xF9	; 249
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	b9 01       	movw	r22, r18
     eda:	0e 94 82 0a 	call	0x1504	; 0x1504 <compare_passwords>
     ede:	fe 01       	movw	r30, r28
     ee0:	ed 59       	subi	r30, 0x9D	; 157
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	80 83       	st	Z, r24
     ee6:	fe 01       	movw	r30, r28
     ee8:	ed 5b       	subi	r30, 0xBD	; 189
     eea:	ff 4f       	sbci	r31, 0xFF	; 255
     eec:	80 e0       	ldi	r24, 0x00	; 0
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	aa e7       	ldi	r26, 0x7A	; 122
     ef2:	b4 e4       	ldi	r27, 0x44	; 68
     ef4:	80 83       	st	Z, r24
     ef6:	91 83       	std	Z+1, r25	; 0x01
     ef8:	a2 83       	std	Z+2, r26	; 0x02
     efa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     efc:	8e 01       	movw	r16, r28
     efe:	01 5c       	subi	r16, 0xC1	; 193
     f00:	1f 4f       	sbci	r17, 0xFF	; 255
     f02:	fe 01       	movw	r30, r28
     f04:	ed 5b       	subi	r30, 0xBD	; 189
     f06:	ff 4f       	sbci	r31, 0xFF	; 255
     f08:	60 81       	ld	r22, Z
     f0a:	71 81       	ldd	r23, Z+1	; 0x01
     f0c:	82 81       	ldd	r24, Z+2	; 0x02
     f0e:	93 81       	ldd	r25, Z+3	; 0x03
     f10:	20 e0       	ldi	r18, 0x00	; 0
     f12:	30 e0       	ldi	r19, 0x00	; 0
     f14:	4a ef       	ldi	r20, 0xFA	; 250
     f16:	54 e4       	ldi	r21, 0x44	; 68
     f18:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f1c:	dc 01       	movw	r26, r24
     f1e:	cb 01       	movw	r24, r22
     f20:	f8 01       	movw	r30, r16
     f22:	80 83       	st	Z, r24
     f24:	91 83       	std	Z+1, r25	; 0x01
     f26:	a2 83       	std	Z+2, r26	; 0x02
     f28:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f2a:	fe 01       	movw	r30, r28
     f2c:	ff 96       	adiw	r30, 0x3f	; 63
     f2e:	60 81       	ld	r22, Z
     f30:	71 81       	ldd	r23, Z+1	; 0x01
     f32:	82 81       	ldd	r24, Z+2	; 0x02
     f34:	93 81       	ldd	r25, Z+3	; 0x03
     f36:	20 e0       	ldi	r18, 0x00	; 0
     f38:	30 e0       	ldi	r19, 0x00	; 0
     f3a:	40 e8       	ldi	r20, 0x80	; 128
     f3c:	5f e3       	ldi	r21, 0x3F	; 63
     f3e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f42:	88 23       	and	r24, r24
     f44:	2c f4       	brge	.+10     	; 0xf50 <main+0x40a>
		__ticks = 1;
     f46:	81 e0       	ldi	r24, 0x01	; 1
     f48:	90 e0       	ldi	r25, 0x00	; 0
     f4a:	9e af       	std	Y+62, r25	; 0x3e
     f4c:	8d af       	std	Y+61, r24	; 0x3d
     f4e:	46 c0       	rjmp	.+140    	; 0xfdc <main+0x496>
	else if (__tmp > 65535)
     f50:	fe 01       	movw	r30, r28
     f52:	ff 96       	adiw	r30, 0x3f	; 63
     f54:	60 81       	ld	r22, Z
     f56:	71 81       	ldd	r23, Z+1	; 0x01
     f58:	82 81       	ldd	r24, Z+2	; 0x02
     f5a:	93 81       	ldd	r25, Z+3	; 0x03
     f5c:	20 e0       	ldi	r18, 0x00	; 0
     f5e:	3f ef       	ldi	r19, 0xFF	; 255
     f60:	4f e7       	ldi	r20, 0x7F	; 127
     f62:	57 e4       	ldi	r21, 0x47	; 71
     f64:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     f68:	18 16       	cp	r1, r24
     f6a:	64 f5       	brge	.+88     	; 0xfc4 <main+0x47e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     f6c:	fe 01       	movw	r30, r28
     f6e:	ed 5b       	subi	r30, 0xBD	; 189
     f70:	ff 4f       	sbci	r31, 0xFF	; 255
     f72:	60 81       	ld	r22, Z
     f74:	71 81       	ldd	r23, Z+1	; 0x01
     f76:	82 81       	ldd	r24, Z+2	; 0x02
     f78:	93 81       	ldd	r25, Z+3	; 0x03
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e2       	ldi	r20, 0x20	; 32
     f80:	51 e4       	ldi	r21, 0x41	; 65
     f82:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	bc 01       	movw	r22, r24
     f8c:	cd 01       	movw	r24, r26
     f8e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     f92:	dc 01       	movw	r26, r24
     f94:	cb 01       	movw	r24, r22
     f96:	9e af       	std	Y+62, r25	; 0x3e
     f98:	8d af       	std	Y+61, r24	; 0x3d
     f9a:	0f c0       	rjmp	.+30     	; 0xfba <main+0x474>
     f9c:	88 ec       	ldi	r24, 0xC8	; 200
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	9c af       	std	Y+60, r25	; 0x3c
     fa2:	8b af       	std	Y+59, r24	; 0x3b
     fa4:	8b ad       	ldd	r24, Y+59	; 0x3b
     fa6:	9c ad       	ldd	r25, Y+60	; 0x3c
     fa8:	01 97       	sbiw	r24, 0x01	; 1
     faa:	f1 f7       	brne	.-4      	; 0xfa8 <main+0x462>
     fac:	9c af       	std	Y+60, r25	; 0x3c
     fae:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fb0:	8d ad       	ldd	r24, Y+61	; 0x3d
     fb2:	9e ad       	ldd	r25, Y+62	; 0x3e
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	9e af       	std	Y+62, r25	; 0x3e
     fb8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     fba:	8d ad       	ldd	r24, Y+61	; 0x3d
     fbc:	9e ad       	ldd	r25, Y+62	; 0x3e
     fbe:	00 97       	sbiw	r24, 0x00	; 0
     fc0:	69 f7       	brne	.-38     	; 0xf9c <main+0x456>
     fc2:	16 c0       	rjmp	.+44     	; 0xff0 <main+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     fc4:	fe 01       	movw	r30, r28
     fc6:	ff 96       	adiw	r30, 0x3f	; 63
     fc8:	60 81       	ld	r22, Z
     fca:	71 81       	ldd	r23, Z+1	; 0x01
     fcc:	82 81       	ldd	r24, Z+2	; 0x02
     fce:	93 81       	ldd	r25, Z+3	; 0x03
     fd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fd4:	dc 01       	movw	r26, r24
     fd6:	cb 01       	movw	r24, r22
     fd8:	9e af       	std	Y+62, r25	; 0x3e
     fda:	8d af       	std	Y+61, r24	; 0x3d
     fdc:	8d ad       	ldd	r24, Y+61	; 0x3d
     fde:	9e ad       	ldd	r25, Y+62	; 0x3e
     fe0:	9a af       	std	Y+58, r25	; 0x3a
     fe2:	89 af       	std	Y+57, r24	; 0x39
     fe4:	89 ad       	ldd	r24, Y+57	; 0x39
     fe6:	9a ad       	ldd	r25, Y+58	; 0x3a
     fe8:	01 97       	sbiw	r24, 0x01	; 1
     fea:	f1 f7       	brne	.-4      	; 0xfe8 <main+0x4a2>
     fec:	9a af       	std	Y+58, r25	; 0x3a
     fee:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(1000);
			LCD_clearScreen();
     ff0:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <LCD_clearScreen>
			if(compare_passwords_return==1){
     ff4:	fe 01       	movw	r30, r28
     ff6:	ed 59       	subi	r30, 0x9D	; 157
     ff8:	ff 4f       	sbci	r31, 0xFF	; 255
     ffa:	80 81       	ld	r24, Z
     ffc:	81 30       	cpi	r24, 0x01	; 1
     ffe:	19 f4       	brne	.+6      	; 0x1006 <main+0x4c0>
				control_stage=1;
    1000:	81 e0       	ldi	r24, 0x01	; 1
    1002:	80 93 f0 00 	sts	0x00F0, r24
			}
			UART_sendByte(compare_passwords_return);
    1006:	fe 01       	movw	r30, r28
    1008:	ed 59       	subi	r30, 0x9D	; 157
    100a:	ff 4f       	sbci	r31, 0xFF	; 255
    100c:	80 81       	ld	r24, Z
    100e:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <UART_sendByte>
    1012:	bf cd       	rjmp	.-1154   	; 0xb92 <main+0x4c>


		case 1:							//recieving password to open the door

			//Receive third password (from + or -)
			UART_recieveArray(recived_password_1,PASSWORD_SIZE);
    1014:	84 ef       	ldi	r24, 0xF4	; 244
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	65 e0       	ldi	r22, 0x05	; 5
    101a:	0e 94 8d 19 	call	0x331a	; 0x331a <UART_recieveArray>
#if (DEBUGGING_MODE == ON)

			LCD_clearScreen();
    101e:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <LCD_clearScreen>
			LCD_displayArray(recived_password_1, PASSWORD_SIZE);
    1022:	84 ef       	ldi	r24, 0xF4	; 244
    1024:	90 e0       	ldi	r25, 0x00	; 0
    1026:	65 e0       	ldi	r22, 0x05	; 5
    1028:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <LCD_displayArray>
    102c:	80 e0       	ldi	r24, 0x00	; 0
    102e:	90 e0       	ldi	r25, 0x00	; 0
    1030:	aa ef       	ldi	r26, 0xFA	; 250
    1032:	b3 e4       	ldi	r27, 0x43	; 67
    1034:	8d ab       	std	Y+53, r24	; 0x35
    1036:	9e ab       	std	Y+54, r25	; 0x36
    1038:	af ab       	std	Y+55, r26	; 0x37
    103a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    103c:	6d a9       	ldd	r22, Y+53	; 0x35
    103e:	7e a9       	ldd	r23, Y+54	; 0x36
    1040:	8f a9       	ldd	r24, Y+55	; 0x37
    1042:	98 ad       	ldd	r25, Y+56	; 0x38
    1044:	20 e0       	ldi	r18, 0x00	; 0
    1046:	30 e0       	ldi	r19, 0x00	; 0
    1048:	4a ef       	ldi	r20, 0xFA	; 250
    104a:	54 e4       	ldi	r21, 0x44	; 68
    104c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1050:	dc 01       	movw	r26, r24
    1052:	cb 01       	movw	r24, r22
    1054:	89 ab       	std	Y+49, r24	; 0x31
    1056:	9a ab       	std	Y+50, r25	; 0x32
    1058:	ab ab       	std	Y+51, r26	; 0x33
    105a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    105c:	69 a9       	ldd	r22, Y+49	; 0x31
    105e:	7a a9       	ldd	r23, Y+50	; 0x32
    1060:	8b a9       	ldd	r24, Y+51	; 0x33
    1062:	9c a9       	ldd	r25, Y+52	; 0x34
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	40 e8       	ldi	r20, 0x80	; 128
    106a:	5f e3       	ldi	r21, 0x3F	; 63
    106c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1070:	88 23       	and	r24, r24
    1072:	2c f4       	brge	.+10     	; 0x107e <main+0x538>
		__ticks = 1;
    1074:	81 e0       	ldi	r24, 0x01	; 1
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	98 ab       	std	Y+48, r25	; 0x30
    107a:	8f a7       	std	Y+47, r24	; 0x2f
    107c:	3f c0       	rjmp	.+126    	; 0x10fc <main+0x5b6>
	else if (__tmp > 65535)
    107e:	69 a9       	ldd	r22, Y+49	; 0x31
    1080:	7a a9       	ldd	r23, Y+50	; 0x32
    1082:	8b a9       	ldd	r24, Y+51	; 0x33
    1084:	9c a9       	ldd	r25, Y+52	; 0x34
    1086:	20 e0       	ldi	r18, 0x00	; 0
    1088:	3f ef       	ldi	r19, 0xFF	; 255
    108a:	4f e7       	ldi	r20, 0x7F	; 127
    108c:	57 e4       	ldi	r21, 0x47	; 71
    108e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1092:	18 16       	cp	r1, r24
    1094:	4c f5       	brge	.+82     	; 0x10e8 <main+0x5a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1096:	6d a9       	ldd	r22, Y+53	; 0x35
    1098:	7e a9       	ldd	r23, Y+54	; 0x36
    109a:	8f a9       	ldd	r24, Y+55	; 0x37
    109c:	98 ad       	ldd	r25, Y+56	; 0x38
    109e:	20 e0       	ldi	r18, 0x00	; 0
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	40 e2       	ldi	r20, 0x20	; 32
    10a4:	51 e4       	ldi	r21, 0x41	; 65
    10a6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10aa:	dc 01       	movw	r26, r24
    10ac:	cb 01       	movw	r24, r22
    10ae:	bc 01       	movw	r22, r24
    10b0:	cd 01       	movw	r24, r26
    10b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10b6:	dc 01       	movw	r26, r24
    10b8:	cb 01       	movw	r24, r22
    10ba:	98 ab       	std	Y+48, r25	; 0x30
    10bc:	8f a7       	std	Y+47, r24	; 0x2f
    10be:	0f c0       	rjmp	.+30     	; 0x10de <main+0x598>
    10c0:	88 ec       	ldi	r24, 0xC8	; 200
    10c2:	90 e0       	ldi	r25, 0x00	; 0
    10c4:	9e a7       	std	Y+46, r25	; 0x2e
    10c6:	8d a7       	std	Y+45, r24	; 0x2d
    10c8:	8d a5       	ldd	r24, Y+45	; 0x2d
    10ca:	9e a5       	ldd	r25, Y+46	; 0x2e
    10cc:	01 97       	sbiw	r24, 0x01	; 1
    10ce:	f1 f7       	brne	.-4      	; 0x10cc <main+0x586>
    10d0:	9e a7       	std	Y+46, r25	; 0x2e
    10d2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    10d6:	98 a9       	ldd	r25, Y+48	; 0x30
    10d8:	01 97       	sbiw	r24, 0x01	; 1
    10da:	98 ab       	std	Y+48, r25	; 0x30
    10dc:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10de:	8f a5       	ldd	r24, Y+47	; 0x2f
    10e0:	98 a9       	ldd	r25, Y+48	; 0x30
    10e2:	00 97       	sbiw	r24, 0x00	; 0
    10e4:	69 f7       	brne	.-38     	; 0x10c0 <main+0x57a>
    10e6:	14 c0       	rjmp	.+40     	; 0x1110 <main+0x5ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10e8:	69 a9       	ldd	r22, Y+49	; 0x31
    10ea:	7a a9       	ldd	r23, Y+50	; 0x32
    10ec:	8b a9       	ldd	r24, Y+51	; 0x33
    10ee:	9c a9       	ldd	r25, Y+52	; 0x34
    10f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10f4:	dc 01       	movw	r26, r24
    10f6:	cb 01       	movw	r24, r22
    10f8:	98 ab       	std	Y+48, r25	; 0x30
    10fa:	8f a7       	std	Y+47, r24	; 0x2f
    10fc:	8f a5       	ldd	r24, Y+47	; 0x2f
    10fe:	98 a9       	ldd	r25, Y+48	; 0x30
    1100:	9c a7       	std	Y+44, r25	; 0x2c
    1102:	8b a7       	std	Y+43, r24	; 0x2b
    1104:	8b a5       	ldd	r24, Y+43	; 0x2b
    1106:	9c a5       	ldd	r25, Y+44	; 0x2c
    1108:	01 97       	sbiw	r24, 0x01	; 1
    110a:	f1 f7       	brne	.-4      	; 0x1108 <main+0x5c2>
    110c:	9c a7       	std	Y+44, r25	; 0x2c
    110e:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(500);
#endif

			readFromEEPROM(address_of_EEPROM, EEPROM_password, PASSWORD_SIZE);
    1110:	2e ef       	ldi	r18, 0xFE	; 254
    1112:	30 e0       	ldi	r19, 0x00	; 0
    1114:	81 e0       	ldi	r24, 0x01	; 1
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	b9 01       	movw	r22, r18
    111a:	45 e0       	ldi	r20, 0x05	; 5
    111c:	0e 94 09 0c 	call	0x1812	; 0x1812 <readFromEEPROM>
			compare_passwords_return=compare_passwords(recived_password_1, EEPROM_password);
    1120:	84 ef       	ldi	r24, 0xF4	; 244
    1122:	90 e0       	ldi	r25, 0x00	; 0
    1124:	2e ef       	ldi	r18, 0xFE	; 254
    1126:	30 e0       	ldi	r19, 0x00	; 0
    1128:	b9 01       	movw	r22, r18
    112a:	0e 94 82 0a 	call	0x1504	; 0x1504 <compare_passwords>
    112e:	fe 01       	movw	r30, r28
    1130:	ed 59       	subi	r30, 0x9D	; 157
    1132:	ff 4f       	sbci	r31, 0xFF	; 255
    1134:	80 83       	st	Z, r24


			UART_sendByte(compare_passwords_return);
    1136:	fe 01       	movw	r30, r28
    1138:	ed 59       	subi	r30, 0x9D	; 157
    113a:	ff 4f       	sbci	r31, 0xFF	; 255
    113c:	80 81       	ld	r24, Z
    113e:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <UART_sendByte>


			if(compare_passwords_return==1){	//passwords match
    1142:	fe 01       	movw	r30, r28
    1144:	ed 59       	subi	r30, 0x9D	; 157
    1146:	ff 4f       	sbci	r31, 0xFF	; 255
    1148:	80 81       	ld	r24, Z
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	09 f0       	breq	.+2      	; 0x1150 <main+0x60a>
    114e:	47 c0       	rjmp	.+142    	; 0x11de <main+0x698>
				UART_recievedData=UART_recieveByte();
    1150:	0e 94 12 19 	call	0x3224	; 0x3224 <UART_recieveByte>
    1154:	80 93 f2 00 	sts	0x00F2, r24
				if(UART_recievedData==2){		//motor choice
    1158:	80 91 f2 00 	lds	r24, 0x00F2
    115c:	82 30       	cpi	r24, 0x02	; 2
    115e:	59 f5       	brne	.+86     	; 0x11b6 <main+0x670>
					//do motor stuff
#if (DEBUGGING_MODE == ON)

					LCD_clearScreen();
    1160:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <LCD_clearScreen>
					LCD_displayString("do motor sequence");
    1164:	8d e6       	ldi	r24, 0x6D	; 109
    1166:	90 e0       	ldi	r25, 0x00	; 0
    1168:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_displayString>
#endif

					DCMotor_Rotate(DC_MOTOR_CW, 100);
    116c:	81 e0       	ldi	r24, 0x01	; 1
    116e:	64 e6       	ldi	r22, 0x64	; 100
    1170:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <DCMotor_Rotate>
					Timer_1_delay(15);
    1174:	6f e0       	ldi	r22, 0x0F	; 15
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	80 e0       	ldi	r24, 0x00	; 0
    117a:	90 e0       	ldi	r25, 0x00	; 0
    117c:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Timer_1_delay>
					DCMotor_Rotate(DC_MOTOR_STOP,0);
    1180:	80 e0       	ldi	r24, 0x00	; 0
    1182:	60 e0       	ldi	r22, 0x00	; 0
    1184:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <DCMotor_Rotate>
					Timer_1_delay(3);
    1188:	63 e0       	ldi	r22, 0x03	; 3
    118a:	70 e0       	ldi	r23, 0x00	; 0
    118c:	80 e0       	ldi	r24, 0x00	; 0
    118e:	90 e0       	ldi	r25, 0x00	; 0
    1190:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Timer_1_delay>
					DCMotor_Rotate(DC_MOTOR_ACW, 100);
    1194:	82 e0       	ldi	r24, 0x02	; 2
    1196:	64 e6       	ldi	r22, 0x64	; 100
    1198:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <DCMotor_Rotate>
					Timer_1_delay(15);
    119c:	6f e0       	ldi	r22, 0x0F	; 15
    119e:	70 e0       	ldi	r23, 0x00	; 0
    11a0:	80 e0       	ldi	r24, 0x00	; 0
    11a2:	90 e0       	ldi	r25, 0x00	; 0
    11a4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Timer_1_delay>
					DCMotor_Rotate(DC_MOTOR_STOP,0);
    11a8:	80 e0       	ldi	r24, 0x00	; 0
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	0e 94 2d 0d 	call	0x1a5a	; 0x1a5a <DCMotor_Rotate>
					LCD_clearScreen();
    11b0:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <LCD_clearScreen>
    11b4:	ee cc       	rjmp	.-1572   	; 0xb92 <main+0x4c>

				}else if(UART_recievedData==1){	//change password choice
    11b6:	80 91 f2 00 	lds	r24, 0x00F2
    11ba:	81 30       	cpi	r24, 0x01	; 1
    11bc:	09 f0       	breq	.+2      	; 0x11c0 <main+0x67a>
    11be:	e9 cc       	rjmp	.-1582   	; 0xb92 <main+0x4c>
					//change password
#if (DEBUGGING_MODE == ON)

					LCD_clearScreen();
    11c0:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <LCD_clearScreen>
					LCD_displayString("changing password");
    11c4:	8f e7       	ldi	r24, 0x7F	; 127
    11c6:	90 e0       	ldi	r25, 0x00	; 0
    11c8:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_displayString>
					Timer_1_delay(1);
    11cc:	61 e0       	ldi	r22, 0x01	; 1
    11ce:	70 e0       	ldi	r23, 0x00	; 0
    11d0:	80 e0       	ldi	r24, 0x00	; 0
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Timer_1_delay>
#endif

					control_stage=0;
    11d8:	10 92 f0 00 	sts	0x00F0, r1
    11dc:	da cc       	rjmp	.-1612   	; 0xb92 <main+0x4c>
				}

			}
			else{							//passwords dont match
				worng_password_counter++;
    11de:	80 91 f3 00 	lds	r24, 0x00F3
    11e2:	8f 5f       	subi	r24, 0xFF	; 255
    11e4:	80 93 f3 00 	sts	0x00F3, r24

				if(worng_password_counter==3){
    11e8:	80 91 f3 00 	lds	r24, 0x00F3
    11ec:	83 30       	cpi	r24, 0x03	; 3
    11ee:	09 f0       	breq	.+2      	; 0x11f2 <main+0x6ac>
    11f0:	76 c0       	rjmp	.+236    	; 0x12de <main+0x798>
					control_stage=2;
    11f2:	82 e0       	ldi	r24, 0x02	; 2
    11f4:	80 93 f0 00 	sts	0x00F0, r24
    11f8:	80 e0       	ldi	r24, 0x00	; 0
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	aa e7       	ldi	r26, 0x7A	; 122
    11fe:	b4 e4       	ldi	r27, 0x44	; 68
    1200:	8f a3       	std	Y+39, r24	; 0x27
    1202:	98 a7       	std	Y+40, r25	; 0x28
    1204:	a9 a7       	std	Y+41, r26	; 0x29
    1206:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1208:	6f a1       	ldd	r22, Y+39	; 0x27
    120a:	78 a5       	ldd	r23, Y+40	; 0x28
    120c:	89 a5       	ldd	r24, Y+41	; 0x29
    120e:	9a a5       	ldd	r25, Y+42	; 0x2a
    1210:	20 e0       	ldi	r18, 0x00	; 0
    1212:	30 e0       	ldi	r19, 0x00	; 0
    1214:	4a ef       	ldi	r20, 0xFA	; 250
    1216:	54 e4       	ldi	r21, 0x44	; 68
    1218:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    121c:	dc 01       	movw	r26, r24
    121e:	cb 01       	movw	r24, r22
    1220:	8b a3       	std	Y+35, r24	; 0x23
    1222:	9c a3       	std	Y+36, r25	; 0x24
    1224:	ad a3       	std	Y+37, r26	; 0x25
    1226:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1228:	6b a1       	ldd	r22, Y+35	; 0x23
    122a:	7c a1       	ldd	r23, Y+36	; 0x24
    122c:	8d a1       	ldd	r24, Y+37	; 0x25
    122e:	9e a1       	ldd	r25, Y+38	; 0x26
    1230:	20 e0       	ldi	r18, 0x00	; 0
    1232:	30 e0       	ldi	r19, 0x00	; 0
    1234:	40 e8       	ldi	r20, 0x80	; 128
    1236:	5f e3       	ldi	r21, 0x3F	; 63
    1238:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    123c:	88 23       	and	r24, r24
    123e:	2c f4       	brge	.+10     	; 0x124a <main+0x704>
		__ticks = 1;
    1240:	81 e0       	ldi	r24, 0x01	; 1
    1242:	90 e0       	ldi	r25, 0x00	; 0
    1244:	9a a3       	std	Y+34, r25	; 0x22
    1246:	89 a3       	std	Y+33, r24	; 0x21
    1248:	3f c0       	rjmp	.+126    	; 0x12c8 <main+0x782>
	else if (__tmp > 65535)
    124a:	6b a1       	ldd	r22, Y+35	; 0x23
    124c:	7c a1       	ldd	r23, Y+36	; 0x24
    124e:	8d a1       	ldd	r24, Y+37	; 0x25
    1250:	9e a1       	ldd	r25, Y+38	; 0x26
    1252:	20 e0       	ldi	r18, 0x00	; 0
    1254:	3f ef       	ldi	r19, 0xFF	; 255
    1256:	4f e7       	ldi	r20, 0x7F	; 127
    1258:	57 e4       	ldi	r21, 0x47	; 71
    125a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    125e:	18 16       	cp	r1, r24
    1260:	4c f5       	brge	.+82     	; 0x12b4 <main+0x76e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1262:	6f a1       	ldd	r22, Y+39	; 0x27
    1264:	78 a5       	ldd	r23, Y+40	; 0x28
    1266:	89 a5       	ldd	r24, Y+41	; 0x29
    1268:	9a a5       	ldd	r25, Y+42	; 0x2a
    126a:	20 e0       	ldi	r18, 0x00	; 0
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	40 e2       	ldi	r20, 0x20	; 32
    1270:	51 e4       	ldi	r21, 0x41	; 65
    1272:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1276:	dc 01       	movw	r26, r24
    1278:	cb 01       	movw	r24, r22
    127a:	bc 01       	movw	r22, r24
    127c:	cd 01       	movw	r24, r26
    127e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1282:	dc 01       	movw	r26, r24
    1284:	cb 01       	movw	r24, r22
    1286:	9a a3       	std	Y+34, r25	; 0x22
    1288:	89 a3       	std	Y+33, r24	; 0x21
    128a:	0f c0       	rjmp	.+30     	; 0x12aa <main+0x764>
    128c:	88 ec       	ldi	r24, 0xC8	; 200
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	98 a3       	std	Y+32, r25	; 0x20
    1292:	8f 8f       	std	Y+31, r24	; 0x1f
    1294:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1296:	98 a1       	ldd	r25, Y+32	; 0x20
    1298:	01 97       	sbiw	r24, 0x01	; 1
    129a:	f1 f7       	brne	.-4      	; 0x1298 <main+0x752>
    129c:	98 a3       	std	Y+32, r25	; 0x20
    129e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12a0:	89 a1       	ldd	r24, Y+33	; 0x21
    12a2:	9a a1       	ldd	r25, Y+34	; 0x22
    12a4:	01 97       	sbiw	r24, 0x01	; 1
    12a6:	9a a3       	std	Y+34, r25	; 0x22
    12a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12aa:	89 a1       	ldd	r24, Y+33	; 0x21
    12ac:	9a a1       	ldd	r25, Y+34	; 0x22
    12ae:	00 97       	sbiw	r24, 0x00	; 0
    12b0:	69 f7       	brne	.-38     	; 0x128c <main+0x746>
    12b2:	6f cc       	rjmp	.-1826   	; 0xb92 <main+0x4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    12b4:	6b a1       	ldd	r22, Y+35	; 0x23
    12b6:	7c a1       	ldd	r23, Y+36	; 0x24
    12b8:	8d a1       	ldd	r24, Y+37	; 0x25
    12ba:	9e a1       	ldd	r25, Y+38	; 0x26
    12bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12c0:	dc 01       	movw	r26, r24
    12c2:	cb 01       	movw	r24, r22
    12c4:	9a a3       	std	Y+34, r25	; 0x22
    12c6:	89 a3       	std	Y+33, r24	; 0x21
    12c8:	89 a1       	ldd	r24, Y+33	; 0x21
    12ca:	9a a1       	ldd	r25, Y+34	; 0x22
    12cc:	9e 8f       	std	Y+30, r25	; 0x1e
    12ce:	8d 8f       	std	Y+29, r24	; 0x1d
    12d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    12d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    12d4:	01 97       	sbiw	r24, 0x01	; 1
    12d6:	f1 f7       	brne	.-4      	; 0x12d4 <main+0x78e>
    12d8:	9e 8f       	std	Y+30, r25	; 0x1e
    12da:	8d 8f       	std	Y+29, r24	; 0x1d
    12dc:	5a cc       	rjmp	.-1868   	; 0xb92 <main+0x4c>

					break;
				}
#if (DEBUGGING_MODE == ON)

				LCD_clearScreen();
    12de:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <LCD_clearScreen>
				LCD_displayString("wrong");
    12e2:	81 e9       	ldi	r24, 0x91	; 145
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_displayString>
				LCD_moveCursor(1, 0);
    12ea:	81 e0       	ldi	r24, 0x01	; 1
    12ec:	60 e0       	ldi	r22, 0x00	; 0
    12ee:	0e 94 f5 15 	call	0x2bea	; 0x2bea <LCD_moveCursor>
				LCD_intgerToString(worng_password_counter);
    12f2:	80 91 f3 00 	lds	r24, 0x00F3
    12f6:	88 2f       	mov	r24, r24
    12f8:	90 e0       	ldi	r25, 0x00	; 0
    12fa:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_intgerToString>
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	aa e7       	ldi	r26, 0x7A	; 122
    1304:	b4 e4       	ldi	r27, 0x44	; 68
    1306:	89 8f       	std	Y+25, r24	; 0x19
    1308:	9a 8f       	std	Y+26, r25	; 0x1a
    130a:	ab 8f       	std	Y+27, r26	; 0x1b
    130c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    130e:	69 8d       	ldd	r22, Y+25	; 0x19
    1310:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1312:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1314:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1316:	20 e0       	ldi	r18, 0x00	; 0
    1318:	30 e0       	ldi	r19, 0x00	; 0
    131a:	4a ef       	ldi	r20, 0xFA	; 250
    131c:	54 e4       	ldi	r21, 0x44	; 68
    131e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1322:	dc 01       	movw	r26, r24
    1324:	cb 01       	movw	r24, r22
    1326:	8d 8b       	std	Y+21, r24	; 0x15
    1328:	9e 8b       	std	Y+22, r25	; 0x16
    132a:	af 8b       	std	Y+23, r26	; 0x17
    132c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    132e:	6d 89       	ldd	r22, Y+21	; 0x15
    1330:	7e 89       	ldd	r23, Y+22	; 0x16
    1332:	8f 89       	ldd	r24, Y+23	; 0x17
    1334:	98 8d       	ldd	r25, Y+24	; 0x18
    1336:	20 e0       	ldi	r18, 0x00	; 0
    1338:	30 e0       	ldi	r19, 0x00	; 0
    133a:	40 e8       	ldi	r20, 0x80	; 128
    133c:	5f e3       	ldi	r21, 0x3F	; 63
    133e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1342:	88 23       	and	r24, r24
    1344:	2c f4       	brge	.+10     	; 0x1350 <main+0x80a>
		__ticks = 1;
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	9c 8b       	std	Y+20, r25	; 0x14
    134c:	8b 8b       	std	Y+19, r24	; 0x13
    134e:	3f c0       	rjmp	.+126    	; 0x13ce <main+0x888>
	else if (__tmp > 65535)
    1350:	6d 89       	ldd	r22, Y+21	; 0x15
    1352:	7e 89       	ldd	r23, Y+22	; 0x16
    1354:	8f 89       	ldd	r24, Y+23	; 0x17
    1356:	98 8d       	ldd	r25, Y+24	; 0x18
    1358:	20 e0       	ldi	r18, 0x00	; 0
    135a:	3f ef       	ldi	r19, 0xFF	; 255
    135c:	4f e7       	ldi	r20, 0x7F	; 127
    135e:	57 e4       	ldi	r21, 0x47	; 71
    1360:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1364:	18 16       	cp	r1, r24
    1366:	4c f5       	brge	.+82     	; 0x13ba <main+0x874>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1368:	69 8d       	ldd	r22, Y+25	; 0x19
    136a:	7a 8d       	ldd	r23, Y+26	; 0x1a
    136c:	8b 8d       	ldd	r24, Y+27	; 0x1b
    136e:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1370:	20 e0       	ldi	r18, 0x00	; 0
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	40 e2       	ldi	r20, 0x20	; 32
    1376:	51 e4       	ldi	r21, 0x41	; 65
    1378:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    137c:	dc 01       	movw	r26, r24
    137e:	cb 01       	movw	r24, r22
    1380:	bc 01       	movw	r22, r24
    1382:	cd 01       	movw	r24, r26
    1384:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	9c 8b       	std	Y+20, r25	; 0x14
    138e:	8b 8b       	std	Y+19, r24	; 0x13
    1390:	0f c0       	rjmp	.+30     	; 0x13b0 <main+0x86a>
    1392:	88 ec       	ldi	r24, 0xC8	; 200
    1394:	90 e0       	ldi	r25, 0x00	; 0
    1396:	9a 8b       	std	Y+18, r25	; 0x12
    1398:	89 8b       	std	Y+17, r24	; 0x11
    139a:	89 89       	ldd	r24, Y+17	; 0x11
    139c:	9a 89       	ldd	r25, Y+18	; 0x12
    139e:	01 97       	sbiw	r24, 0x01	; 1
    13a0:	f1 f7       	brne	.-4      	; 0x139e <main+0x858>
    13a2:	9a 8b       	std	Y+18, r25	; 0x12
    13a4:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13a6:	8b 89       	ldd	r24, Y+19	; 0x13
    13a8:	9c 89       	ldd	r25, Y+20	; 0x14
    13aa:	01 97       	sbiw	r24, 0x01	; 1
    13ac:	9c 8b       	std	Y+20, r25	; 0x14
    13ae:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13b0:	8b 89       	ldd	r24, Y+19	; 0x13
    13b2:	9c 89       	ldd	r25, Y+20	; 0x14
    13b4:	00 97       	sbiw	r24, 0x00	; 0
    13b6:	69 f7       	brne	.-38     	; 0x1392 <main+0x84c>
    13b8:	ec cb       	rjmp	.-2088   	; 0xb92 <main+0x4c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13ba:	6d 89       	ldd	r22, Y+21	; 0x15
    13bc:	7e 89       	ldd	r23, Y+22	; 0x16
    13be:	8f 89       	ldd	r24, Y+23	; 0x17
    13c0:	98 8d       	ldd	r25, Y+24	; 0x18
    13c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c6:	dc 01       	movw	r26, r24
    13c8:	cb 01       	movw	r24, r22
    13ca:	9c 8b       	std	Y+20, r25	; 0x14
    13cc:	8b 8b       	std	Y+19, r24	; 0x13
    13ce:	8b 89       	ldd	r24, Y+19	; 0x13
    13d0:	9c 89       	ldd	r25, Y+20	; 0x14
    13d2:	98 8b       	std	Y+16, r25	; 0x10
    13d4:	8f 87       	std	Y+15, r24	; 0x0f
    13d6:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d8:	98 89       	ldd	r25, Y+16	; 0x10
    13da:	01 97       	sbiw	r24, 0x01	; 1
    13dc:	f1 f7       	brne	.-4      	; 0x13da <main+0x894>
    13de:	98 8b       	std	Y+16, r25	; 0x10
    13e0:	8f 87       	std	Y+15, r24	; 0x0f
    13e2:	d7 cb       	rjmp	.-2130   	; 0xb92 <main+0x4c>
			break;

		case 2:							//Alarm state
#if (DEBUGGING_MODE == ON)

			LCD_clearScreen();
    13e4:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <LCD_clearScreen>
			LCD_displayString("Alarm");
    13e8:	87 e9       	ldi	r24, 0x97	; 151
    13ea:	90 e0       	ldi	r25, 0x00	; 0
    13ec:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_displayString>
    13f0:	80 e0       	ldi	r24, 0x00	; 0
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	aa e7       	ldi	r26, 0x7A	; 122
    13f6:	b4 e4       	ldi	r27, 0x44	; 68
    13f8:	8b 87       	std	Y+11, r24	; 0x0b
    13fa:	9c 87       	std	Y+12, r25	; 0x0c
    13fc:	ad 87       	std	Y+13, r26	; 0x0d
    13fe:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1400:	6b 85       	ldd	r22, Y+11	; 0x0b
    1402:	7c 85       	ldd	r23, Y+12	; 0x0c
    1404:	8d 85       	ldd	r24, Y+13	; 0x0d
    1406:	9e 85       	ldd	r25, Y+14	; 0x0e
    1408:	20 e0       	ldi	r18, 0x00	; 0
    140a:	30 e0       	ldi	r19, 0x00	; 0
    140c:	4a ef       	ldi	r20, 0xFA	; 250
    140e:	54 e4       	ldi	r21, 0x44	; 68
    1410:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1414:	dc 01       	movw	r26, r24
    1416:	cb 01       	movw	r24, r22
    1418:	8f 83       	std	Y+7, r24	; 0x07
    141a:	98 87       	std	Y+8, r25	; 0x08
    141c:	a9 87       	std	Y+9, r26	; 0x09
    141e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1420:	6f 81       	ldd	r22, Y+7	; 0x07
    1422:	78 85       	ldd	r23, Y+8	; 0x08
    1424:	89 85       	ldd	r24, Y+9	; 0x09
    1426:	9a 85       	ldd	r25, Y+10	; 0x0a
    1428:	20 e0       	ldi	r18, 0x00	; 0
    142a:	30 e0       	ldi	r19, 0x00	; 0
    142c:	40 e8       	ldi	r20, 0x80	; 128
    142e:	5f e3       	ldi	r21, 0x3F	; 63
    1430:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1434:	88 23       	and	r24, r24
    1436:	2c f4       	brge	.+10     	; 0x1442 <main+0x8fc>
		__ticks = 1;
    1438:	81 e0       	ldi	r24, 0x01	; 1
    143a:	90 e0       	ldi	r25, 0x00	; 0
    143c:	9e 83       	std	Y+6, r25	; 0x06
    143e:	8d 83       	std	Y+5, r24	; 0x05
    1440:	3f c0       	rjmp	.+126    	; 0x14c0 <main+0x97a>
	else if (__tmp > 65535)
    1442:	6f 81       	ldd	r22, Y+7	; 0x07
    1444:	78 85       	ldd	r23, Y+8	; 0x08
    1446:	89 85       	ldd	r24, Y+9	; 0x09
    1448:	9a 85       	ldd	r25, Y+10	; 0x0a
    144a:	20 e0       	ldi	r18, 0x00	; 0
    144c:	3f ef       	ldi	r19, 0xFF	; 255
    144e:	4f e7       	ldi	r20, 0x7F	; 127
    1450:	57 e4       	ldi	r21, 0x47	; 71
    1452:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1456:	18 16       	cp	r1, r24
    1458:	4c f5       	brge	.+82     	; 0x14ac <main+0x966>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    145a:	6b 85       	ldd	r22, Y+11	; 0x0b
    145c:	7c 85       	ldd	r23, Y+12	; 0x0c
    145e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1460:	9e 85       	ldd	r25, Y+14	; 0x0e
    1462:	20 e0       	ldi	r18, 0x00	; 0
    1464:	30 e0       	ldi	r19, 0x00	; 0
    1466:	40 e2       	ldi	r20, 0x20	; 32
    1468:	51 e4       	ldi	r21, 0x41	; 65
    146a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    146e:	dc 01       	movw	r26, r24
    1470:	cb 01       	movw	r24, r22
    1472:	bc 01       	movw	r22, r24
    1474:	cd 01       	movw	r24, r26
    1476:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    147a:	dc 01       	movw	r26, r24
    147c:	cb 01       	movw	r24, r22
    147e:	9e 83       	std	Y+6, r25	; 0x06
    1480:	8d 83       	std	Y+5, r24	; 0x05
    1482:	0f c0       	rjmp	.+30     	; 0x14a2 <main+0x95c>
    1484:	88 ec       	ldi	r24, 0xC8	; 200
    1486:	90 e0       	ldi	r25, 0x00	; 0
    1488:	9c 83       	std	Y+4, r25	; 0x04
    148a:	8b 83       	std	Y+3, r24	; 0x03
    148c:	8b 81       	ldd	r24, Y+3	; 0x03
    148e:	9c 81       	ldd	r25, Y+4	; 0x04
    1490:	01 97       	sbiw	r24, 0x01	; 1
    1492:	f1 f7       	brne	.-4      	; 0x1490 <main+0x94a>
    1494:	9c 83       	std	Y+4, r25	; 0x04
    1496:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1498:	8d 81       	ldd	r24, Y+5	; 0x05
    149a:	9e 81       	ldd	r25, Y+6	; 0x06
    149c:	01 97       	sbiw	r24, 0x01	; 1
    149e:	9e 83       	std	Y+6, r25	; 0x06
    14a0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    14a2:	8d 81       	ldd	r24, Y+5	; 0x05
    14a4:	9e 81       	ldd	r25, Y+6	; 0x06
    14a6:	00 97       	sbiw	r24, 0x00	; 0
    14a8:	69 f7       	brne	.-38     	; 0x1484 <main+0x93e>
    14aa:	14 c0       	rjmp	.+40     	; 0x14d4 <main+0x98e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    14ac:	6f 81       	ldd	r22, Y+7	; 0x07
    14ae:	78 85       	ldd	r23, Y+8	; 0x08
    14b0:	89 85       	ldd	r24, Y+9	; 0x09
    14b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    14b4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14b8:	dc 01       	movw	r26, r24
    14ba:	cb 01       	movw	r24, r22
    14bc:	9e 83       	std	Y+6, r25	; 0x06
    14be:	8d 83       	std	Y+5, r24	; 0x05
    14c0:	8d 81       	ldd	r24, Y+5	; 0x05
    14c2:	9e 81       	ldd	r25, Y+6	; 0x06
    14c4:	9a 83       	std	Y+2, r25	; 0x02
    14c6:	89 83       	std	Y+1, r24	; 0x01
    14c8:	89 81       	ldd	r24, Y+1	; 0x01
    14ca:	9a 81       	ldd	r25, Y+2	; 0x02
    14cc:	01 97       	sbiw	r24, 0x01	; 1
    14ce:	f1 f7       	brne	.-4      	; 0x14cc <main+0x986>
    14d0:	9a 83       	std	Y+2, r25	; 0x02
    14d2:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
#endif

			Buzzer_on();
    14d4:	0e 94 fa 0c 	call	0x19f4	; 0x19f4 <Buzzer_on>
			//timer
			Timer_1_delay(6);
    14d8:	66 e0       	ldi	r22, 0x06	; 6
    14da:	70 e0       	ldi	r23, 0x00	; 0
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
    14e0:	0e 94 b1 0c 	call	0x1962	; 0x1962 <Timer_1_delay>
			Buzzer_off();
    14e4:	0e 94 06 0d 	call	0x1a0c	; 0x1a0c <Buzzer_off>
			//then
			control_stage = 1;
    14e8:	81 e0       	ldi	r24, 0x01	; 1
    14ea:	80 93 f0 00 	sts	0x00F0, r24
			worng_password_counter=0;
    14ee:	10 92 f3 00 	sts	0x00F3, r1
			LCD_clearScreen();
    14f2:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <LCD_clearScreen>
			control_stage=1;
    14f6:	81 e0       	ldi	r24, 0x01	; 1
    14f8:	80 93 f0 00 	sts	0x00F0, r24
			UART_sendByte(1); //alarm has elapsed
    14fc:	81 e0       	ldi	r24, 0x01	; 1
    14fe:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <UART_sendByte>
    1502:	47 cb       	rjmp	.-2418   	; 0xb92 <main+0x4c>

00001504 <compare_passwords>:
		}
	}

}

uint8 compare_passwords(uint8 *compared_password_1, uint8 *compared_password_2){
    1504:	df 93       	push	r29
    1506:	cf 93       	push	r28
    1508:	cd b7       	in	r28, 0x3d	; 61
    150a:	de b7       	in	r29, 0x3e	; 62
    150c:	64 97       	sbiw	r28, 0x14	; 20
    150e:	0f b6       	in	r0, 0x3f	; 63
    1510:	f8 94       	cli
    1512:	de bf       	out	0x3e, r29	; 62
    1514:	0f be       	out	0x3f, r0	; 63
    1516:	cd bf       	out	0x3d, r28	; 61
    1518:	99 8b       	std	Y+17, r25	; 0x11
    151a:	88 8b       	std	Y+16, r24	; 0x10
    151c:	7b 8b       	std	Y+19, r23	; 0x13
    151e:	6a 8b       	std	Y+18, r22	; 0x12
	uint8 i;
#if (DEBUGGING_MODE == ON)

	LCD_clearScreen();
    1520:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <LCD_clearScreen>
	LCD_displayString("comparing");
    1524:	8d e9       	ldi	r24, 0x9D	; 157
    1526:	90 e0       	ldi	r25, 0x00	; 0
    1528:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_displayString>
	LCD_displayStringRowColumn(1, 0, "passwords");
    152c:	27 ea       	ldi	r18, 0xA7	; 167
    152e:	30 e0       	ldi	r19, 0x00	; 0
    1530:	81 e0       	ldi	r24, 0x01	; 1
    1532:	60 e0       	ldi	r22, 0x00	; 0
    1534:	a9 01       	movw	r20, r18
    1536:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <LCD_displayStringRowColumn>
    153a:	80 e0       	ldi	r24, 0x00	; 0
    153c:	90 e0       	ldi	r25, 0x00	; 0
    153e:	aa e7       	ldi	r26, 0x7A	; 122
    1540:	b4 e4       	ldi	r27, 0x44	; 68
    1542:	8b 87       	std	Y+11, r24	; 0x0b
    1544:	9c 87       	std	Y+12, r25	; 0x0c
    1546:	ad 87       	std	Y+13, r26	; 0x0d
    1548:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    154a:	6b 85       	ldd	r22, Y+11	; 0x0b
    154c:	7c 85       	ldd	r23, Y+12	; 0x0c
    154e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1550:	9e 85       	ldd	r25, Y+14	; 0x0e
    1552:	20 e0       	ldi	r18, 0x00	; 0
    1554:	30 e0       	ldi	r19, 0x00	; 0
    1556:	4a ef       	ldi	r20, 0xFA	; 250
    1558:	54 e4       	ldi	r21, 0x44	; 68
    155a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    155e:	dc 01       	movw	r26, r24
    1560:	cb 01       	movw	r24, r22
    1562:	8f 83       	std	Y+7, r24	; 0x07
    1564:	98 87       	std	Y+8, r25	; 0x08
    1566:	a9 87       	std	Y+9, r26	; 0x09
    1568:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    156a:	6f 81       	ldd	r22, Y+7	; 0x07
    156c:	78 85       	ldd	r23, Y+8	; 0x08
    156e:	89 85       	ldd	r24, Y+9	; 0x09
    1570:	9a 85       	ldd	r25, Y+10	; 0x0a
    1572:	20 e0       	ldi	r18, 0x00	; 0
    1574:	30 e0       	ldi	r19, 0x00	; 0
    1576:	40 e8       	ldi	r20, 0x80	; 128
    1578:	5f e3       	ldi	r21, 0x3F	; 63
    157a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    157e:	88 23       	and	r24, r24
    1580:	2c f4       	brge	.+10     	; 0x158c <compare_passwords+0x88>
		__ticks = 1;
    1582:	81 e0       	ldi	r24, 0x01	; 1
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	9e 83       	std	Y+6, r25	; 0x06
    1588:	8d 83       	std	Y+5, r24	; 0x05
    158a:	3f c0       	rjmp	.+126    	; 0x160a <compare_passwords+0x106>
	else if (__tmp > 65535)
    158c:	6f 81       	ldd	r22, Y+7	; 0x07
    158e:	78 85       	ldd	r23, Y+8	; 0x08
    1590:	89 85       	ldd	r24, Y+9	; 0x09
    1592:	9a 85       	ldd	r25, Y+10	; 0x0a
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	3f ef       	ldi	r19, 0xFF	; 255
    1598:	4f e7       	ldi	r20, 0x7F	; 127
    159a:	57 e4       	ldi	r21, 0x47	; 71
    159c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15a0:	18 16       	cp	r1, r24
    15a2:	4c f5       	brge	.+82     	; 0x15f6 <compare_passwords+0xf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15a4:	6b 85       	ldd	r22, Y+11	; 0x0b
    15a6:	7c 85       	ldd	r23, Y+12	; 0x0c
    15a8:	8d 85       	ldd	r24, Y+13	; 0x0d
    15aa:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	30 e0       	ldi	r19, 0x00	; 0
    15b0:	40 e2       	ldi	r20, 0x20	; 32
    15b2:	51 e4       	ldi	r21, 0x41	; 65
    15b4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15b8:	dc 01       	movw	r26, r24
    15ba:	cb 01       	movw	r24, r22
    15bc:	bc 01       	movw	r22, r24
    15be:	cd 01       	movw	r24, r26
    15c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c4:	dc 01       	movw	r26, r24
    15c6:	cb 01       	movw	r24, r22
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	8d 83       	std	Y+5, r24	; 0x05
    15cc:	0f c0       	rjmp	.+30     	; 0x15ec <compare_passwords+0xe8>
    15ce:	88 ec       	ldi	r24, 0xC8	; 200
    15d0:	90 e0       	ldi	r25, 0x00	; 0
    15d2:	9c 83       	std	Y+4, r25	; 0x04
    15d4:	8b 83       	std	Y+3, r24	; 0x03
    15d6:	8b 81       	ldd	r24, Y+3	; 0x03
    15d8:	9c 81       	ldd	r25, Y+4	; 0x04
    15da:	01 97       	sbiw	r24, 0x01	; 1
    15dc:	f1 f7       	brne	.-4      	; 0x15da <compare_passwords+0xd6>
    15de:	9c 83       	std	Y+4, r25	; 0x04
    15e0:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    15e2:	8d 81       	ldd	r24, Y+5	; 0x05
    15e4:	9e 81       	ldd	r25, Y+6	; 0x06
    15e6:	01 97       	sbiw	r24, 0x01	; 1
    15e8:	9e 83       	std	Y+6, r25	; 0x06
    15ea:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    15ec:	8d 81       	ldd	r24, Y+5	; 0x05
    15ee:	9e 81       	ldd	r25, Y+6	; 0x06
    15f0:	00 97       	sbiw	r24, 0x00	; 0
    15f2:	69 f7       	brne	.-38     	; 0x15ce <compare_passwords+0xca>
    15f4:	14 c0       	rjmp	.+40     	; 0x161e <compare_passwords+0x11a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15f6:	6f 81       	ldd	r22, Y+7	; 0x07
    15f8:	78 85       	ldd	r23, Y+8	; 0x08
    15fa:	89 85       	ldd	r24, Y+9	; 0x09
    15fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    15fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1602:	dc 01       	movw	r26, r24
    1604:	cb 01       	movw	r24, r22
    1606:	9e 83       	std	Y+6, r25	; 0x06
    1608:	8d 83       	std	Y+5, r24	; 0x05
    160a:	8d 81       	ldd	r24, Y+5	; 0x05
    160c:	9e 81       	ldd	r25, Y+6	; 0x06
    160e:	9a 83       	std	Y+2, r25	; 0x02
    1610:	89 83       	std	Y+1, r24	; 0x01
    1612:	89 81       	ldd	r24, Y+1	; 0x01
    1614:	9a 81       	ldd	r25, Y+2	; 0x02
    1616:	01 97       	sbiw	r24, 0x01	; 1
    1618:	f1 f7       	brne	.-4      	; 0x1616 <compare_passwords+0x112>
    161a:	9a 83       	std	Y+2, r25	; 0x02
    161c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1000);
	LCD_clearScreen();
    161e:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <LCD_clearScreen>

#endif

	for(i=0;i<PASSWORD_SIZE;i++){
    1622:	1f 86       	std	Y+15, r1	; 0x0f
    1624:	26 c0       	rjmp	.+76     	; 0x1672 <compare_passwords+0x16e>
		if(compared_password_1[i]!=compared_password_2[i]){
    1626:	8f 85       	ldd	r24, Y+15	; 0x0f
    1628:	28 2f       	mov	r18, r24
    162a:	30 e0       	ldi	r19, 0x00	; 0
    162c:	88 89       	ldd	r24, Y+16	; 0x10
    162e:	99 89       	ldd	r25, Y+17	; 0x11
    1630:	fc 01       	movw	r30, r24
    1632:	e2 0f       	add	r30, r18
    1634:	f3 1f       	adc	r31, r19
    1636:	40 81       	ld	r20, Z
    1638:	8f 85       	ldd	r24, Y+15	; 0x0f
    163a:	28 2f       	mov	r18, r24
    163c:	30 e0       	ldi	r19, 0x00	; 0
    163e:	8a 89       	ldd	r24, Y+18	; 0x12
    1640:	9b 89       	ldd	r25, Y+19	; 0x13
    1642:	fc 01       	movw	r30, r24
    1644:	e2 0f       	add	r30, r18
    1646:	f3 1f       	adc	r31, r19
    1648:	80 81       	ld	r24, Z
    164a:	48 17       	cp	r20, r24
    164c:	79 f0       	breq	.+30     	; 0x166c <compare_passwords+0x168>
#if (DEBUGGING_MODE == ON)

			LCD_clearScreen();
    164e:	0e 94 73 16 	call	0x2ce6	; 0x2ce6 <LCD_clearScreen>
			LCD_displayString("passwords don't");
    1652:	81 eb       	ldi	r24, 0xB1	; 177
    1654:	90 e0       	ldi	r25, 0x00	; 0
    1656:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_displayString>
			LCD_displayStringRowColumn(1, 0, "match");
    165a:	21 ec       	ldi	r18, 0xC1	; 193
    165c:	30 e0       	ldi	r19, 0x00	; 0
    165e:	81 e0       	ldi	r24, 0x01	; 1
    1660:	60 e0       	ldi	r22, 0x00	; 0
    1662:	a9 01       	movw	r20, r18
    1664:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <LCD_displayStringRowColumn>
#endif

			return 0;
    1668:	1c 8a       	std	Y+20, r1	; 0x14
    166a:	1f c0       	rjmp	.+62     	; 0x16aa <compare_passwords+0x1a6>
	_delay_ms(1000);
	LCD_clearScreen();

#endif

	for(i=0;i<PASSWORD_SIZE;i++){
    166c:	8f 85       	ldd	r24, Y+15	; 0x0f
    166e:	8f 5f       	subi	r24, 0xFF	; 255
    1670:	8f 87       	std	Y+15, r24	; 0x0f
    1672:	8f 85       	ldd	r24, Y+15	; 0x0f
    1674:	85 30       	cpi	r24, 0x05	; 5
    1676:	b8 f2       	brcs	.-82     	; 0x1626 <compare_passwords+0x122>
			//continue and do nothing
		}
	}
#if (DEBUGGING_MODE == ON)

	LCD_displayString("passwords match");
    1678:	87 ec       	ldi	r24, 0xC7	; 199
    167a:	90 e0       	ldi	r25, 0x00	; 0
    167c:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_displayString>
#endif

	if(control_stage==0){
    1680:	80 91 f0 00 	lds	r24, 0x00F0
    1684:	88 23       	and	r24, r24
    1686:	41 f4       	brne	.+16     	; 0x1698 <compare_passwords+0x194>
		//save one of them to eeprom if they match
		saveToEEPROM(address_of_EEPROM,compared_password_1,PASSWORD_SIZE);
    1688:	28 89       	ldd	r18, Y+16	; 0x10
    168a:	39 89       	ldd	r19, Y+17	; 0x11
    168c:	81 e0       	ldi	r24, 0x01	; 1
    168e:	90 e0       	ldi	r25, 0x00	; 0
    1690:	b9 01       	movw	r22, r18
    1692:	45 e0       	ldi	r20, 0x05	; 5
    1694:	0e 94 5f 0b 	call	0x16be	; 0x16be <saveToEEPROM>

		//		for(i=0;i<PASSWORD_SIZE;i++){
		//			EEPROM_password[i]=compared_password_1[i];
		//		}
	}
	if(worng_password_counter==2){
    1698:	80 91 f3 00 	lds	r24, 0x00F3
    169c:	82 30       	cpi	r24, 0x02	; 2
    169e:	19 f4       	brne	.+6      	; 0x16a6 <compare_passwords+0x1a2>
		return 2;
    16a0:	82 e0       	ldi	r24, 0x02	; 2
    16a2:	8c 8b       	std	Y+20, r24	; 0x14
    16a4:	02 c0       	rjmp	.+4      	; 0x16aa <compare_passwords+0x1a6>
	}


	return 1;
    16a6:	81 e0       	ldi	r24, 0x01	; 1
    16a8:	8c 8b       	std	Y+20, r24	; 0x14
    16aa:	8c 89       	ldd	r24, Y+20	; 0x14
}
    16ac:	64 96       	adiw	r28, 0x14	; 20
    16ae:	0f b6       	in	r0, 0x3f	; 63
    16b0:	f8 94       	cli
    16b2:	de bf       	out	0x3e, r29	; 62
    16b4:	0f be       	out	0x3f, r0	; 63
    16b6:	cd bf       	out	0x3d, r28	; 61
    16b8:	cf 91       	pop	r28
    16ba:	df 91       	pop	r29
    16bc:	08 95       	ret

000016be <saveToEEPROM>:



void saveToEEPROM(uint16 first_address , uint8 *arr,uint8 size){
    16be:	df 93       	push	r29
    16c0:	cf 93       	push	r28
    16c2:	cd b7       	in	r28, 0x3d	; 61
    16c4:	de b7       	in	r29, 0x3e	; 62
    16c6:	64 97       	sbiw	r28, 0x14	; 20
    16c8:	0f b6       	in	r0, 0x3f	; 63
    16ca:	f8 94       	cli
    16cc:	de bf       	out	0x3e, r29	; 62
    16ce:	0f be       	out	0x3f, r0	; 63
    16d0:	cd bf       	out	0x3d, r28	; 61
    16d2:	99 8b       	std	Y+17, r25	; 0x11
    16d4:	88 8b       	std	Y+16, r24	; 0x10
    16d6:	7b 8b       	std	Y+19, r23	; 0x13
    16d8:	6a 8b       	std	Y+18, r22	; 0x12
    16da:	4c 8b       	std	Y+20, r20	; 0x14

	uint8 i=0;
    16dc:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<size;i++){
    16de:	1f 86       	std	Y+15, r1	; 0x0f
    16e0:	8a c0       	rjmp	.+276    	; 0x17f6 <saveToEEPROM+0x138>

		EEPROM_writeByte(first_address+i,arr[i]);
    16e2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16e4:	28 2f       	mov	r18, r24
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	88 89       	ldd	r24, Y+16	; 0x10
    16ea:	99 89       	ldd	r25, Y+17	; 0x11
    16ec:	a9 01       	movw	r20, r18
    16ee:	48 0f       	add	r20, r24
    16f0:	59 1f       	adc	r21, r25
    16f2:	8f 85       	ldd	r24, Y+15	; 0x0f
    16f4:	28 2f       	mov	r18, r24
    16f6:	30 e0       	ldi	r19, 0x00	; 0
    16f8:	8a 89       	ldd	r24, Y+18	; 0x12
    16fa:	9b 89       	ldd	r25, Y+19	; 0x13
    16fc:	fc 01       	movw	r30, r24
    16fe:	e2 0f       	add	r30, r18
    1700:	f3 1f       	adc	r31, r19
    1702:	20 81       	ld	r18, Z
    1704:	ca 01       	movw	r24, r20
    1706:	62 2f       	mov	r22, r18
    1708:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <EEPROM_writeByte>
    170c:	80 e0       	ldi	r24, 0x00	; 0
    170e:	90 e0       	ldi	r25, 0x00	; 0
    1710:	a0 e2       	ldi	r26, 0x20	; 32
    1712:	b1 e4       	ldi	r27, 0x41	; 65
    1714:	8b 87       	std	Y+11, r24	; 0x0b
    1716:	9c 87       	std	Y+12, r25	; 0x0c
    1718:	ad 87       	std	Y+13, r26	; 0x0d
    171a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    171c:	6b 85       	ldd	r22, Y+11	; 0x0b
    171e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1720:	8d 85       	ldd	r24, Y+13	; 0x0d
    1722:	9e 85       	ldd	r25, Y+14	; 0x0e
    1724:	20 e0       	ldi	r18, 0x00	; 0
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	4a ef       	ldi	r20, 0xFA	; 250
    172a:	54 e4       	ldi	r21, 0x44	; 68
    172c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1730:	dc 01       	movw	r26, r24
    1732:	cb 01       	movw	r24, r22
    1734:	8f 83       	std	Y+7, r24	; 0x07
    1736:	98 87       	std	Y+8, r25	; 0x08
    1738:	a9 87       	std	Y+9, r26	; 0x09
    173a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    173c:	6f 81       	ldd	r22, Y+7	; 0x07
    173e:	78 85       	ldd	r23, Y+8	; 0x08
    1740:	89 85       	ldd	r24, Y+9	; 0x09
    1742:	9a 85       	ldd	r25, Y+10	; 0x0a
    1744:	20 e0       	ldi	r18, 0x00	; 0
    1746:	30 e0       	ldi	r19, 0x00	; 0
    1748:	40 e8       	ldi	r20, 0x80	; 128
    174a:	5f e3       	ldi	r21, 0x3F	; 63
    174c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1750:	88 23       	and	r24, r24
    1752:	2c f4       	brge	.+10     	; 0x175e <saveToEEPROM+0xa0>
		__ticks = 1;
    1754:	81 e0       	ldi	r24, 0x01	; 1
    1756:	90 e0       	ldi	r25, 0x00	; 0
    1758:	9e 83       	std	Y+6, r25	; 0x06
    175a:	8d 83       	std	Y+5, r24	; 0x05
    175c:	3f c0       	rjmp	.+126    	; 0x17dc <saveToEEPROM+0x11e>
	else if (__tmp > 65535)
    175e:	6f 81       	ldd	r22, Y+7	; 0x07
    1760:	78 85       	ldd	r23, Y+8	; 0x08
    1762:	89 85       	ldd	r24, Y+9	; 0x09
    1764:	9a 85       	ldd	r25, Y+10	; 0x0a
    1766:	20 e0       	ldi	r18, 0x00	; 0
    1768:	3f ef       	ldi	r19, 0xFF	; 255
    176a:	4f e7       	ldi	r20, 0x7F	; 127
    176c:	57 e4       	ldi	r21, 0x47	; 71
    176e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1772:	18 16       	cp	r1, r24
    1774:	4c f5       	brge	.+82     	; 0x17c8 <saveToEEPROM+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1776:	6b 85       	ldd	r22, Y+11	; 0x0b
    1778:	7c 85       	ldd	r23, Y+12	; 0x0c
    177a:	8d 85       	ldd	r24, Y+13	; 0x0d
    177c:	9e 85       	ldd	r25, Y+14	; 0x0e
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e2       	ldi	r20, 0x20	; 32
    1784:	51 e4       	ldi	r21, 0x41	; 65
    1786:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	bc 01       	movw	r22, r24
    1790:	cd 01       	movw	r24, r26
    1792:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1796:	dc 01       	movw	r26, r24
    1798:	cb 01       	movw	r24, r22
    179a:	9e 83       	std	Y+6, r25	; 0x06
    179c:	8d 83       	std	Y+5, r24	; 0x05
    179e:	0f c0       	rjmp	.+30     	; 0x17be <saveToEEPROM+0x100>
    17a0:	88 ec       	ldi	r24, 0xC8	; 200
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	9c 83       	std	Y+4, r25	; 0x04
    17a6:	8b 83       	std	Y+3, r24	; 0x03
    17a8:	8b 81       	ldd	r24, Y+3	; 0x03
    17aa:	9c 81       	ldd	r25, Y+4	; 0x04
    17ac:	01 97       	sbiw	r24, 0x01	; 1
    17ae:	f1 f7       	brne	.-4      	; 0x17ac <saveToEEPROM+0xee>
    17b0:	9c 83       	std	Y+4, r25	; 0x04
    17b2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	9e 81       	ldd	r25, Y+6	; 0x06
    17b8:	01 97       	sbiw	r24, 0x01	; 1
    17ba:	9e 83       	std	Y+6, r25	; 0x06
    17bc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17be:	8d 81       	ldd	r24, Y+5	; 0x05
    17c0:	9e 81       	ldd	r25, Y+6	; 0x06
    17c2:	00 97       	sbiw	r24, 0x00	; 0
    17c4:	69 f7       	brne	.-38     	; 0x17a0 <saveToEEPROM+0xe2>
    17c6:	14 c0       	rjmp	.+40     	; 0x17f0 <saveToEEPROM+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    17c8:	6f 81       	ldd	r22, Y+7	; 0x07
    17ca:	78 85       	ldd	r23, Y+8	; 0x08
    17cc:	89 85       	ldd	r24, Y+9	; 0x09
    17ce:	9a 85       	ldd	r25, Y+10	; 0x0a
    17d0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d4:	dc 01       	movw	r26, r24
    17d6:	cb 01       	movw	r24, r22
    17d8:	9e 83       	std	Y+6, r25	; 0x06
    17da:	8d 83       	std	Y+5, r24	; 0x05
    17dc:	8d 81       	ldd	r24, Y+5	; 0x05
    17de:	9e 81       	ldd	r25, Y+6	; 0x06
    17e0:	9a 83       	std	Y+2, r25	; 0x02
    17e2:	89 83       	std	Y+1, r24	; 0x01
    17e4:	89 81       	ldd	r24, Y+1	; 0x01
    17e6:	9a 81       	ldd	r25, Y+2	; 0x02
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <saveToEEPROM+0x12a>
    17ec:	9a 83       	std	Y+2, r25	; 0x02
    17ee:	89 83       	std	Y+1, r24	; 0x01


void saveToEEPROM(uint16 first_address , uint8 *arr,uint8 size){

	uint8 i=0;
	for(i=0;i<size;i++){
    17f0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17f2:	8f 5f       	subi	r24, 0xFF	; 255
    17f4:	8f 87       	std	Y+15, r24	; 0x0f
    17f6:	9f 85       	ldd	r25, Y+15	; 0x0f
    17f8:	8c 89       	ldd	r24, Y+20	; 0x14
    17fa:	98 17       	cp	r25, r24
    17fc:	08 f4       	brcc	.+2      	; 0x1800 <saveToEEPROM+0x142>
    17fe:	71 cf       	rjmp	.-286    	; 0x16e2 <saveToEEPROM+0x24>

		EEPROM_writeByte(first_address+i,arr[i]);
		_delay_ms(10);
	}

}
    1800:	64 96       	adiw	r28, 0x14	; 20
    1802:	0f b6       	in	r0, 0x3f	; 63
    1804:	f8 94       	cli
    1806:	de bf       	out	0x3e, r29	; 62
    1808:	0f be       	out	0x3f, r0	; 63
    180a:	cd bf       	out	0x3d, r28	; 61
    180c:	cf 91       	pop	r28
    180e:	df 91       	pop	r29
    1810:	08 95       	ret

00001812 <readFromEEPROM>:
void readFromEEPROM(uint16 first_address , uint8 *arr,uint8 size){
    1812:	df 93       	push	r29
    1814:	cf 93       	push	r28
    1816:	cd b7       	in	r28, 0x3d	; 61
    1818:	de b7       	in	r29, 0x3e	; 62
    181a:	64 97       	sbiw	r28, 0x14	; 20
    181c:	0f b6       	in	r0, 0x3f	; 63
    181e:	f8 94       	cli
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	0f be       	out	0x3f, r0	; 63
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	99 8b       	std	Y+17, r25	; 0x11
    1828:	88 8b       	std	Y+16, r24	; 0x10
    182a:	7b 8b       	std	Y+19, r23	; 0x13
    182c:	6a 8b       	std	Y+18, r22	; 0x12
    182e:	4c 8b       	std	Y+20, r20	; 0x14

	uint8 i=0;
    1830:	1f 86       	std	Y+15, r1	; 0x0f
	for(i=0;i<size;i++){
    1832:	1f 86       	std	Y+15, r1	; 0x0f
    1834:	88 c0       	rjmp	.+272    	; 0x1946 <readFromEEPROM+0x134>

		EEPROM_readByte(first_address+i,&arr[i]);
    1836:	8f 85       	ldd	r24, Y+15	; 0x0f
    1838:	28 2f       	mov	r18, r24
    183a:	30 e0       	ldi	r19, 0x00	; 0
    183c:	88 89       	ldd	r24, Y+16	; 0x10
    183e:	99 89       	ldd	r25, Y+17	; 0x11
    1840:	a9 01       	movw	r20, r18
    1842:	48 0f       	add	r20, r24
    1844:	59 1f       	adc	r21, r25
    1846:	8f 85       	ldd	r24, Y+15	; 0x0f
    1848:	28 2f       	mov	r18, r24
    184a:	30 e0       	ldi	r19, 0x00	; 0
    184c:	8a 89       	ldd	r24, Y+18	; 0x12
    184e:	9b 89       	ldd	r25, Y+19	; 0x13
    1850:	28 0f       	add	r18, r24
    1852:	39 1f       	adc	r19, r25
    1854:	ca 01       	movw	r24, r20
    1856:	b9 01       	movw	r22, r18
    1858:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <EEPROM_readByte>
    185c:	80 e0       	ldi	r24, 0x00	; 0
    185e:	90 e0       	ldi	r25, 0x00	; 0
    1860:	a0 e2       	ldi	r26, 0x20	; 32
    1862:	b1 e4       	ldi	r27, 0x41	; 65
    1864:	8b 87       	std	Y+11, r24	; 0x0b
    1866:	9c 87       	std	Y+12, r25	; 0x0c
    1868:	ad 87       	std	Y+13, r26	; 0x0d
    186a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    186c:	6b 85       	ldd	r22, Y+11	; 0x0b
    186e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1870:	8d 85       	ldd	r24, Y+13	; 0x0d
    1872:	9e 85       	ldd	r25, Y+14	; 0x0e
    1874:	20 e0       	ldi	r18, 0x00	; 0
    1876:	30 e0       	ldi	r19, 0x00	; 0
    1878:	4a ef       	ldi	r20, 0xFA	; 250
    187a:	54 e4       	ldi	r21, 0x44	; 68
    187c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1880:	dc 01       	movw	r26, r24
    1882:	cb 01       	movw	r24, r22
    1884:	8f 83       	std	Y+7, r24	; 0x07
    1886:	98 87       	std	Y+8, r25	; 0x08
    1888:	a9 87       	std	Y+9, r26	; 0x09
    188a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    188c:	6f 81       	ldd	r22, Y+7	; 0x07
    188e:	78 85       	ldd	r23, Y+8	; 0x08
    1890:	89 85       	ldd	r24, Y+9	; 0x09
    1892:	9a 85       	ldd	r25, Y+10	; 0x0a
    1894:	20 e0       	ldi	r18, 0x00	; 0
    1896:	30 e0       	ldi	r19, 0x00	; 0
    1898:	40 e8       	ldi	r20, 0x80	; 128
    189a:	5f e3       	ldi	r21, 0x3F	; 63
    189c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18a0:	88 23       	and	r24, r24
    18a2:	2c f4       	brge	.+10     	; 0x18ae <readFromEEPROM+0x9c>
		__ticks = 1;
    18a4:	81 e0       	ldi	r24, 0x01	; 1
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	9e 83       	std	Y+6, r25	; 0x06
    18aa:	8d 83       	std	Y+5, r24	; 0x05
    18ac:	3f c0       	rjmp	.+126    	; 0x192c <readFromEEPROM+0x11a>
	else if (__tmp > 65535)
    18ae:	6f 81       	ldd	r22, Y+7	; 0x07
    18b0:	78 85       	ldd	r23, Y+8	; 0x08
    18b2:	89 85       	ldd	r24, Y+9	; 0x09
    18b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    18b6:	20 e0       	ldi	r18, 0x00	; 0
    18b8:	3f ef       	ldi	r19, 0xFF	; 255
    18ba:	4f e7       	ldi	r20, 0x7F	; 127
    18bc:	57 e4       	ldi	r21, 0x47	; 71
    18be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18c2:	18 16       	cp	r1, r24
    18c4:	4c f5       	brge	.+82     	; 0x1918 <readFromEEPROM+0x106>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    18c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    18ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    18cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    18ce:	20 e0       	ldi	r18, 0x00	; 0
    18d0:	30 e0       	ldi	r19, 0x00	; 0
    18d2:	40 e2       	ldi	r20, 0x20	; 32
    18d4:	51 e4       	ldi	r21, 0x41	; 65
    18d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18da:	dc 01       	movw	r26, r24
    18dc:	cb 01       	movw	r24, r22
    18de:	bc 01       	movw	r22, r24
    18e0:	cd 01       	movw	r24, r26
    18e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18e6:	dc 01       	movw	r26, r24
    18e8:	cb 01       	movw	r24, r22
    18ea:	9e 83       	std	Y+6, r25	; 0x06
    18ec:	8d 83       	std	Y+5, r24	; 0x05
    18ee:	0f c0       	rjmp	.+30     	; 0x190e <readFromEEPROM+0xfc>
    18f0:	88 ec       	ldi	r24, 0xC8	; 200
    18f2:	90 e0       	ldi	r25, 0x00	; 0
    18f4:	9c 83       	std	Y+4, r25	; 0x04
    18f6:	8b 83       	std	Y+3, r24	; 0x03
    18f8:	8b 81       	ldd	r24, Y+3	; 0x03
    18fa:	9c 81       	ldd	r25, Y+4	; 0x04
    18fc:	01 97       	sbiw	r24, 0x01	; 1
    18fe:	f1 f7       	brne	.-4      	; 0x18fc <readFromEEPROM+0xea>
    1900:	9c 83       	std	Y+4, r25	; 0x04
    1902:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1904:	8d 81       	ldd	r24, Y+5	; 0x05
    1906:	9e 81       	ldd	r25, Y+6	; 0x06
    1908:	01 97       	sbiw	r24, 0x01	; 1
    190a:	9e 83       	std	Y+6, r25	; 0x06
    190c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    190e:	8d 81       	ldd	r24, Y+5	; 0x05
    1910:	9e 81       	ldd	r25, Y+6	; 0x06
    1912:	00 97       	sbiw	r24, 0x00	; 0
    1914:	69 f7       	brne	.-38     	; 0x18f0 <readFromEEPROM+0xde>
    1916:	14 c0       	rjmp	.+40     	; 0x1940 <readFromEEPROM+0x12e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1918:	6f 81       	ldd	r22, Y+7	; 0x07
    191a:	78 85       	ldd	r23, Y+8	; 0x08
    191c:	89 85       	ldd	r24, Y+9	; 0x09
    191e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1920:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1924:	dc 01       	movw	r26, r24
    1926:	cb 01       	movw	r24, r22
    1928:	9e 83       	std	Y+6, r25	; 0x06
    192a:	8d 83       	std	Y+5, r24	; 0x05
    192c:	8d 81       	ldd	r24, Y+5	; 0x05
    192e:	9e 81       	ldd	r25, Y+6	; 0x06
    1930:	9a 83       	std	Y+2, r25	; 0x02
    1932:	89 83       	std	Y+1, r24	; 0x01
    1934:	89 81       	ldd	r24, Y+1	; 0x01
    1936:	9a 81       	ldd	r25, Y+2	; 0x02
    1938:	01 97       	sbiw	r24, 0x01	; 1
    193a:	f1 f7       	brne	.-4      	; 0x1938 <readFromEEPROM+0x126>
    193c:	9a 83       	std	Y+2, r25	; 0x02
    193e:	89 83       	std	Y+1, r24	; 0x01

}
void readFromEEPROM(uint16 first_address , uint8 *arr,uint8 size){

	uint8 i=0;
	for(i=0;i<size;i++){
    1940:	8f 85       	ldd	r24, Y+15	; 0x0f
    1942:	8f 5f       	subi	r24, 0xFF	; 255
    1944:	8f 87       	std	Y+15, r24	; 0x0f
    1946:	9f 85       	ldd	r25, Y+15	; 0x0f
    1948:	8c 89       	ldd	r24, Y+20	; 0x14
    194a:	98 17       	cp	r25, r24
    194c:	08 f4       	brcc	.+2      	; 0x1950 <readFromEEPROM+0x13e>
    194e:	73 cf       	rjmp	.-282    	; 0x1836 <readFromEEPROM+0x24>

		EEPROM_readByte(first_address+i,&arr[i]);
		_delay_ms(10);
	}

}
    1950:	64 96       	adiw	r28, 0x14	; 20
    1952:	0f b6       	in	r0, 0x3f	; 63
    1954:	f8 94       	cli
    1956:	de bf       	out	0x3e, r29	; 62
    1958:	0f be       	out	0x3f, r0	; 63
    195a:	cd bf       	out	0x3d, r28	; 61
    195c:	cf 91       	pop	r28
    195e:	df 91       	pop	r29
    1960:	08 95       	ret

00001962 <Timer_1_delay>:


void Timer_1_delay(uint32 delay){
    1962:	df 93       	push	r29
    1964:	cf 93       	push	r28
    1966:	00 d0       	rcall	.+0      	; 0x1968 <Timer_1_delay+0x6>
    1968:	00 d0       	rcall	.+0      	; 0x196a <Timer_1_delay+0x8>
    196a:	cd b7       	in	r28, 0x3d	; 61
    196c:	de b7       	in	r29, 0x3e	; 62
    196e:	69 83       	std	Y+1, r22	; 0x01
    1970:	7a 83       	std	Y+2, r23	; 0x02
    1972:	8b 83       	std	Y+3, r24	; 0x03
    1974:	9c 83       	std	Y+4, r25	; 0x04
	Timer_1_init(&Timer1_ConfigStruct);
    1976:	87 ee       	ldi	r24, 0xE7	; 231
    1978:	90 e0       	ldi	r25, 0x00	; 0
    197a:	0e 94 2e 17 	call	0x2e5c	; 0x2e5c <Timer_1_init>
	Timer_1_setCallBack(&Timer_1_CallBack);
    197e:	8d ed       	ldi	r24, 0xDD	; 221
    1980:	9c e0       	ldi	r25, 0x0C	; 12
    1982:	0e 94 c3 17 	call	0x2f86	; 0x2f86 <Timer_1_setCallBack>
	while(seconds != delay);
    1986:	80 91 f1 00 	lds	r24, 0x00F1
    198a:	28 2f       	mov	r18, r24
    198c:	30 e0       	ldi	r19, 0x00	; 0
    198e:	40 e0       	ldi	r20, 0x00	; 0
    1990:	50 e0       	ldi	r21, 0x00	; 0
    1992:	89 81       	ldd	r24, Y+1	; 0x01
    1994:	9a 81       	ldd	r25, Y+2	; 0x02
    1996:	ab 81       	ldd	r26, Y+3	; 0x03
    1998:	bc 81       	ldd	r27, Y+4	; 0x04
    199a:	28 17       	cp	r18, r24
    199c:	39 07       	cpc	r19, r25
    199e:	4a 07       	cpc	r20, r26
    19a0:	5b 07       	cpc	r21, r27
    19a2:	89 f7       	brne	.-30     	; 0x1986 <Timer_1_delay+0x24>
	Timer_1_deInit();
    19a4:	0e 94 a3 17 	call	0x2f46	; 0x2f46 <Timer_1_deInit>
	seconds = 0;
    19a8:	10 92 f1 00 	sts	0x00F1, r1
}
    19ac:	0f 90       	pop	r0
    19ae:	0f 90       	pop	r0
    19b0:	0f 90       	pop	r0
    19b2:	0f 90       	pop	r0
    19b4:	cf 91       	pop	r28
    19b6:	df 91       	pop	r29
    19b8:	08 95       	ret

000019ba <Timer_1_CallBack>:

void Timer_1_CallBack(void){
    19ba:	df 93       	push	r29
    19bc:	cf 93       	push	r28
    19be:	cd b7       	in	r28, 0x3d	; 61
    19c0:	de b7       	in	r29, 0x3e	; 62
	seconds++;
    19c2:	80 91 f1 00 	lds	r24, 0x00F1
    19c6:	8f 5f       	subi	r24, 0xFF	; 255
    19c8:	80 93 f1 00 	sts	0x00F1, r24
}
    19cc:	cf 91       	pop	r28
    19ce:	df 91       	pop	r29
    19d0:	08 95       	ret

000019d2 <Buzzer_init>:
#include "buzzer.h"

void Buzzer_init(void){
    19d2:	df 93       	push	r29
    19d4:	cf 93       	push	r28
    19d6:	cd b7       	in	r28, 0x3d	; 61
    19d8:	de b7       	in	r29, 0x3e	; 62
	GPIO_setupPinDirection(BUZZER_PORT, BUZZER_PIN, PIN_OUTPUT);
    19da:	82 e0       	ldi	r24, 0x02	; 2
    19dc:	62 e0       	ldi	r22, 0x02	; 2
    19de:	41 e0       	ldi	r20, 0x01	; 1
    19e0:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <GPIO_setupPinDirection>
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, 0);
    19e4:	82 e0       	ldi	r24, 0x02	; 2
    19e6:	62 e0       	ldi	r22, 0x02	; 2
    19e8:	40 e0       	ldi	r20, 0x00	; 0
    19ea:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
}
    19ee:	cf 91       	pop	r28
    19f0:	df 91       	pop	r29
    19f2:	08 95       	ret

000019f4 <Buzzer_on>:

void Buzzer_on(void){
    19f4:	df 93       	push	r29
    19f6:	cf 93       	push	r28
    19f8:	cd b7       	in	r28, 0x3d	; 61
    19fa:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, 1);
    19fc:	82 e0       	ldi	r24, 0x02	; 2
    19fe:	62 e0       	ldi	r22, 0x02	; 2
    1a00:	41 e0       	ldi	r20, 0x01	; 1
    1a02:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
}
    1a06:	cf 91       	pop	r28
    1a08:	df 91       	pop	r29
    1a0a:	08 95       	ret

00001a0c <Buzzer_off>:

void Buzzer_off(void){
    1a0c:	df 93       	push	r29
    1a0e:	cf 93       	push	r28
    1a10:	cd b7       	in	r28, 0x3d	; 61
    1a12:	de b7       	in	r29, 0x3e	; 62
	GPIO_writePin(BUZZER_PORT, BUZZER_PIN, 0);
    1a14:	82 e0       	ldi	r24, 0x02	; 2
    1a16:	62 e0       	ldi	r22, 0x02	; 2
    1a18:	40 e0       	ldi	r20, 0x00	; 0
    1a1a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
}
    1a1e:	cf 91       	pop	r28
    1a20:	df 91       	pop	r29
    1a22:	08 95       	ret

00001a24 <DCMotor_Init>:


/*
 * Description: initialize the motor driver
 */
void DCMotor_Init(void){
    1a24:	df 93       	push	r29
    1a26:	cf 93       	push	r28
    1a28:	cd b7       	in	r28, 0x3d	; 61
    1a2a:	de b7       	in	r29, 0x3e	; 62

	//set the enable pin as output
	GPIO_setupPinDirection(DC_MOTOR_1_ENABLE_PORT, DC_MOTOR_1_ENABLE_PIN, PIN_OUTPUT);
    1a2c:	81 e0       	ldi	r24, 0x01	; 1
    1a2e:	63 e0       	ldi	r22, 0x03	; 3
    1a30:	41 e0       	ldi	r20, 0x01	; 1
    1a32:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <GPIO_setupPinDirection>

	//set the IN pins as output
	GPIO_setupPinDirection(DC_MOTOR_1_IN_PORT, DC_MOTOR_1_IN_FIRST_PIN+0, PIN_OUTPUT);
    1a36:	81 e0       	ldi	r24, 0x01	; 1
    1a38:	61 e0       	ldi	r22, 0x01	; 1
    1a3a:	41 e0       	ldi	r20, 0x01	; 1
    1a3c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(DC_MOTOR_1_IN_PORT, DC_MOTOR_1_IN_FIRST_PIN+1, PIN_OUTPUT);
    1a40:	81 e0       	ldi	r24, 0x01	; 1
    1a42:	62 e0       	ldi	r22, 0x02	; 2
    1a44:	41 e0       	ldi	r20, 0x01	; 1
    1a46:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <GPIO_setupPinDirection>

	//Stop the motor
	GPIO_writePin(DC_MOTOR_1_ENABLE_PORT, DC_MOTOR_1_ENABLE_PIN, DC_MOTOR_STOP);
    1a4a:	81 e0       	ldi	r24, 0x01	; 1
    1a4c:	63 e0       	ldi	r22, 0x03	; 3
    1a4e:	40 e0       	ldi	r20, 0x00	; 0
    1a50:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
}
    1a54:	cf 91       	pop	r28
    1a56:	df 91       	pop	r29
    1a58:	08 95       	ret

00001a5a <DCMotor_Rotate>:


/*
 * Description: set the motor direction and rotation speed
 */
void DCMotor_Rotate(DcMotor_State state,uint8 speed){
    1a5a:	df 93       	push	r29
    1a5c:	cf 93       	push	r28
    1a5e:	00 d0       	rcall	.+0      	; 0x1a60 <DCMotor_Rotate+0x6>
    1a60:	00 d0       	rcall	.+0      	; 0x1a62 <DCMotor_Rotate+0x8>
    1a62:	cd b7       	in	r28, 0x3d	; 61
    1a64:	de b7       	in	r29, 0x3e	; 62
    1a66:	89 83       	std	Y+1, r24	; 0x01
    1a68:	6a 83       	std	Y+2, r22	; 0x02

	switch(state){
    1a6a:	89 81       	ldd	r24, Y+1	; 0x01
    1a6c:	28 2f       	mov	r18, r24
    1a6e:	30 e0       	ldi	r19, 0x00	; 0
    1a70:	3c 83       	std	Y+4, r19	; 0x04
    1a72:	2b 83       	std	Y+3, r18	; 0x03
    1a74:	8b 81       	ldd	r24, Y+3	; 0x03
    1a76:	9c 81       	ldd	r25, Y+4	; 0x04
    1a78:	81 30       	cpi	r24, 0x01	; 1
    1a7a:	91 05       	cpc	r25, r1
    1a7c:	51 f0       	breq	.+20     	; 0x1a92 <DCMotor_Rotate+0x38>
    1a7e:	2b 81       	ldd	r18, Y+3	; 0x03
    1a80:	3c 81       	ldd	r19, Y+4	; 0x04
    1a82:	22 30       	cpi	r18, 0x02	; 2
    1a84:	31 05       	cpc	r19, r1
    1a86:	81 f0       	breq	.+32     	; 0x1aa8 <DCMotor_Rotate+0x4e>
    1a88:	8b 81       	ldd	r24, Y+3	; 0x03
    1a8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1a8c:	00 97       	sbiw	r24, 0x00	; 0
    1a8e:	b9 f0       	breq	.+46     	; 0x1abe <DCMotor_Rotate+0x64>
    1a90:	20 c0       	rjmp	.+64     	; 0x1ad2 <DCMotor_Rotate+0x78>
		case DC_MOTOR_CW:
			//set the direction as CW by the IN pins
			GPIO_writePin(DC_MOTOR_1_IN_PORT, DC_MOTOR_1_IN_FIRST_PIN+0, LOGIC_HIGH);
    1a92:	81 e0       	ldi	r24, 0x01	; 1
    1a94:	61 e0       	ldi	r22, 0x01	; 1
    1a96:	41 e0       	ldi	r20, 0x01	; 1
    1a98:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_1_IN_PORT, DC_MOTOR_1_IN_FIRST_PIN+1, LOGIC_LOW);
    1a9c:	81 e0       	ldi	r24, 0x01	; 1
    1a9e:	62 e0       	ldi	r22, 0x02	; 2
    1aa0:	40 e0       	ldi	r20, 0x00	; 0
    1aa2:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
    1aa6:	15 c0       	rjmp	.+42     	; 0x1ad2 <DCMotor_Rotate+0x78>
			break;

		case DC_MOTOR_ACW:
			//set the direction as ACW by the IN pins
			GPIO_writePin(DC_MOTOR_1_IN_PORT, DC_MOTOR_1_IN_FIRST_PIN+0, LOGIC_LOW);
    1aa8:	81 e0       	ldi	r24, 0x01	; 1
    1aaa:	61 e0       	ldi	r22, 0x01	; 1
    1aac:	40 e0       	ldi	r20, 0x00	; 0
    1aae:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_1_IN_PORT, DC_MOTOR_1_IN_FIRST_PIN+1, LOGIC_HIGH);
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	62 e0       	ldi	r22, 0x02	; 2
    1ab6:	41 e0       	ldi	r20, 0x01	; 1
    1ab8:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
    1abc:	0a c0       	rjmp	.+20     	; 0x1ad2 <DCMotor_Rotate+0x78>
			break;

		case DC_MOTOR_STOP:
			//Stop the motor by the IN pins
			GPIO_writePin(DC_MOTOR_1_IN_PORT, DC_MOTOR_1_IN_FIRST_PIN+0, LOGIC_LOW);
    1abe:	81 e0       	ldi	r24, 0x01	; 1
    1ac0:	61 e0       	ldi	r22, 0x01	; 1
    1ac2:	40 e0       	ldi	r20, 0x00	; 0
    1ac4:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
			GPIO_writePin(DC_MOTOR_1_IN_PORT, DC_MOTOR_1_IN_FIRST_PIN+1, LOGIC_LOW);
    1ac8:	81 e0       	ldi	r24, 0x01	; 1
    1aca:	62 e0       	ldi	r22, 0x02	; 2
    1acc:	40 e0       	ldi	r20, 0x00	; 0
    1ace:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
			break;
	}

	//set the motor speed by passing the PWM value to the function
	PWM_Timer0_Start(speed);
    1ad2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ad4:	0e 94 a4 16 	call	0x2d48	; 0x2d48 <PWM_Timer0_Start>

}
    1ad8:	0f 90       	pop	r0
    1ada:	0f 90       	pop	r0
    1adc:	0f 90       	pop	r0
    1ade:	0f 90       	pop	r0
    1ae0:	cf 91       	pop	r28
    1ae2:	df 91       	pop	r29
    1ae4:	08 95       	ret

00001ae6 <EEPROM_writeByte>:
 *******************************************************************************/
#include "external_eeprom.h"
#include "twi.h"

uint8 EEPROM_writeByte(uint16 u16addr, uint8 u8data)
{
    1ae6:	df 93       	push	r29
    1ae8:	cf 93       	push	r28
    1aea:	00 d0       	rcall	.+0      	; 0x1aec <EEPROM_writeByte+0x6>
    1aec:	00 d0       	rcall	.+0      	; 0x1aee <EEPROM_writeByte+0x8>
    1aee:	cd b7       	in	r28, 0x3d	; 61
    1af0:	de b7       	in	r29, 0x3e	; 62
    1af2:	9a 83       	std	Y+2, r25	; 0x02
    1af4:	89 83       	std	Y+1, r24	; 0x01
    1af6:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1af8:	0e 94 f5 17 	call	0x2fea	; 0x2fea <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1afc:	0e 94 4d 18 	call	0x309a	; 0x309a <TWI_getStatus>
    1b00:	88 30       	cpi	r24, 0x08	; 8
    1b02:	11 f0       	breq	.+4      	; 0x1b08 <EEPROM_writeByte+0x22>
        return ERROR;
    1b04:	1c 82       	std	Y+4, r1	; 0x04
    1b06:	28 c0       	rjmp	.+80     	; 0x1b58 <EEPROM_writeByte+0x72>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1b08:	89 81       	ldd	r24, Y+1	; 0x01
    1b0a:	9a 81       	ldd	r25, Y+2	; 0x02
    1b0c:	80 70       	andi	r24, 0x00	; 0
    1b0e:	97 70       	andi	r25, 0x07	; 7
    1b10:	88 0f       	add	r24, r24
    1b12:	89 2f       	mov	r24, r25
    1b14:	88 1f       	adc	r24, r24
    1b16:	99 0b       	sbc	r25, r25
    1b18:	91 95       	neg	r25
    1b1a:	80 6a       	ori	r24, 0xA0	; 160
    1b1c:	0e 94 10 18 	call	0x3020	; 0x3020 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1b20:	0e 94 4d 18 	call	0x309a	; 0x309a <TWI_getStatus>
    1b24:	88 31       	cpi	r24, 0x18	; 24
    1b26:	11 f0       	breq	.+4      	; 0x1b2c <EEPROM_writeByte+0x46>
        return ERROR; 
    1b28:	1c 82       	std	Y+4, r1	; 0x04
    1b2a:	16 c0       	rjmp	.+44     	; 0x1b58 <EEPROM_writeByte+0x72>
		 
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1b2c:	89 81       	ldd	r24, Y+1	; 0x01
    1b2e:	0e 94 10 18 	call	0x3020	; 0x3020 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b32:	0e 94 4d 18 	call	0x309a	; 0x309a <TWI_getStatus>
    1b36:	88 32       	cpi	r24, 0x28	; 40
    1b38:	11 f0       	breq	.+4      	; 0x1b3e <EEPROM_writeByte+0x58>
        return ERROR;
    1b3a:	1c 82       	std	Y+4, r1	; 0x04
    1b3c:	0d c0       	rjmp	.+26     	; 0x1b58 <EEPROM_writeByte+0x72>
		
    /* write byte to eeprom */
    TWI_writeByte(u8data);
    1b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    1b40:	0e 94 10 18 	call	0x3020	; 0x3020 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1b44:	0e 94 4d 18 	call	0x309a	; 0x309a <TWI_getStatus>
    1b48:	88 32       	cpi	r24, 0x28	; 40
    1b4a:	11 f0       	breq	.+4      	; 0x1b50 <EEPROM_writeByte+0x6a>
        return ERROR;
    1b4c:	1c 82       	std	Y+4, r1	; 0x04
    1b4e:	04 c0       	rjmp	.+8      	; 0x1b58 <EEPROM_writeByte+0x72>

    /* Send the Stop Bit */
    TWI_stop();
    1b50:	0e 94 05 18 	call	0x300a	; 0x300a <TWI_stop>
	
    return SUCCESS;
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	8c 83       	std	Y+4, r24	; 0x04
    1b58:	8c 81       	ldd	r24, Y+4	; 0x04
}
    1b5a:	0f 90       	pop	r0
    1b5c:	0f 90       	pop	r0
    1b5e:	0f 90       	pop	r0
    1b60:	0f 90       	pop	r0
    1b62:	cf 91       	pop	r28
    1b64:	df 91       	pop	r29
    1b66:	08 95       	ret

00001b68 <EEPROM_readByte>:

uint8 EEPROM_readByte(uint16 u16addr, uint8 *u8data)
{
    1b68:	df 93       	push	r29
    1b6a:	cf 93       	push	r28
    1b6c:	00 d0       	rcall	.+0      	; 0x1b6e <EEPROM_readByte+0x6>
    1b6e:	00 d0       	rcall	.+0      	; 0x1b70 <EEPROM_readByte+0x8>
    1b70:	0f 92       	push	r0
    1b72:	cd b7       	in	r28, 0x3d	; 61
    1b74:	de b7       	in	r29, 0x3e	; 62
    1b76:	9a 83       	std	Y+2, r25	; 0x02
    1b78:	89 83       	std	Y+1, r24	; 0x01
    1b7a:	7c 83       	std	Y+4, r23	; 0x04
    1b7c:	6b 83       	std	Y+3, r22	; 0x03
	/* Send the Start Bit */
    TWI_start();
    1b7e:	0e 94 f5 17 	call	0x2fea	; 0x2fea <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1b82:	0e 94 4d 18 	call	0x309a	; 0x309a <TWI_getStatus>
    1b86:	88 30       	cpi	r24, 0x08	; 8
    1b88:	11 f0       	breq	.+4      	; 0x1b8e <EEPROM_readByte+0x26>
        return ERROR;
    1b8a:	1d 82       	std	Y+5, r1	; 0x05
    1b8c:	44 c0       	rjmp	.+136    	; 0x1c16 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    1b8e:	89 81       	ldd	r24, Y+1	; 0x01
    1b90:	9a 81       	ldd	r25, Y+2	; 0x02
    1b92:	80 70       	andi	r24, 0x00	; 0
    1b94:	97 70       	andi	r25, 0x07	; 7
    1b96:	88 0f       	add	r24, r24
    1b98:	89 2f       	mov	r24, r25
    1b9a:	88 1f       	adc	r24, r24
    1b9c:	99 0b       	sbc	r25, r25
    1b9e:	91 95       	neg	r25
    1ba0:	80 6a       	ori	r24, 0xA0	; 160
    1ba2:	0e 94 10 18 	call	0x3020	; 0x3020 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1ba6:	0e 94 4d 18 	call	0x309a	; 0x309a <TWI_getStatus>
    1baa:	88 31       	cpi	r24, 0x18	; 24
    1bac:	11 f0       	breq	.+4      	; 0x1bb2 <EEPROM_readByte+0x4a>
        return ERROR;
    1bae:	1d 82       	std	Y+5, r1	; 0x05
    1bb0:	32 c0       	rjmp	.+100    	; 0x1c16 <EEPROM_readByte+0xae>
		
    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1bb2:	89 81       	ldd	r24, Y+1	; 0x01
    1bb4:	0e 94 10 18 	call	0x3020	; 0x3020 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1bb8:	0e 94 4d 18 	call	0x309a	; 0x309a <TWI_getStatus>
    1bbc:	88 32       	cpi	r24, 0x28	; 40
    1bbe:	11 f0       	breq	.+4      	; 0x1bc4 <EEPROM_readByte+0x5c>
        return ERROR;
    1bc0:	1d 82       	std	Y+5, r1	; 0x05
    1bc2:	29 c0       	rjmp	.+82     	; 0x1c16 <EEPROM_readByte+0xae>
		
    /* Send the Repeated Start Bit */
    TWI_start();
    1bc4:	0e 94 f5 17 	call	0x2fea	; 0x2fea <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    1bc8:	0e 94 4d 18 	call	0x309a	; 0x309a <TWI_getStatus>
    1bcc:	80 31       	cpi	r24, 0x10	; 16
    1bce:	11 f0       	breq	.+4      	; 0x1bd4 <EEPROM_readByte+0x6c>
        return ERROR;
    1bd0:	1d 82       	std	Y+5, r1	; 0x05
    1bd2:	21 c0       	rjmp	.+66     	; 0x1c16 <EEPROM_readByte+0xae>
		
    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    1bd4:	89 81       	ldd	r24, Y+1	; 0x01
    1bd6:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd8:	80 70       	andi	r24, 0x00	; 0
    1bda:	97 70       	andi	r25, 0x07	; 7
    1bdc:	88 0f       	add	r24, r24
    1bde:	89 2f       	mov	r24, r25
    1be0:	88 1f       	adc	r24, r24
    1be2:	99 0b       	sbc	r25, r25
    1be4:	91 95       	neg	r25
    1be6:	81 6a       	ori	r24, 0xA1	; 161
    1be8:	0e 94 10 18 	call	0x3020	; 0x3020 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    1bec:	0e 94 4d 18 	call	0x309a	; 0x309a <TWI_getStatus>
    1bf0:	80 34       	cpi	r24, 0x40	; 64
    1bf2:	11 f0       	breq	.+4      	; 0x1bf8 <EEPROM_readByte+0x90>
        return ERROR;
    1bf4:	1d 82       	std	Y+5, r1	; 0x05
    1bf6:	0f c0       	rjmp	.+30     	; 0x1c16 <EEPROM_readByte+0xae>

    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    1bf8:	0e 94 3a 18 	call	0x3074	; 0x3074 <TWI_readByteWithNACK>
    1bfc:	eb 81       	ldd	r30, Y+3	; 0x03
    1bfe:	fc 81       	ldd	r31, Y+4	; 0x04
    1c00:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    1c02:	0e 94 4d 18 	call	0x309a	; 0x309a <TWI_getStatus>
    1c06:	88 35       	cpi	r24, 0x58	; 88
    1c08:	11 f0       	breq	.+4      	; 0x1c0e <EEPROM_readByte+0xa6>
        return ERROR;
    1c0a:	1d 82       	std	Y+5, r1	; 0x05
    1c0c:	04 c0       	rjmp	.+8      	; 0x1c16 <EEPROM_readByte+0xae>

    /* Send the Stop Bit */
    TWI_stop();
    1c0e:	0e 94 05 18 	call	0x300a	; 0x300a <TWI_stop>

    return SUCCESS;
    1c12:	81 e0       	ldi	r24, 0x01	; 1
    1c14:	8d 83       	std	Y+5, r24	; 0x05
    1c16:	8d 81       	ldd	r24, Y+5	; 0x05
}
    1c18:	0f 90       	pop	r0
    1c1a:	0f 90       	pop	r0
    1c1c:	0f 90       	pop	r0
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	cf 91       	pop	r28
    1c24:	df 91       	pop	r29
    1c26:	08 95       	ret

00001c28 <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    1c28:	df 93       	push	r29
    1c2a:	cf 93       	push	r28
    1c2c:	00 d0       	rcall	.+0      	; 0x1c2e <GPIO_setupPinDirection+0x6>
    1c2e:	00 d0       	rcall	.+0      	; 0x1c30 <GPIO_setupPinDirection+0x8>
    1c30:	0f 92       	push	r0
    1c32:	cd b7       	in	r28, 0x3d	; 61
    1c34:	de b7       	in	r29, 0x3e	; 62
    1c36:	89 83       	std	Y+1, r24	; 0x01
    1c38:	6a 83       	std	Y+2, r22	; 0x02
    1c3a:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1c3c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c3e:	88 30       	cpi	r24, 0x08	; 8
    1c40:	08 f0       	brcs	.+2      	; 0x1c44 <GPIO_setupPinDirection+0x1c>
    1c42:	d5 c0       	rjmp	.+426    	; 0x1dee <GPIO_setupPinDirection+0x1c6>
    1c44:	89 81       	ldd	r24, Y+1	; 0x01
    1c46:	84 30       	cpi	r24, 0x04	; 4
    1c48:	08 f0       	brcs	.+2      	; 0x1c4c <GPIO_setupPinDirection+0x24>
    1c4a:	d1 c0       	rjmp	.+418    	; 0x1dee <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    1c4c:	89 81       	ldd	r24, Y+1	; 0x01
    1c4e:	28 2f       	mov	r18, r24
    1c50:	30 e0       	ldi	r19, 0x00	; 0
    1c52:	3d 83       	std	Y+5, r19	; 0x05
    1c54:	2c 83       	std	Y+4, r18	; 0x04
    1c56:	8c 81       	ldd	r24, Y+4	; 0x04
    1c58:	9d 81       	ldd	r25, Y+5	; 0x05
    1c5a:	81 30       	cpi	r24, 0x01	; 1
    1c5c:	91 05       	cpc	r25, r1
    1c5e:	09 f4       	brne	.+2      	; 0x1c62 <GPIO_setupPinDirection+0x3a>
    1c60:	43 c0       	rjmp	.+134    	; 0x1ce8 <GPIO_setupPinDirection+0xc0>
    1c62:	2c 81       	ldd	r18, Y+4	; 0x04
    1c64:	3d 81       	ldd	r19, Y+5	; 0x05
    1c66:	22 30       	cpi	r18, 0x02	; 2
    1c68:	31 05       	cpc	r19, r1
    1c6a:	2c f4       	brge	.+10     	; 0x1c76 <GPIO_setupPinDirection+0x4e>
    1c6c:	8c 81       	ldd	r24, Y+4	; 0x04
    1c6e:	9d 81       	ldd	r25, Y+5	; 0x05
    1c70:	00 97       	sbiw	r24, 0x00	; 0
    1c72:	71 f0       	breq	.+28     	; 0x1c90 <GPIO_setupPinDirection+0x68>
    1c74:	bc c0       	rjmp	.+376    	; 0x1dee <GPIO_setupPinDirection+0x1c6>
    1c76:	2c 81       	ldd	r18, Y+4	; 0x04
    1c78:	3d 81       	ldd	r19, Y+5	; 0x05
    1c7a:	22 30       	cpi	r18, 0x02	; 2
    1c7c:	31 05       	cpc	r19, r1
    1c7e:	09 f4       	brne	.+2      	; 0x1c82 <GPIO_setupPinDirection+0x5a>
    1c80:	5f c0       	rjmp	.+190    	; 0x1d40 <GPIO_setupPinDirection+0x118>
    1c82:	8c 81       	ldd	r24, Y+4	; 0x04
    1c84:	9d 81       	ldd	r25, Y+5	; 0x05
    1c86:	83 30       	cpi	r24, 0x03	; 3
    1c88:	91 05       	cpc	r25, r1
    1c8a:	09 f4       	brne	.+2      	; 0x1c8e <GPIO_setupPinDirection+0x66>
    1c8c:	85 c0       	rjmp	.+266    	; 0x1d98 <GPIO_setupPinDirection+0x170>
    1c8e:	af c0       	rjmp	.+350    	; 0x1dee <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    1c90:	8b 81       	ldd	r24, Y+3	; 0x03
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	a1 f4       	brne	.+40     	; 0x1cbe <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    1c96:	aa e3       	ldi	r26, 0x3A	; 58
    1c98:	b0 e0       	ldi	r27, 0x00	; 0
    1c9a:	ea e3       	ldi	r30, 0x3A	; 58
    1c9c:	f0 e0       	ldi	r31, 0x00	; 0
    1c9e:	80 81       	ld	r24, Z
    1ca0:	48 2f       	mov	r20, r24
    1ca2:	8a 81       	ldd	r24, Y+2	; 0x02
    1ca4:	28 2f       	mov	r18, r24
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	02 2e       	mov	r0, r18
    1cae:	02 c0       	rjmp	.+4      	; 0x1cb4 <GPIO_setupPinDirection+0x8c>
    1cb0:	88 0f       	add	r24, r24
    1cb2:	99 1f       	adc	r25, r25
    1cb4:	0a 94       	dec	r0
    1cb6:	e2 f7       	brpl	.-8      	; 0x1cb0 <GPIO_setupPinDirection+0x88>
    1cb8:	84 2b       	or	r24, r20
    1cba:	8c 93       	st	X, r24
    1cbc:	98 c0       	rjmp	.+304    	; 0x1dee <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    1cbe:	aa e3       	ldi	r26, 0x3A	; 58
    1cc0:	b0 e0       	ldi	r27, 0x00	; 0
    1cc2:	ea e3       	ldi	r30, 0x3A	; 58
    1cc4:	f0 e0       	ldi	r31, 0x00	; 0
    1cc6:	80 81       	ld	r24, Z
    1cc8:	48 2f       	mov	r20, r24
    1cca:	8a 81       	ldd	r24, Y+2	; 0x02
    1ccc:	28 2f       	mov	r18, r24
    1cce:	30 e0       	ldi	r19, 0x00	; 0
    1cd0:	81 e0       	ldi	r24, 0x01	; 1
    1cd2:	90 e0       	ldi	r25, 0x00	; 0
    1cd4:	02 2e       	mov	r0, r18
    1cd6:	02 c0       	rjmp	.+4      	; 0x1cdc <GPIO_setupPinDirection+0xb4>
    1cd8:	88 0f       	add	r24, r24
    1cda:	99 1f       	adc	r25, r25
    1cdc:	0a 94       	dec	r0
    1cde:	e2 f7       	brpl	.-8      	; 0x1cd8 <GPIO_setupPinDirection+0xb0>
    1ce0:	80 95       	com	r24
    1ce2:	84 23       	and	r24, r20
    1ce4:	8c 93       	st	X, r24
    1ce6:	83 c0       	rjmp	.+262    	; 0x1dee <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    1ce8:	8b 81       	ldd	r24, Y+3	; 0x03
    1cea:	81 30       	cpi	r24, 0x01	; 1
    1cec:	a1 f4       	brne	.+40     	; 0x1d16 <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    1cee:	a7 e3       	ldi	r26, 0x37	; 55
    1cf0:	b0 e0       	ldi	r27, 0x00	; 0
    1cf2:	e7 e3       	ldi	r30, 0x37	; 55
    1cf4:	f0 e0       	ldi	r31, 0x00	; 0
    1cf6:	80 81       	ld	r24, Z
    1cf8:	48 2f       	mov	r20, r24
    1cfa:	8a 81       	ldd	r24, Y+2	; 0x02
    1cfc:	28 2f       	mov	r18, r24
    1cfe:	30 e0       	ldi	r19, 0x00	; 0
    1d00:	81 e0       	ldi	r24, 0x01	; 1
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	02 2e       	mov	r0, r18
    1d06:	02 c0       	rjmp	.+4      	; 0x1d0c <GPIO_setupPinDirection+0xe4>
    1d08:	88 0f       	add	r24, r24
    1d0a:	99 1f       	adc	r25, r25
    1d0c:	0a 94       	dec	r0
    1d0e:	e2 f7       	brpl	.-8      	; 0x1d08 <GPIO_setupPinDirection+0xe0>
    1d10:	84 2b       	or	r24, r20
    1d12:	8c 93       	st	X, r24
    1d14:	6c c0       	rjmp	.+216    	; 0x1dee <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    1d16:	a7 e3       	ldi	r26, 0x37	; 55
    1d18:	b0 e0       	ldi	r27, 0x00	; 0
    1d1a:	e7 e3       	ldi	r30, 0x37	; 55
    1d1c:	f0 e0       	ldi	r31, 0x00	; 0
    1d1e:	80 81       	ld	r24, Z
    1d20:	48 2f       	mov	r20, r24
    1d22:	8a 81       	ldd	r24, Y+2	; 0x02
    1d24:	28 2f       	mov	r18, r24
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	81 e0       	ldi	r24, 0x01	; 1
    1d2a:	90 e0       	ldi	r25, 0x00	; 0
    1d2c:	02 2e       	mov	r0, r18
    1d2e:	02 c0       	rjmp	.+4      	; 0x1d34 <GPIO_setupPinDirection+0x10c>
    1d30:	88 0f       	add	r24, r24
    1d32:	99 1f       	adc	r25, r25
    1d34:	0a 94       	dec	r0
    1d36:	e2 f7       	brpl	.-8      	; 0x1d30 <GPIO_setupPinDirection+0x108>
    1d38:	80 95       	com	r24
    1d3a:	84 23       	and	r24, r20
    1d3c:	8c 93       	st	X, r24
    1d3e:	57 c0       	rjmp	.+174    	; 0x1dee <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    1d40:	8b 81       	ldd	r24, Y+3	; 0x03
    1d42:	81 30       	cpi	r24, 0x01	; 1
    1d44:	a1 f4       	brne	.+40     	; 0x1d6e <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    1d46:	a4 e3       	ldi	r26, 0x34	; 52
    1d48:	b0 e0       	ldi	r27, 0x00	; 0
    1d4a:	e4 e3       	ldi	r30, 0x34	; 52
    1d4c:	f0 e0       	ldi	r31, 0x00	; 0
    1d4e:	80 81       	ld	r24, Z
    1d50:	48 2f       	mov	r20, r24
    1d52:	8a 81       	ldd	r24, Y+2	; 0x02
    1d54:	28 2f       	mov	r18, r24
    1d56:	30 e0       	ldi	r19, 0x00	; 0
    1d58:	81 e0       	ldi	r24, 0x01	; 1
    1d5a:	90 e0       	ldi	r25, 0x00	; 0
    1d5c:	02 2e       	mov	r0, r18
    1d5e:	02 c0       	rjmp	.+4      	; 0x1d64 <GPIO_setupPinDirection+0x13c>
    1d60:	88 0f       	add	r24, r24
    1d62:	99 1f       	adc	r25, r25
    1d64:	0a 94       	dec	r0
    1d66:	e2 f7       	brpl	.-8      	; 0x1d60 <GPIO_setupPinDirection+0x138>
    1d68:	84 2b       	or	r24, r20
    1d6a:	8c 93       	st	X, r24
    1d6c:	40 c0       	rjmp	.+128    	; 0x1dee <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    1d6e:	a4 e3       	ldi	r26, 0x34	; 52
    1d70:	b0 e0       	ldi	r27, 0x00	; 0
    1d72:	e4 e3       	ldi	r30, 0x34	; 52
    1d74:	f0 e0       	ldi	r31, 0x00	; 0
    1d76:	80 81       	ld	r24, Z
    1d78:	48 2f       	mov	r20, r24
    1d7a:	8a 81       	ldd	r24, Y+2	; 0x02
    1d7c:	28 2f       	mov	r18, r24
    1d7e:	30 e0       	ldi	r19, 0x00	; 0
    1d80:	81 e0       	ldi	r24, 0x01	; 1
    1d82:	90 e0       	ldi	r25, 0x00	; 0
    1d84:	02 2e       	mov	r0, r18
    1d86:	02 c0       	rjmp	.+4      	; 0x1d8c <GPIO_setupPinDirection+0x164>
    1d88:	88 0f       	add	r24, r24
    1d8a:	99 1f       	adc	r25, r25
    1d8c:	0a 94       	dec	r0
    1d8e:	e2 f7       	brpl	.-8      	; 0x1d88 <GPIO_setupPinDirection+0x160>
    1d90:	80 95       	com	r24
    1d92:	84 23       	and	r24, r20
    1d94:	8c 93       	st	X, r24
    1d96:	2b c0       	rjmp	.+86     	; 0x1dee <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    1d98:	8b 81       	ldd	r24, Y+3	; 0x03
    1d9a:	81 30       	cpi	r24, 0x01	; 1
    1d9c:	a1 f4       	brne	.+40     	; 0x1dc6 <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    1d9e:	a1 e3       	ldi	r26, 0x31	; 49
    1da0:	b0 e0       	ldi	r27, 0x00	; 0
    1da2:	e1 e3       	ldi	r30, 0x31	; 49
    1da4:	f0 e0       	ldi	r31, 0x00	; 0
    1da6:	80 81       	ld	r24, Z
    1da8:	48 2f       	mov	r20, r24
    1daa:	8a 81       	ldd	r24, Y+2	; 0x02
    1dac:	28 2f       	mov	r18, r24
    1dae:	30 e0       	ldi	r19, 0x00	; 0
    1db0:	81 e0       	ldi	r24, 0x01	; 1
    1db2:	90 e0       	ldi	r25, 0x00	; 0
    1db4:	02 2e       	mov	r0, r18
    1db6:	02 c0       	rjmp	.+4      	; 0x1dbc <GPIO_setupPinDirection+0x194>
    1db8:	88 0f       	add	r24, r24
    1dba:	99 1f       	adc	r25, r25
    1dbc:	0a 94       	dec	r0
    1dbe:	e2 f7       	brpl	.-8      	; 0x1db8 <GPIO_setupPinDirection+0x190>
    1dc0:	84 2b       	or	r24, r20
    1dc2:	8c 93       	st	X, r24
    1dc4:	14 c0       	rjmp	.+40     	; 0x1dee <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    1dc6:	a1 e3       	ldi	r26, 0x31	; 49
    1dc8:	b0 e0       	ldi	r27, 0x00	; 0
    1dca:	e1 e3       	ldi	r30, 0x31	; 49
    1dcc:	f0 e0       	ldi	r31, 0x00	; 0
    1dce:	80 81       	ld	r24, Z
    1dd0:	48 2f       	mov	r20, r24
    1dd2:	8a 81       	ldd	r24, Y+2	; 0x02
    1dd4:	28 2f       	mov	r18, r24
    1dd6:	30 e0       	ldi	r19, 0x00	; 0
    1dd8:	81 e0       	ldi	r24, 0x01	; 1
    1dda:	90 e0       	ldi	r25, 0x00	; 0
    1ddc:	02 2e       	mov	r0, r18
    1dde:	02 c0       	rjmp	.+4      	; 0x1de4 <GPIO_setupPinDirection+0x1bc>
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	0a 94       	dec	r0
    1de6:	e2 f7       	brpl	.-8      	; 0x1de0 <GPIO_setupPinDirection+0x1b8>
    1de8:	80 95       	com	r24
    1dea:	84 23       	and	r24, r20
    1dec:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1dee:	0f 90       	pop	r0
    1df0:	0f 90       	pop	r0
    1df2:	0f 90       	pop	r0
    1df4:	0f 90       	pop	r0
    1df6:	0f 90       	pop	r0
    1df8:	cf 91       	pop	r28
    1dfa:	df 91       	pop	r29
    1dfc:	08 95       	ret

00001dfe <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    1dfe:	df 93       	push	r29
    1e00:	cf 93       	push	r28
    1e02:	00 d0       	rcall	.+0      	; 0x1e04 <GPIO_writePin+0x6>
    1e04:	00 d0       	rcall	.+0      	; 0x1e06 <GPIO_writePin+0x8>
    1e06:	0f 92       	push	r0
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
    1e0c:	89 83       	std	Y+1, r24	; 0x01
    1e0e:	6a 83       	std	Y+2, r22	; 0x02
    1e10:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1e12:	8a 81       	ldd	r24, Y+2	; 0x02
    1e14:	88 30       	cpi	r24, 0x08	; 8
    1e16:	08 f0       	brcs	.+2      	; 0x1e1a <GPIO_writePin+0x1c>
    1e18:	d5 c0       	rjmp	.+426    	; 0x1fc4 <GPIO_writePin+0x1c6>
    1e1a:	89 81       	ldd	r24, Y+1	; 0x01
    1e1c:	84 30       	cpi	r24, 0x04	; 4
    1e1e:	08 f0       	brcs	.+2      	; 0x1e22 <GPIO_writePin+0x24>
    1e20:	d1 c0       	rjmp	.+418    	; 0x1fc4 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    1e22:	89 81       	ldd	r24, Y+1	; 0x01
    1e24:	28 2f       	mov	r18, r24
    1e26:	30 e0       	ldi	r19, 0x00	; 0
    1e28:	3d 83       	std	Y+5, r19	; 0x05
    1e2a:	2c 83       	std	Y+4, r18	; 0x04
    1e2c:	8c 81       	ldd	r24, Y+4	; 0x04
    1e2e:	9d 81       	ldd	r25, Y+5	; 0x05
    1e30:	81 30       	cpi	r24, 0x01	; 1
    1e32:	91 05       	cpc	r25, r1
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <GPIO_writePin+0x3a>
    1e36:	43 c0       	rjmp	.+134    	; 0x1ebe <GPIO_writePin+0xc0>
    1e38:	2c 81       	ldd	r18, Y+4	; 0x04
    1e3a:	3d 81       	ldd	r19, Y+5	; 0x05
    1e3c:	22 30       	cpi	r18, 0x02	; 2
    1e3e:	31 05       	cpc	r19, r1
    1e40:	2c f4       	brge	.+10     	; 0x1e4c <GPIO_writePin+0x4e>
    1e42:	8c 81       	ldd	r24, Y+4	; 0x04
    1e44:	9d 81       	ldd	r25, Y+5	; 0x05
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	71 f0       	breq	.+28     	; 0x1e66 <GPIO_writePin+0x68>
    1e4a:	bc c0       	rjmp	.+376    	; 0x1fc4 <GPIO_writePin+0x1c6>
    1e4c:	2c 81       	ldd	r18, Y+4	; 0x04
    1e4e:	3d 81       	ldd	r19, Y+5	; 0x05
    1e50:	22 30       	cpi	r18, 0x02	; 2
    1e52:	31 05       	cpc	r19, r1
    1e54:	09 f4       	brne	.+2      	; 0x1e58 <GPIO_writePin+0x5a>
    1e56:	5f c0       	rjmp	.+190    	; 0x1f16 <GPIO_writePin+0x118>
    1e58:	8c 81       	ldd	r24, Y+4	; 0x04
    1e5a:	9d 81       	ldd	r25, Y+5	; 0x05
    1e5c:	83 30       	cpi	r24, 0x03	; 3
    1e5e:	91 05       	cpc	r25, r1
    1e60:	09 f4       	brne	.+2      	; 0x1e64 <GPIO_writePin+0x66>
    1e62:	85 c0       	rjmp	.+266    	; 0x1f6e <GPIO_writePin+0x170>
    1e64:	af c0       	rjmp	.+350    	; 0x1fc4 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    1e66:	8b 81       	ldd	r24, Y+3	; 0x03
    1e68:	81 30       	cpi	r24, 0x01	; 1
    1e6a:	a1 f4       	brne	.+40     	; 0x1e94 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    1e6c:	ab e3       	ldi	r26, 0x3B	; 59
    1e6e:	b0 e0       	ldi	r27, 0x00	; 0
    1e70:	eb e3       	ldi	r30, 0x3B	; 59
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	80 81       	ld	r24, Z
    1e76:	48 2f       	mov	r20, r24
    1e78:	8a 81       	ldd	r24, Y+2	; 0x02
    1e7a:	28 2f       	mov	r18, r24
    1e7c:	30 e0       	ldi	r19, 0x00	; 0
    1e7e:	81 e0       	ldi	r24, 0x01	; 1
    1e80:	90 e0       	ldi	r25, 0x00	; 0
    1e82:	02 2e       	mov	r0, r18
    1e84:	02 c0       	rjmp	.+4      	; 0x1e8a <GPIO_writePin+0x8c>
    1e86:	88 0f       	add	r24, r24
    1e88:	99 1f       	adc	r25, r25
    1e8a:	0a 94       	dec	r0
    1e8c:	e2 f7       	brpl	.-8      	; 0x1e86 <GPIO_writePin+0x88>
    1e8e:	84 2b       	or	r24, r20
    1e90:	8c 93       	st	X, r24
    1e92:	98 c0       	rjmp	.+304    	; 0x1fc4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    1e94:	ab e3       	ldi	r26, 0x3B	; 59
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	eb e3       	ldi	r30, 0x3B	; 59
    1e9a:	f0 e0       	ldi	r31, 0x00	; 0
    1e9c:	80 81       	ld	r24, Z
    1e9e:	48 2f       	mov	r20, r24
    1ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ea2:	28 2f       	mov	r18, r24
    1ea4:	30 e0       	ldi	r19, 0x00	; 0
    1ea6:	81 e0       	ldi	r24, 0x01	; 1
    1ea8:	90 e0       	ldi	r25, 0x00	; 0
    1eaa:	02 2e       	mov	r0, r18
    1eac:	02 c0       	rjmp	.+4      	; 0x1eb2 <GPIO_writePin+0xb4>
    1eae:	88 0f       	add	r24, r24
    1eb0:	99 1f       	adc	r25, r25
    1eb2:	0a 94       	dec	r0
    1eb4:	e2 f7       	brpl	.-8      	; 0x1eae <GPIO_writePin+0xb0>
    1eb6:	80 95       	com	r24
    1eb8:	84 23       	and	r24, r20
    1eba:	8c 93       	st	X, r24
    1ebc:	83 c0       	rjmp	.+262    	; 0x1fc4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    1ebe:	8b 81       	ldd	r24, Y+3	; 0x03
    1ec0:	81 30       	cpi	r24, 0x01	; 1
    1ec2:	a1 f4       	brne	.+40     	; 0x1eec <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    1ec4:	a8 e3       	ldi	r26, 0x38	; 56
    1ec6:	b0 e0       	ldi	r27, 0x00	; 0
    1ec8:	e8 e3       	ldi	r30, 0x38	; 56
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	48 2f       	mov	r20, r24
    1ed0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ed2:	28 2f       	mov	r18, r24
    1ed4:	30 e0       	ldi	r19, 0x00	; 0
    1ed6:	81 e0       	ldi	r24, 0x01	; 1
    1ed8:	90 e0       	ldi	r25, 0x00	; 0
    1eda:	02 2e       	mov	r0, r18
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <GPIO_writePin+0xe4>
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	0a 94       	dec	r0
    1ee4:	e2 f7       	brpl	.-8      	; 0x1ede <GPIO_writePin+0xe0>
    1ee6:	84 2b       	or	r24, r20
    1ee8:	8c 93       	st	X, r24
    1eea:	6c c0       	rjmp	.+216    	; 0x1fc4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    1eec:	a8 e3       	ldi	r26, 0x38	; 56
    1eee:	b0 e0       	ldi	r27, 0x00	; 0
    1ef0:	e8 e3       	ldi	r30, 0x38	; 56
    1ef2:	f0 e0       	ldi	r31, 0x00	; 0
    1ef4:	80 81       	ld	r24, Z
    1ef6:	48 2f       	mov	r20, r24
    1ef8:	8a 81       	ldd	r24, Y+2	; 0x02
    1efa:	28 2f       	mov	r18, r24
    1efc:	30 e0       	ldi	r19, 0x00	; 0
    1efe:	81 e0       	ldi	r24, 0x01	; 1
    1f00:	90 e0       	ldi	r25, 0x00	; 0
    1f02:	02 2e       	mov	r0, r18
    1f04:	02 c0       	rjmp	.+4      	; 0x1f0a <GPIO_writePin+0x10c>
    1f06:	88 0f       	add	r24, r24
    1f08:	99 1f       	adc	r25, r25
    1f0a:	0a 94       	dec	r0
    1f0c:	e2 f7       	brpl	.-8      	; 0x1f06 <GPIO_writePin+0x108>
    1f0e:	80 95       	com	r24
    1f10:	84 23       	and	r24, r20
    1f12:	8c 93       	st	X, r24
    1f14:	57 c0       	rjmp	.+174    	; 0x1fc4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    1f16:	8b 81       	ldd	r24, Y+3	; 0x03
    1f18:	81 30       	cpi	r24, 0x01	; 1
    1f1a:	a1 f4       	brne	.+40     	; 0x1f44 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    1f1c:	a5 e3       	ldi	r26, 0x35	; 53
    1f1e:	b0 e0       	ldi	r27, 0x00	; 0
    1f20:	e5 e3       	ldi	r30, 0x35	; 53
    1f22:	f0 e0       	ldi	r31, 0x00	; 0
    1f24:	80 81       	ld	r24, Z
    1f26:	48 2f       	mov	r20, r24
    1f28:	8a 81       	ldd	r24, Y+2	; 0x02
    1f2a:	28 2f       	mov	r18, r24
    1f2c:	30 e0       	ldi	r19, 0x00	; 0
    1f2e:	81 e0       	ldi	r24, 0x01	; 1
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	02 2e       	mov	r0, r18
    1f34:	02 c0       	rjmp	.+4      	; 0x1f3a <GPIO_writePin+0x13c>
    1f36:	88 0f       	add	r24, r24
    1f38:	99 1f       	adc	r25, r25
    1f3a:	0a 94       	dec	r0
    1f3c:	e2 f7       	brpl	.-8      	; 0x1f36 <GPIO_writePin+0x138>
    1f3e:	84 2b       	or	r24, r20
    1f40:	8c 93       	st	X, r24
    1f42:	40 c0       	rjmp	.+128    	; 0x1fc4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    1f44:	a5 e3       	ldi	r26, 0x35	; 53
    1f46:	b0 e0       	ldi	r27, 0x00	; 0
    1f48:	e5 e3       	ldi	r30, 0x35	; 53
    1f4a:	f0 e0       	ldi	r31, 0x00	; 0
    1f4c:	80 81       	ld	r24, Z
    1f4e:	48 2f       	mov	r20, r24
    1f50:	8a 81       	ldd	r24, Y+2	; 0x02
    1f52:	28 2f       	mov	r18, r24
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	02 2e       	mov	r0, r18
    1f5c:	02 c0       	rjmp	.+4      	; 0x1f62 <GPIO_writePin+0x164>
    1f5e:	88 0f       	add	r24, r24
    1f60:	99 1f       	adc	r25, r25
    1f62:	0a 94       	dec	r0
    1f64:	e2 f7       	brpl	.-8      	; 0x1f5e <GPIO_writePin+0x160>
    1f66:	80 95       	com	r24
    1f68:	84 23       	and	r24, r20
    1f6a:	8c 93       	st	X, r24
    1f6c:	2b c0       	rjmp	.+86     	; 0x1fc4 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    1f6e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f70:	81 30       	cpi	r24, 0x01	; 1
    1f72:	a1 f4       	brne	.+40     	; 0x1f9c <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    1f74:	a2 e3       	ldi	r26, 0x32	; 50
    1f76:	b0 e0       	ldi	r27, 0x00	; 0
    1f78:	e2 e3       	ldi	r30, 0x32	; 50
    1f7a:	f0 e0       	ldi	r31, 0x00	; 0
    1f7c:	80 81       	ld	r24, Z
    1f7e:	48 2f       	mov	r20, r24
    1f80:	8a 81       	ldd	r24, Y+2	; 0x02
    1f82:	28 2f       	mov	r18, r24
    1f84:	30 e0       	ldi	r19, 0x00	; 0
    1f86:	81 e0       	ldi	r24, 0x01	; 1
    1f88:	90 e0       	ldi	r25, 0x00	; 0
    1f8a:	02 2e       	mov	r0, r18
    1f8c:	02 c0       	rjmp	.+4      	; 0x1f92 <GPIO_writePin+0x194>
    1f8e:	88 0f       	add	r24, r24
    1f90:	99 1f       	adc	r25, r25
    1f92:	0a 94       	dec	r0
    1f94:	e2 f7       	brpl	.-8      	; 0x1f8e <GPIO_writePin+0x190>
    1f96:	84 2b       	or	r24, r20
    1f98:	8c 93       	st	X, r24
    1f9a:	14 c0       	rjmp	.+40     	; 0x1fc4 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    1f9c:	a2 e3       	ldi	r26, 0x32	; 50
    1f9e:	b0 e0       	ldi	r27, 0x00	; 0
    1fa0:	e2 e3       	ldi	r30, 0x32	; 50
    1fa2:	f0 e0       	ldi	r31, 0x00	; 0
    1fa4:	80 81       	ld	r24, Z
    1fa6:	48 2f       	mov	r20, r24
    1fa8:	8a 81       	ldd	r24, Y+2	; 0x02
    1faa:	28 2f       	mov	r18, r24
    1fac:	30 e0       	ldi	r19, 0x00	; 0
    1fae:	81 e0       	ldi	r24, 0x01	; 1
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	02 2e       	mov	r0, r18
    1fb4:	02 c0       	rjmp	.+4      	; 0x1fba <GPIO_writePin+0x1bc>
    1fb6:	88 0f       	add	r24, r24
    1fb8:	99 1f       	adc	r25, r25
    1fba:	0a 94       	dec	r0
    1fbc:	e2 f7       	brpl	.-8      	; 0x1fb6 <GPIO_writePin+0x1b8>
    1fbe:	80 95       	com	r24
    1fc0:	84 23       	and	r24, r20
    1fc2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    1fc4:	0f 90       	pop	r0
    1fc6:	0f 90       	pop	r0
    1fc8:	0f 90       	pop	r0
    1fca:	0f 90       	pop	r0
    1fcc:	0f 90       	pop	r0
    1fce:	cf 91       	pop	r28
    1fd0:	df 91       	pop	r29
    1fd2:	08 95       	ret

00001fd4 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    1fd4:	df 93       	push	r29
    1fd6:	cf 93       	push	r28
    1fd8:	00 d0       	rcall	.+0      	; 0x1fda <GPIO_readPin+0x6>
    1fda:	00 d0       	rcall	.+0      	; 0x1fdc <GPIO_readPin+0x8>
    1fdc:	0f 92       	push	r0
    1fde:	cd b7       	in	r28, 0x3d	; 61
    1fe0:	de b7       	in	r29, 0x3e	; 62
    1fe2:	8a 83       	std	Y+2, r24	; 0x02
    1fe4:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    1fe6:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    1fe8:	8b 81       	ldd	r24, Y+3	; 0x03
    1fea:	88 30       	cpi	r24, 0x08	; 8
    1fec:	08 f0       	brcs	.+2      	; 0x1ff0 <GPIO_readPin+0x1c>
    1fee:	84 c0       	rjmp	.+264    	; 0x20f8 <GPIO_readPin+0x124>
    1ff0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ff2:	84 30       	cpi	r24, 0x04	; 4
    1ff4:	08 f0       	brcs	.+2      	; 0x1ff8 <GPIO_readPin+0x24>
    1ff6:	80 c0       	rjmp	.+256    	; 0x20f8 <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    1ff8:	8a 81       	ldd	r24, Y+2	; 0x02
    1ffa:	28 2f       	mov	r18, r24
    1ffc:	30 e0       	ldi	r19, 0x00	; 0
    1ffe:	3d 83       	std	Y+5, r19	; 0x05
    2000:	2c 83       	std	Y+4, r18	; 0x04
    2002:	4c 81       	ldd	r20, Y+4	; 0x04
    2004:	5d 81       	ldd	r21, Y+5	; 0x05
    2006:	41 30       	cpi	r20, 0x01	; 1
    2008:	51 05       	cpc	r21, r1
    200a:	79 f1       	breq	.+94     	; 0x206a <GPIO_readPin+0x96>
    200c:	8c 81       	ldd	r24, Y+4	; 0x04
    200e:	9d 81       	ldd	r25, Y+5	; 0x05
    2010:	82 30       	cpi	r24, 0x02	; 2
    2012:	91 05       	cpc	r25, r1
    2014:	34 f4       	brge	.+12     	; 0x2022 <GPIO_readPin+0x4e>
    2016:	2c 81       	ldd	r18, Y+4	; 0x04
    2018:	3d 81       	ldd	r19, Y+5	; 0x05
    201a:	21 15       	cp	r18, r1
    201c:	31 05       	cpc	r19, r1
    201e:	69 f0       	breq	.+26     	; 0x203a <GPIO_readPin+0x66>
    2020:	6b c0       	rjmp	.+214    	; 0x20f8 <GPIO_readPin+0x124>
    2022:	4c 81       	ldd	r20, Y+4	; 0x04
    2024:	5d 81       	ldd	r21, Y+5	; 0x05
    2026:	42 30       	cpi	r20, 0x02	; 2
    2028:	51 05       	cpc	r21, r1
    202a:	b9 f1       	breq	.+110    	; 0x209a <GPIO_readPin+0xc6>
    202c:	8c 81       	ldd	r24, Y+4	; 0x04
    202e:	9d 81       	ldd	r25, Y+5	; 0x05
    2030:	83 30       	cpi	r24, 0x03	; 3
    2032:	91 05       	cpc	r25, r1
    2034:	09 f4       	brne	.+2      	; 0x2038 <GPIO_readPin+0x64>
    2036:	49 c0       	rjmp	.+146    	; 0x20ca <GPIO_readPin+0xf6>
    2038:	5f c0       	rjmp	.+190    	; 0x20f8 <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    203a:	e9 e3       	ldi	r30, 0x39	; 57
    203c:	f0 e0       	ldi	r31, 0x00	; 0
    203e:	80 81       	ld	r24, Z
    2040:	28 2f       	mov	r18, r24
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	8b 81       	ldd	r24, Y+3	; 0x03
    2046:	88 2f       	mov	r24, r24
    2048:	90 e0       	ldi	r25, 0x00	; 0
    204a:	a9 01       	movw	r20, r18
    204c:	02 c0       	rjmp	.+4      	; 0x2052 <GPIO_readPin+0x7e>
    204e:	55 95       	asr	r21
    2050:	47 95       	ror	r20
    2052:	8a 95       	dec	r24
    2054:	e2 f7       	brpl	.-8      	; 0x204e <GPIO_readPin+0x7a>
    2056:	ca 01       	movw	r24, r20
    2058:	81 70       	andi	r24, 0x01	; 1
    205a:	90 70       	andi	r25, 0x00	; 0
    205c:	88 23       	and	r24, r24
    205e:	19 f0       	breq	.+6      	; 0x2066 <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2060:	81 e0       	ldi	r24, 0x01	; 1
    2062:	89 83       	std	Y+1, r24	; 0x01
    2064:	49 c0       	rjmp	.+146    	; 0x20f8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2066:	19 82       	std	Y+1, r1	; 0x01
    2068:	47 c0       	rjmp	.+142    	; 0x20f8 <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    206a:	e6 e3       	ldi	r30, 0x36	; 54
    206c:	f0 e0       	ldi	r31, 0x00	; 0
    206e:	80 81       	ld	r24, Z
    2070:	28 2f       	mov	r18, r24
    2072:	30 e0       	ldi	r19, 0x00	; 0
    2074:	8b 81       	ldd	r24, Y+3	; 0x03
    2076:	88 2f       	mov	r24, r24
    2078:	90 e0       	ldi	r25, 0x00	; 0
    207a:	a9 01       	movw	r20, r18
    207c:	02 c0       	rjmp	.+4      	; 0x2082 <GPIO_readPin+0xae>
    207e:	55 95       	asr	r21
    2080:	47 95       	ror	r20
    2082:	8a 95       	dec	r24
    2084:	e2 f7       	brpl	.-8      	; 0x207e <GPIO_readPin+0xaa>
    2086:	ca 01       	movw	r24, r20
    2088:	81 70       	andi	r24, 0x01	; 1
    208a:	90 70       	andi	r25, 0x00	; 0
    208c:	88 23       	and	r24, r24
    208e:	19 f0       	breq	.+6      	; 0x2096 <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	89 83       	std	Y+1, r24	; 0x01
    2094:	31 c0       	rjmp	.+98     	; 0x20f8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    2096:	19 82       	std	Y+1, r1	; 0x01
    2098:	2f c0       	rjmp	.+94     	; 0x20f8 <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    209a:	e3 e3       	ldi	r30, 0x33	; 51
    209c:	f0 e0       	ldi	r31, 0x00	; 0
    209e:	80 81       	ld	r24, Z
    20a0:	28 2f       	mov	r18, r24
    20a2:	30 e0       	ldi	r19, 0x00	; 0
    20a4:	8b 81       	ldd	r24, Y+3	; 0x03
    20a6:	88 2f       	mov	r24, r24
    20a8:	90 e0       	ldi	r25, 0x00	; 0
    20aa:	a9 01       	movw	r20, r18
    20ac:	02 c0       	rjmp	.+4      	; 0x20b2 <GPIO_readPin+0xde>
    20ae:	55 95       	asr	r21
    20b0:	47 95       	ror	r20
    20b2:	8a 95       	dec	r24
    20b4:	e2 f7       	brpl	.-8      	; 0x20ae <GPIO_readPin+0xda>
    20b6:	ca 01       	movw	r24, r20
    20b8:	81 70       	andi	r24, 0x01	; 1
    20ba:	90 70       	andi	r25, 0x00	; 0
    20bc:	88 23       	and	r24, r24
    20be:	19 f0       	breq	.+6      	; 0x20c6 <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    20c0:	81 e0       	ldi	r24, 0x01	; 1
    20c2:	89 83       	std	Y+1, r24	; 0x01
    20c4:	19 c0       	rjmp	.+50     	; 0x20f8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20c6:	19 82       	std	Y+1, r1	; 0x01
    20c8:	17 c0       	rjmp	.+46     	; 0x20f8 <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    20ca:	e0 e3       	ldi	r30, 0x30	; 48
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	80 81       	ld	r24, Z
    20d0:	28 2f       	mov	r18, r24
    20d2:	30 e0       	ldi	r19, 0x00	; 0
    20d4:	8b 81       	ldd	r24, Y+3	; 0x03
    20d6:	88 2f       	mov	r24, r24
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	a9 01       	movw	r20, r18
    20dc:	02 c0       	rjmp	.+4      	; 0x20e2 <GPIO_readPin+0x10e>
    20de:	55 95       	asr	r21
    20e0:	47 95       	ror	r20
    20e2:	8a 95       	dec	r24
    20e4:	e2 f7       	brpl	.-8      	; 0x20de <GPIO_readPin+0x10a>
    20e6:	ca 01       	movw	r24, r20
    20e8:	81 70       	andi	r24, 0x01	; 1
    20ea:	90 70       	andi	r25, 0x00	; 0
    20ec:	88 23       	and	r24, r24
    20ee:	19 f0       	breq	.+6      	; 0x20f6 <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	89 83       	std	Y+1, r24	; 0x01
    20f4:	01 c0       	rjmp	.+2      	; 0x20f8 <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    20f6:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    20f8:	89 81       	ldd	r24, Y+1	; 0x01
}
    20fa:	0f 90       	pop	r0
    20fc:	0f 90       	pop	r0
    20fe:	0f 90       	pop	r0
    2100:	0f 90       	pop	r0
    2102:	0f 90       	pop	r0
    2104:	cf 91       	pop	r28
    2106:	df 91       	pop	r29
    2108:	08 95       	ret

0000210a <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    210a:	df 93       	push	r29
    210c:	cf 93       	push	r28
    210e:	00 d0       	rcall	.+0      	; 0x2110 <GPIO_setupPortDirection+0x6>
    2110:	00 d0       	rcall	.+0      	; 0x2112 <GPIO_setupPortDirection+0x8>
    2112:	cd b7       	in	r28, 0x3d	; 61
    2114:	de b7       	in	r29, 0x3e	; 62
    2116:	89 83       	std	Y+1, r24	; 0x01
    2118:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    211a:	89 81       	ldd	r24, Y+1	; 0x01
    211c:	84 30       	cpi	r24, 0x04	; 4
    211e:	90 f5       	brcc	.+100    	; 0x2184 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    2120:	89 81       	ldd	r24, Y+1	; 0x01
    2122:	28 2f       	mov	r18, r24
    2124:	30 e0       	ldi	r19, 0x00	; 0
    2126:	3c 83       	std	Y+4, r19	; 0x04
    2128:	2b 83       	std	Y+3, r18	; 0x03
    212a:	8b 81       	ldd	r24, Y+3	; 0x03
    212c:	9c 81       	ldd	r25, Y+4	; 0x04
    212e:	81 30       	cpi	r24, 0x01	; 1
    2130:	91 05       	cpc	r25, r1
    2132:	d1 f0       	breq	.+52     	; 0x2168 <GPIO_setupPortDirection+0x5e>
    2134:	2b 81       	ldd	r18, Y+3	; 0x03
    2136:	3c 81       	ldd	r19, Y+4	; 0x04
    2138:	22 30       	cpi	r18, 0x02	; 2
    213a:	31 05       	cpc	r19, r1
    213c:	2c f4       	brge	.+10     	; 0x2148 <GPIO_setupPortDirection+0x3e>
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	00 97       	sbiw	r24, 0x00	; 0
    2144:	61 f0       	breq	.+24     	; 0x215e <GPIO_setupPortDirection+0x54>
    2146:	1e c0       	rjmp	.+60     	; 0x2184 <GPIO_setupPortDirection+0x7a>
    2148:	2b 81       	ldd	r18, Y+3	; 0x03
    214a:	3c 81       	ldd	r19, Y+4	; 0x04
    214c:	22 30       	cpi	r18, 0x02	; 2
    214e:	31 05       	cpc	r19, r1
    2150:	81 f0       	breq	.+32     	; 0x2172 <GPIO_setupPortDirection+0x68>
    2152:	8b 81       	ldd	r24, Y+3	; 0x03
    2154:	9c 81       	ldd	r25, Y+4	; 0x04
    2156:	83 30       	cpi	r24, 0x03	; 3
    2158:	91 05       	cpc	r25, r1
    215a:	81 f0       	breq	.+32     	; 0x217c <GPIO_setupPortDirection+0x72>
    215c:	13 c0       	rjmp	.+38     	; 0x2184 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    215e:	ea e3       	ldi	r30, 0x3A	; 58
    2160:	f0 e0       	ldi	r31, 0x00	; 0
    2162:	8a 81       	ldd	r24, Y+2	; 0x02
    2164:	80 83       	st	Z, r24
    2166:	0e c0       	rjmp	.+28     	; 0x2184 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    2168:	e7 e3       	ldi	r30, 0x37	; 55
    216a:	f0 e0       	ldi	r31, 0x00	; 0
    216c:	8a 81       	ldd	r24, Y+2	; 0x02
    216e:	80 83       	st	Z, r24
    2170:	09 c0       	rjmp	.+18     	; 0x2184 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2172:	e4 e3       	ldi	r30, 0x34	; 52
    2174:	f0 e0       	ldi	r31, 0x00	; 0
    2176:	8a 81       	ldd	r24, Y+2	; 0x02
    2178:	80 83       	st	Z, r24
    217a:	04 c0       	rjmp	.+8      	; 0x2184 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    217c:	e1 e3       	ldi	r30, 0x31	; 49
    217e:	f0 e0       	ldi	r31, 0x00	; 0
    2180:	8a 81       	ldd	r24, Y+2	; 0x02
    2182:	80 83       	st	Z, r24
			break;
		}
	}
}
    2184:	0f 90       	pop	r0
    2186:	0f 90       	pop	r0
    2188:	0f 90       	pop	r0
    218a:	0f 90       	pop	r0
    218c:	cf 91       	pop	r28
    218e:	df 91       	pop	r29
    2190:	08 95       	ret

00002192 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2192:	df 93       	push	r29
    2194:	cf 93       	push	r28
    2196:	00 d0       	rcall	.+0      	; 0x2198 <GPIO_writePort+0x6>
    2198:	00 d0       	rcall	.+0      	; 0x219a <GPIO_writePort+0x8>
    219a:	cd b7       	in	r28, 0x3d	; 61
    219c:	de b7       	in	r29, 0x3e	; 62
    219e:	89 83       	std	Y+1, r24	; 0x01
    21a0:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    21a2:	89 81       	ldd	r24, Y+1	; 0x01
    21a4:	84 30       	cpi	r24, 0x04	; 4
    21a6:	90 f5       	brcc	.+100    	; 0x220c <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    21a8:	89 81       	ldd	r24, Y+1	; 0x01
    21aa:	28 2f       	mov	r18, r24
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	3c 83       	std	Y+4, r19	; 0x04
    21b0:	2b 83       	std	Y+3, r18	; 0x03
    21b2:	8b 81       	ldd	r24, Y+3	; 0x03
    21b4:	9c 81       	ldd	r25, Y+4	; 0x04
    21b6:	81 30       	cpi	r24, 0x01	; 1
    21b8:	91 05       	cpc	r25, r1
    21ba:	d1 f0       	breq	.+52     	; 0x21f0 <GPIO_writePort+0x5e>
    21bc:	2b 81       	ldd	r18, Y+3	; 0x03
    21be:	3c 81       	ldd	r19, Y+4	; 0x04
    21c0:	22 30       	cpi	r18, 0x02	; 2
    21c2:	31 05       	cpc	r19, r1
    21c4:	2c f4       	brge	.+10     	; 0x21d0 <GPIO_writePort+0x3e>
    21c6:	8b 81       	ldd	r24, Y+3	; 0x03
    21c8:	9c 81       	ldd	r25, Y+4	; 0x04
    21ca:	00 97       	sbiw	r24, 0x00	; 0
    21cc:	61 f0       	breq	.+24     	; 0x21e6 <GPIO_writePort+0x54>
    21ce:	1e c0       	rjmp	.+60     	; 0x220c <GPIO_writePort+0x7a>
    21d0:	2b 81       	ldd	r18, Y+3	; 0x03
    21d2:	3c 81       	ldd	r19, Y+4	; 0x04
    21d4:	22 30       	cpi	r18, 0x02	; 2
    21d6:	31 05       	cpc	r19, r1
    21d8:	81 f0       	breq	.+32     	; 0x21fa <GPIO_writePort+0x68>
    21da:	8b 81       	ldd	r24, Y+3	; 0x03
    21dc:	9c 81       	ldd	r25, Y+4	; 0x04
    21de:	83 30       	cpi	r24, 0x03	; 3
    21e0:	91 05       	cpc	r25, r1
    21e2:	81 f0       	breq	.+32     	; 0x2204 <GPIO_writePort+0x72>
    21e4:	13 c0       	rjmp	.+38     	; 0x220c <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    21e6:	eb e3       	ldi	r30, 0x3B	; 59
    21e8:	f0 e0       	ldi	r31, 0x00	; 0
    21ea:	8a 81       	ldd	r24, Y+2	; 0x02
    21ec:	80 83       	st	Z, r24
    21ee:	0e c0       	rjmp	.+28     	; 0x220c <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    21f0:	e8 e3       	ldi	r30, 0x38	; 56
    21f2:	f0 e0       	ldi	r31, 0x00	; 0
    21f4:	8a 81       	ldd	r24, Y+2	; 0x02
    21f6:	80 83       	st	Z, r24
    21f8:	09 c0       	rjmp	.+18     	; 0x220c <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    21fa:	e5 e3       	ldi	r30, 0x35	; 53
    21fc:	f0 e0       	ldi	r31, 0x00	; 0
    21fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2200:	80 83       	st	Z, r24
    2202:	04 c0       	rjmp	.+8      	; 0x220c <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    2204:	e2 e3       	ldi	r30, 0x32	; 50
    2206:	f0 e0       	ldi	r31, 0x00	; 0
    2208:	8a 81       	ldd	r24, Y+2	; 0x02
    220a:	80 83       	st	Z, r24
			break;
		}
	}
}
    220c:	0f 90       	pop	r0
    220e:	0f 90       	pop	r0
    2210:	0f 90       	pop	r0
    2212:	0f 90       	pop	r0
    2214:	cf 91       	pop	r28
    2216:	df 91       	pop	r29
    2218:	08 95       	ret

0000221a <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    221a:	df 93       	push	r29
    221c:	cf 93       	push	r28
    221e:	00 d0       	rcall	.+0      	; 0x2220 <GPIO_readPort+0x6>
    2220:	00 d0       	rcall	.+0      	; 0x2222 <GPIO_readPort+0x8>
    2222:	cd b7       	in	r28, 0x3d	; 61
    2224:	de b7       	in	r29, 0x3e	; 62
    2226:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    2228:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    222a:	8a 81       	ldd	r24, Y+2	; 0x02
    222c:	84 30       	cpi	r24, 0x04	; 4
    222e:	90 f5       	brcc	.+100    	; 0x2294 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    2230:	8a 81       	ldd	r24, Y+2	; 0x02
    2232:	28 2f       	mov	r18, r24
    2234:	30 e0       	ldi	r19, 0x00	; 0
    2236:	3c 83       	std	Y+4, r19	; 0x04
    2238:	2b 83       	std	Y+3, r18	; 0x03
    223a:	8b 81       	ldd	r24, Y+3	; 0x03
    223c:	9c 81       	ldd	r25, Y+4	; 0x04
    223e:	81 30       	cpi	r24, 0x01	; 1
    2240:	91 05       	cpc	r25, r1
    2242:	d1 f0       	breq	.+52     	; 0x2278 <GPIO_readPort+0x5e>
    2244:	2b 81       	ldd	r18, Y+3	; 0x03
    2246:	3c 81       	ldd	r19, Y+4	; 0x04
    2248:	22 30       	cpi	r18, 0x02	; 2
    224a:	31 05       	cpc	r19, r1
    224c:	2c f4       	brge	.+10     	; 0x2258 <GPIO_readPort+0x3e>
    224e:	8b 81       	ldd	r24, Y+3	; 0x03
    2250:	9c 81       	ldd	r25, Y+4	; 0x04
    2252:	00 97       	sbiw	r24, 0x00	; 0
    2254:	61 f0       	breq	.+24     	; 0x226e <GPIO_readPort+0x54>
    2256:	1e c0       	rjmp	.+60     	; 0x2294 <GPIO_readPort+0x7a>
    2258:	2b 81       	ldd	r18, Y+3	; 0x03
    225a:	3c 81       	ldd	r19, Y+4	; 0x04
    225c:	22 30       	cpi	r18, 0x02	; 2
    225e:	31 05       	cpc	r19, r1
    2260:	81 f0       	breq	.+32     	; 0x2282 <GPIO_readPort+0x68>
    2262:	8b 81       	ldd	r24, Y+3	; 0x03
    2264:	9c 81       	ldd	r25, Y+4	; 0x04
    2266:	83 30       	cpi	r24, 0x03	; 3
    2268:	91 05       	cpc	r25, r1
    226a:	81 f0       	breq	.+32     	; 0x228c <GPIO_readPort+0x72>
    226c:	13 c0       	rjmp	.+38     	; 0x2294 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    226e:	e9 e3       	ldi	r30, 0x39	; 57
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	89 83       	std	Y+1, r24	; 0x01
    2276:	0e c0       	rjmp	.+28     	; 0x2294 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    2278:	e6 e3       	ldi	r30, 0x36	; 54
    227a:	f0 e0       	ldi	r31, 0x00	; 0
    227c:	80 81       	ld	r24, Z
    227e:	89 83       	std	Y+1, r24	; 0x01
    2280:	09 c0       	rjmp	.+18     	; 0x2294 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2282:	e3 e3       	ldi	r30, 0x33	; 51
    2284:	f0 e0       	ldi	r31, 0x00	; 0
    2286:	80 81       	ld	r24, Z
    2288:	89 83       	std	Y+1, r24	; 0x01
    228a:	04 c0       	rjmp	.+8      	; 0x2294 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    228c:	e0 e3       	ldi	r30, 0x30	; 48
    228e:	f0 e0       	ldi	r31, 0x00	; 0
    2290:	80 81       	ld	r24, Z
    2292:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    2294:	89 81       	ldd	r24, Y+1	; 0x01
}
    2296:	0f 90       	pop	r0
    2298:	0f 90       	pop	r0
    229a:	0f 90       	pop	r0
    229c:	0f 90       	pop	r0
    229e:	cf 91       	pop	r28
    22a0:	df 91       	pop	r29
    22a2:	08 95       	ret

000022a4 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    22a4:	df 93       	push	r29
    22a6:	cf 93       	push	r28
    22a8:	cd b7       	in	r28, 0x3d	; 61
    22aa:	de b7       	in	r29, 0x3e	; 62
    22ac:	2e 97       	sbiw	r28, 0x0e	; 14
    22ae:	0f b6       	in	r0, 0x3f	; 63
    22b0:	f8 94       	cli
    22b2:	de bf       	out	0x3e, r29	; 62
    22b4:	0f be       	out	0x3f, r0	; 63
    22b6:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    22b8:	81 e0       	ldi	r24, 0x01	; 1
    22ba:	66 e0       	ldi	r22, 0x06	; 6
    22bc:	41 e0       	ldi	r20, 0x01	; 1
    22be:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	67 e0       	ldi	r22, 0x07	; 7
    22c6:	41 e0       	ldi	r20, 0x01	; 1
    22c8:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <GPIO_setupPinDirection>
    22cc:	80 e0       	ldi	r24, 0x00	; 0
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	a0 ea       	ldi	r26, 0xA0	; 160
    22d2:	b1 e4       	ldi	r27, 0x41	; 65
    22d4:	8b 87       	std	Y+11, r24	; 0x0b
    22d6:	9c 87       	std	Y+12, r25	; 0x0c
    22d8:	ad 87       	std	Y+13, r26	; 0x0d
    22da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    22dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    22de:	7c 85       	ldd	r23, Y+12	; 0x0c
    22e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    22e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    22e4:	20 e0       	ldi	r18, 0x00	; 0
    22e6:	30 e0       	ldi	r19, 0x00	; 0
    22e8:	4a ef       	ldi	r20, 0xFA	; 250
    22ea:	54 e4       	ldi	r21, 0x44	; 68
    22ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22f0:	dc 01       	movw	r26, r24
    22f2:	cb 01       	movw	r24, r22
    22f4:	8f 83       	std	Y+7, r24	; 0x07
    22f6:	98 87       	std	Y+8, r25	; 0x08
    22f8:	a9 87       	std	Y+9, r26	; 0x09
    22fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    22fc:	6f 81       	ldd	r22, Y+7	; 0x07
    22fe:	78 85       	ldd	r23, Y+8	; 0x08
    2300:	89 85       	ldd	r24, Y+9	; 0x09
    2302:	9a 85       	ldd	r25, Y+10	; 0x0a
    2304:	20 e0       	ldi	r18, 0x00	; 0
    2306:	30 e0       	ldi	r19, 0x00	; 0
    2308:	40 e8       	ldi	r20, 0x80	; 128
    230a:	5f e3       	ldi	r21, 0x3F	; 63
    230c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2310:	88 23       	and	r24, r24
    2312:	2c f4       	brge	.+10     	; 0x231e <LCD_init+0x7a>
		__ticks = 1;
    2314:	81 e0       	ldi	r24, 0x01	; 1
    2316:	90 e0       	ldi	r25, 0x00	; 0
    2318:	9e 83       	std	Y+6, r25	; 0x06
    231a:	8d 83       	std	Y+5, r24	; 0x05
    231c:	3f c0       	rjmp	.+126    	; 0x239c <LCD_init+0xf8>
	else if (__tmp > 65535)
    231e:	6f 81       	ldd	r22, Y+7	; 0x07
    2320:	78 85       	ldd	r23, Y+8	; 0x08
    2322:	89 85       	ldd	r24, Y+9	; 0x09
    2324:	9a 85       	ldd	r25, Y+10	; 0x0a
    2326:	20 e0       	ldi	r18, 0x00	; 0
    2328:	3f ef       	ldi	r19, 0xFF	; 255
    232a:	4f e7       	ldi	r20, 0x7F	; 127
    232c:	57 e4       	ldi	r21, 0x47	; 71
    232e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2332:	18 16       	cp	r1, r24
    2334:	4c f5       	brge	.+82     	; 0x2388 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2336:	6b 85       	ldd	r22, Y+11	; 0x0b
    2338:	7c 85       	ldd	r23, Y+12	; 0x0c
    233a:	8d 85       	ldd	r24, Y+13	; 0x0d
    233c:	9e 85       	ldd	r25, Y+14	; 0x0e
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	51 e4       	ldi	r21, 0x41	; 65
    2346:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    234a:	dc 01       	movw	r26, r24
    234c:	cb 01       	movw	r24, r22
    234e:	bc 01       	movw	r22, r24
    2350:	cd 01       	movw	r24, r26
    2352:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2356:	dc 01       	movw	r26, r24
    2358:	cb 01       	movw	r24, r22
    235a:	9e 83       	std	Y+6, r25	; 0x06
    235c:	8d 83       	std	Y+5, r24	; 0x05
    235e:	0f c0       	rjmp	.+30     	; 0x237e <LCD_init+0xda>
    2360:	88 ec       	ldi	r24, 0xC8	; 200
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	9c 83       	std	Y+4, r25	; 0x04
    2366:	8b 83       	std	Y+3, r24	; 0x03
    2368:	8b 81       	ldd	r24, Y+3	; 0x03
    236a:	9c 81       	ldd	r25, Y+4	; 0x04
    236c:	01 97       	sbiw	r24, 0x01	; 1
    236e:	f1 f7       	brne	.-4      	; 0x236c <LCD_init+0xc8>
    2370:	9c 83       	std	Y+4, r25	; 0x04
    2372:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2374:	8d 81       	ldd	r24, Y+5	; 0x05
    2376:	9e 81       	ldd	r25, Y+6	; 0x06
    2378:	01 97       	sbiw	r24, 0x01	; 1
    237a:	9e 83       	std	Y+6, r25	; 0x06
    237c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    237e:	8d 81       	ldd	r24, Y+5	; 0x05
    2380:	9e 81       	ldd	r25, Y+6	; 0x06
    2382:	00 97       	sbiw	r24, 0x00	; 0
    2384:	69 f7       	brne	.-38     	; 0x2360 <LCD_init+0xbc>
    2386:	14 c0       	rjmp	.+40     	; 0x23b0 <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2388:	6f 81       	ldd	r22, Y+7	; 0x07
    238a:	78 85       	ldd	r23, Y+8	; 0x08
    238c:	89 85       	ldd	r24, Y+9	; 0x09
    238e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2390:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2394:	dc 01       	movw	r26, r24
    2396:	cb 01       	movw	r24, r22
    2398:	9e 83       	std	Y+6, r25	; 0x06
    239a:	8d 83       	std	Y+5, r24	; 0x05
    239c:	8d 81       	ldd	r24, Y+5	; 0x05
    239e:	9e 81       	ldd	r25, Y+6	; 0x06
    23a0:	9a 83       	std	Y+2, r25	; 0x02
    23a2:	89 83       	std	Y+1, r24	; 0x01
    23a4:	89 81       	ldd	r24, Y+1	; 0x01
    23a6:	9a 81       	ldd	r25, Y+2	; 0x02
    23a8:	01 97       	sbiw	r24, 0x01	; 1
    23aa:	f1 f7       	brne	.-4      	; 0x23a8 <LCD_init+0x104>
    23ac:	9a 83       	std	Y+2, r25	; 0x02
    23ae:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    23b0:	80 e0       	ldi	r24, 0x00	; 0
    23b2:	6f ef       	ldi	r22, 0xFF	; 255
    23b4:	0e 94 85 10 	call	0x210a	; 0x210a <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    23b8:	88 e3       	ldi	r24, 0x38	; 56
    23ba:	0e 94 ee 11 	call	0x23dc	; 0x23dc <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    23be:	8c e0       	ldi	r24, 0x0C	; 12
    23c0:	0e 94 ee 11 	call	0x23dc	; 0x23dc <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    23c4:	81 e0       	ldi	r24, 0x01	; 1
    23c6:	0e 94 ee 11 	call	0x23dc	; 0x23dc <LCD_sendCommand>
}
    23ca:	2e 96       	adiw	r28, 0x0e	; 14
    23cc:	0f b6       	in	r0, 0x3f	; 63
    23ce:	f8 94       	cli
    23d0:	de bf       	out	0x3e, r29	; 62
    23d2:	0f be       	out	0x3f, r0	; 63
    23d4:	cd bf       	out	0x3d, r28	; 61
    23d6:	cf 91       	pop	r28
    23d8:	df 91       	pop	r29
    23da:	08 95       	ret

000023dc <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    23dc:	df 93       	push	r29
    23de:	cf 93       	push	r28
    23e0:	cd b7       	in	r28, 0x3d	; 61
    23e2:	de b7       	in	r29, 0x3e	; 62
    23e4:	e9 97       	sbiw	r28, 0x39	; 57
    23e6:	0f b6       	in	r0, 0x3f	; 63
    23e8:	f8 94       	cli
    23ea:	de bf       	out	0x3e, r29	; 62
    23ec:	0f be       	out	0x3f, r0	; 63
    23ee:	cd bf       	out	0x3d, r28	; 61
    23f0:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    23f2:	81 e0       	ldi	r24, 0x01	; 1
    23f4:	66 e0       	ldi	r22, 0x06	; 6
    23f6:	40 e0       	ldi	r20, 0x00	; 0
    23f8:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
    23fc:	80 e0       	ldi	r24, 0x00	; 0
    23fe:	90 e0       	ldi	r25, 0x00	; 0
    2400:	a0 e8       	ldi	r26, 0x80	; 128
    2402:	bf e3       	ldi	r27, 0x3F	; 63
    2404:	8d ab       	std	Y+53, r24	; 0x35
    2406:	9e ab       	std	Y+54, r25	; 0x36
    2408:	af ab       	std	Y+55, r26	; 0x37
    240a:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    240c:	6d a9       	ldd	r22, Y+53	; 0x35
    240e:	7e a9       	ldd	r23, Y+54	; 0x36
    2410:	8f a9       	ldd	r24, Y+55	; 0x37
    2412:	98 ad       	ldd	r25, Y+56	; 0x38
    2414:	20 e0       	ldi	r18, 0x00	; 0
    2416:	30 e0       	ldi	r19, 0x00	; 0
    2418:	4a ef       	ldi	r20, 0xFA	; 250
    241a:	54 e4       	ldi	r21, 0x44	; 68
    241c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2420:	dc 01       	movw	r26, r24
    2422:	cb 01       	movw	r24, r22
    2424:	89 ab       	std	Y+49, r24	; 0x31
    2426:	9a ab       	std	Y+50, r25	; 0x32
    2428:	ab ab       	std	Y+51, r26	; 0x33
    242a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    242c:	69 a9       	ldd	r22, Y+49	; 0x31
    242e:	7a a9       	ldd	r23, Y+50	; 0x32
    2430:	8b a9       	ldd	r24, Y+51	; 0x33
    2432:	9c a9       	ldd	r25, Y+52	; 0x34
    2434:	20 e0       	ldi	r18, 0x00	; 0
    2436:	30 e0       	ldi	r19, 0x00	; 0
    2438:	40 e8       	ldi	r20, 0x80	; 128
    243a:	5f e3       	ldi	r21, 0x3F	; 63
    243c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2440:	88 23       	and	r24, r24
    2442:	2c f4       	brge	.+10     	; 0x244e <LCD_sendCommand+0x72>
		__ticks = 1;
    2444:	81 e0       	ldi	r24, 0x01	; 1
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	98 ab       	std	Y+48, r25	; 0x30
    244a:	8f a7       	std	Y+47, r24	; 0x2f
    244c:	3f c0       	rjmp	.+126    	; 0x24cc <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    244e:	69 a9       	ldd	r22, Y+49	; 0x31
    2450:	7a a9       	ldd	r23, Y+50	; 0x32
    2452:	8b a9       	ldd	r24, Y+51	; 0x33
    2454:	9c a9       	ldd	r25, Y+52	; 0x34
    2456:	20 e0       	ldi	r18, 0x00	; 0
    2458:	3f ef       	ldi	r19, 0xFF	; 255
    245a:	4f e7       	ldi	r20, 0x7F	; 127
    245c:	57 e4       	ldi	r21, 0x47	; 71
    245e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2462:	18 16       	cp	r1, r24
    2464:	4c f5       	brge	.+82     	; 0x24b8 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2466:	6d a9       	ldd	r22, Y+53	; 0x35
    2468:	7e a9       	ldd	r23, Y+54	; 0x36
    246a:	8f a9       	ldd	r24, Y+55	; 0x37
    246c:	98 ad       	ldd	r25, Y+56	; 0x38
    246e:	20 e0       	ldi	r18, 0x00	; 0
    2470:	30 e0       	ldi	r19, 0x00	; 0
    2472:	40 e2       	ldi	r20, 0x20	; 32
    2474:	51 e4       	ldi	r21, 0x41	; 65
    2476:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    247a:	dc 01       	movw	r26, r24
    247c:	cb 01       	movw	r24, r22
    247e:	bc 01       	movw	r22, r24
    2480:	cd 01       	movw	r24, r26
    2482:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2486:	dc 01       	movw	r26, r24
    2488:	cb 01       	movw	r24, r22
    248a:	98 ab       	std	Y+48, r25	; 0x30
    248c:	8f a7       	std	Y+47, r24	; 0x2f
    248e:	0f c0       	rjmp	.+30     	; 0x24ae <LCD_sendCommand+0xd2>
    2490:	88 ec       	ldi	r24, 0xC8	; 200
    2492:	90 e0       	ldi	r25, 0x00	; 0
    2494:	9e a7       	std	Y+46, r25	; 0x2e
    2496:	8d a7       	std	Y+45, r24	; 0x2d
    2498:	8d a5       	ldd	r24, Y+45	; 0x2d
    249a:	9e a5       	ldd	r25, Y+46	; 0x2e
    249c:	01 97       	sbiw	r24, 0x01	; 1
    249e:	f1 f7       	brne	.-4      	; 0x249c <LCD_sendCommand+0xc0>
    24a0:	9e a7       	std	Y+46, r25	; 0x2e
    24a2:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    24a4:	8f a5       	ldd	r24, Y+47	; 0x2f
    24a6:	98 a9       	ldd	r25, Y+48	; 0x30
    24a8:	01 97       	sbiw	r24, 0x01	; 1
    24aa:	98 ab       	std	Y+48, r25	; 0x30
    24ac:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    24ae:	8f a5       	ldd	r24, Y+47	; 0x2f
    24b0:	98 a9       	ldd	r25, Y+48	; 0x30
    24b2:	00 97       	sbiw	r24, 0x00	; 0
    24b4:	69 f7       	brne	.-38     	; 0x2490 <LCD_sendCommand+0xb4>
    24b6:	14 c0       	rjmp	.+40     	; 0x24e0 <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    24b8:	69 a9       	ldd	r22, Y+49	; 0x31
    24ba:	7a a9       	ldd	r23, Y+50	; 0x32
    24bc:	8b a9       	ldd	r24, Y+51	; 0x33
    24be:	9c a9       	ldd	r25, Y+52	; 0x34
    24c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    24c4:	dc 01       	movw	r26, r24
    24c6:	cb 01       	movw	r24, r22
    24c8:	98 ab       	std	Y+48, r25	; 0x30
    24ca:	8f a7       	std	Y+47, r24	; 0x2f
    24cc:	8f a5       	ldd	r24, Y+47	; 0x2f
    24ce:	98 a9       	ldd	r25, Y+48	; 0x30
    24d0:	9c a7       	std	Y+44, r25	; 0x2c
    24d2:	8b a7       	std	Y+43, r24	; 0x2b
    24d4:	8b a5       	ldd	r24, Y+43	; 0x2b
    24d6:	9c a5       	ldd	r25, Y+44	; 0x2c
    24d8:	01 97       	sbiw	r24, 0x01	; 1
    24da:	f1 f7       	brne	.-4      	; 0x24d8 <LCD_sendCommand+0xfc>
    24dc:	9c a7       	std	Y+44, r25	; 0x2c
    24de:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    24e0:	81 e0       	ldi	r24, 0x01	; 1
    24e2:	67 e0       	ldi	r22, 0x07	; 7
    24e4:	41 e0       	ldi	r20, 0x01	; 1
    24e6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
    24ea:	80 e0       	ldi	r24, 0x00	; 0
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	a0 e8       	ldi	r26, 0x80	; 128
    24f0:	bf e3       	ldi	r27, 0x3F	; 63
    24f2:	8f a3       	std	Y+39, r24	; 0x27
    24f4:	98 a7       	std	Y+40, r25	; 0x28
    24f6:	a9 a7       	std	Y+41, r26	; 0x29
    24f8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fa:	6f a1       	ldd	r22, Y+39	; 0x27
    24fc:	78 a5       	ldd	r23, Y+40	; 0x28
    24fe:	89 a5       	ldd	r24, Y+41	; 0x29
    2500:	9a a5       	ldd	r25, Y+42	; 0x2a
    2502:	20 e0       	ldi	r18, 0x00	; 0
    2504:	30 e0       	ldi	r19, 0x00	; 0
    2506:	4a ef       	ldi	r20, 0xFA	; 250
    2508:	54 e4       	ldi	r21, 0x44	; 68
    250a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    250e:	dc 01       	movw	r26, r24
    2510:	cb 01       	movw	r24, r22
    2512:	8b a3       	std	Y+35, r24	; 0x23
    2514:	9c a3       	std	Y+36, r25	; 0x24
    2516:	ad a3       	std	Y+37, r26	; 0x25
    2518:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    251a:	6b a1       	ldd	r22, Y+35	; 0x23
    251c:	7c a1       	ldd	r23, Y+36	; 0x24
    251e:	8d a1       	ldd	r24, Y+37	; 0x25
    2520:	9e a1       	ldd	r25, Y+38	; 0x26
    2522:	20 e0       	ldi	r18, 0x00	; 0
    2524:	30 e0       	ldi	r19, 0x00	; 0
    2526:	40 e8       	ldi	r20, 0x80	; 128
    2528:	5f e3       	ldi	r21, 0x3F	; 63
    252a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    252e:	88 23       	and	r24, r24
    2530:	2c f4       	brge	.+10     	; 0x253c <LCD_sendCommand+0x160>
		__ticks = 1;
    2532:	81 e0       	ldi	r24, 0x01	; 1
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9a a3       	std	Y+34, r25	; 0x22
    2538:	89 a3       	std	Y+33, r24	; 0x21
    253a:	3f c0       	rjmp	.+126    	; 0x25ba <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    253c:	6b a1       	ldd	r22, Y+35	; 0x23
    253e:	7c a1       	ldd	r23, Y+36	; 0x24
    2540:	8d a1       	ldd	r24, Y+37	; 0x25
    2542:	9e a1       	ldd	r25, Y+38	; 0x26
    2544:	20 e0       	ldi	r18, 0x00	; 0
    2546:	3f ef       	ldi	r19, 0xFF	; 255
    2548:	4f e7       	ldi	r20, 0x7F	; 127
    254a:	57 e4       	ldi	r21, 0x47	; 71
    254c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2550:	18 16       	cp	r1, r24
    2552:	4c f5       	brge	.+82     	; 0x25a6 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2554:	6f a1       	ldd	r22, Y+39	; 0x27
    2556:	78 a5       	ldd	r23, Y+40	; 0x28
    2558:	89 a5       	ldd	r24, Y+41	; 0x29
    255a:	9a a5       	ldd	r25, Y+42	; 0x2a
    255c:	20 e0       	ldi	r18, 0x00	; 0
    255e:	30 e0       	ldi	r19, 0x00	; 0
    2560:	40 e2       	ldi	r20, 0x20	; 32
    2562:	51 e4       	ldi	r21, 0x41	; 65
    2564:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2568:	dc 01       	movw	r26, r24
    256a:	cb 01       	movw	r24, r22
    256c:	bc 01       	movw	r22, r24
    256e:	cd 01       	movw	r24, r26
    2570:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2574:	dc 01       	movw	r26, r24
    2576:	cb 01       	movw	r24, r22
    2578:	9a a3       	std	Y+34, r25	; 0x22
    257a:	89 a3       	std	Y+33, r24	; 0x21
    257c:	0f c0       	rjmp	.+30     	; 0x259c <LCD_sendCommand+0x1c0>
    257e:	88 ec       	ldi	r24, 0xC8	; 200
    2580:	90 e0       	ldi	r25, 0x00	; 0
    2582:	98 a3       	std	Y+32, r25	; 0x20
    2584:	8f 8f       	std	Y+31, r24	; 0x1f
    2586:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2588:	98 a1       	ldd	r25, Y+32	; 0x20
    258a:	01 97       	sbiw	r24, 0x01	; 1
    258c:	f1 f7       	brne	.-4      	; 0x258a <LCD_sendCommand+0x1ae>
    258e:	98 a3       	std	Y+32, r25	; 0x20
    2590:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2592:	89 a1       	ldd	r24, Y+33	; 0x21
    2594:	9a a1       	ldd	r25, Y+34	; 0x22
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	9a a3       	std	Y+34, r25	; 0x22
    259a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259c:	89 a1       	ldd	r24, Y+33	; 0x21
    259e:	9a a1       	ldd	r25, Y+34	; 0x22
    25a0:	00 97       	sbiw	r24, 0x00	; 0
    25a2:	69 f7       	brne	.-38     	; 0x257e <LCD_sendCommand+0x1a2>
    25a4:	14 c0       	rjmp	.+40     	; 0x25ce <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a6:	6b a1       	ldd	r22, Y+35	; 0x23
    25a8:	7c a1       	ldd	r23, Y+36	; 0x24
    25aa:	8d a1       	ldd	r24, Y+37	; 0x25
    25ac:	9e a1       	ldd	r25, Y+38	; 0x26
    25ae:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b2:	dc 01       	movw	r26, r24
    25b4:	cb 01       	movw	r24, r22
    25b6:	9a a3       	std	Y+34, r25	; 0x22
    25b8:	89 a3       	std	Y+33, r24	; 0x21
    25ba:	89 a1       	ldd	r24, Y+33	; 0x21
    25bc:	9a a1       	ldd	r25, Y+34	; 0x22
    25be:	9e 8f       	std	Y+30, r25	; 0x1e
    25c0:	8d 8f       	std	Y+29, r24	; 0x1d
    25c2:	8d 8d       	ldd	r24, Y+29	; 0x1d
    25c4:	9e 8d       	ldd	r25, Y+30	; 0x1e
    25c6:	01 97       	sbiw	r24, 0x01	; 1
    25c8:	f1 f7       	brne	.-4      	; 0x25c6 <LCD_sendCommand+0x1ea>
    25ca:	9e 8f       	std	Y+30, r25	; 0x1e
    25cc:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    25ce:	80 e0       	ldi	r24, 0x00	; 0
    25d0:	69 ad       	ldd	r22, Y+57	; 0x39
    25d2:	0e 94 c9 10 	call	0x2192	; 0x2192 <GPIO_writePort>
    25d6:	80 e0       	ldi	r24, 0x00	; 0
    25d8:	90 e0       	ldi	r25, 0x00	; 0
    25da:	a0 e8       	ldi	r26, 0x80	; 128
    25dc:	bf e3       	ldi	r27, 0x3F	; 63
    25de:	89 8f       	std	Y+25, r24	; 0x19
    25e0:	9a 8f       	std	Y+26, r25	; 0x1a
    25e2:	ab 8f       	std	Y+27, r26	; 0x1b
    25e4:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25e6:	69 8d       	ldd	r22, Y+25	; 0x19
    25e8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    25ea:	8b 8d       	ldd	r24, Y+27	; 0x1b
    25ec:	9c 8d       	ldd	r25, Y+28	; 0x1c
    25ee:	20 e0       	ldi	r18, 0x00	; 0
    25f0:	30 e0       	ldi	r19, 0x00	; 0
    25f2:	4a ef       	ldi	r20, 0xFA	; 250
    25f4:	54 e4       	ldi	r21, 0x44	; 68
    25f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25fa:	dc 01       	movw	r26, r24
    25fc:	cb 01       	movw	r24, r22
    25fe:	8d 8b       	std	Y+21, r24	; 0x15
    2600:	9e 8b       	std	Y+22, r25	; 0x16
    2602:	af 8b       	std	Y+23, r26	; 0x17
    2604:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2606:	6d 89       	ldd	r22, Y+21	; 0x15
    2608:	7e 89       	ldd	r23, Y+22	; 0x16
    260a:	8f 89       	ldd	r24, Y+23	; 0x17
    260c:	98 8d       	ldd	r25, Y+24	; 0x18
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	30 e0       	ldi	r19, 0x00	; 0
    2612:	40 e8       	ldi	r20, 0x80	; 128
    2614:	5f e3       	ldi	r21, 0x3F	; 63
    2616:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    261a:	88 23       	and	r24, r24
    261c:	2c f4       	brge	.+10     	; 0x2628 <LCD_sendCommand+0x24c>
		__ticks = 1;
    261e:	81 e0       	ldi	r24, 0x01	; 1
    2620:	90 e0       	ldi	r25, 0x00	; 0
    2622:	9c 8b       	std	Y+20, r25	; 0x14
    2624:	8b 8b       	std	Y+19, r24	; 0x13
    2626:	3f c0       	rjmp	.+126    	; 0x26a6 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    2628:	6d 89       	ldd	r22, Y+21	; 0x15
    262a:	7e 89       	ldd	r23, Y+22	; 0x16
    262c:	8f 89       	ldd	r24, Y+23	; 0x17
    262e:	98 8d       	ldd	r25, Y+24	; 0x18
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	3f ef       	ldi	r19, 0xFF	; 255
    2634:	4f e7       	ldi	r20, 0x7F	; 127
    2636:	57 e4       	ldi	r21, 0x47	; 71
    2638:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    263c:	18 16       	cp	r1, r24
    263e:	4c f5       	brge	.+82     	; 0x2692 <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2640:	69 8d       	ldd	r22, Y+25	; 0x19
    2642:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2644:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2646:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	40 e2       	ldi	r20, 0x20	; 32
    264e:	51 e4       	ldi	r21, 0x41	; 65
    2650:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2654:	dc 01       	movw	r26, r24
    2656:	cb 01       	movw	r24, r22
    2658:	bc 01       	movw	r22, r24
    265a:	cd 01       	movw	r24, r26
    265c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2660:	dc 01       	movw	r26, r24
    2662:	cb 01       	movw	r24, r22
    2664:	9c 8b       	std	Y+20, r25	; 0x14
    2666:	8b 8b       	std	Y+19, r24	; 0x13
    2668:	0f c0       	rjmp	.+30     	; 0x2688 <LCD_sendCommand+0x2ac>
    266a:	88 ec       	ldi	r24, 0xC8	; 200
    266c:	90 e0       	ldi	r25, 0x00	; 0
    266e:	9a 8b       	std	Y+18, r25	; 0x12
    2670:	89 8b       	std	Y+17, r24	; 0x11
    2672:	89 89       	ldd	r24, Y+17	; 0x11
    2674:	9a 89       	ldd	r25, Y+18	; 0x12
    2676:	01 97       	sbiw	r24, 0x01	; 1
    2678:	f1 f7       	brne	.-4      	; 0x2676 <LCD_sendCommand+0x29a>
    267a:	9a 8b       	std	Y+18, r25	; 0x12
    267c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    267e:	8b 89       	ldd	r24, Y+19	; 0x13
    2680:	9c 89       	ldd	r25, Y+20	; 0x14
    2682:	01 97       	sbiw	r24, 0x01	; 1
    2684:	9c 8b       	std	Y+20, r25	; 0x14
    2686:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2688:	8b 89       	ldd	r24, Y+19	; 0x13
    268a:	9c 89       	ldd	r25, Y+20	; 0x14
    268c:	00 97       	sbiw	r24, 0x00	; 0
    268e:	69 f7       	brne	.-38     	; 0x266a <LCD_sendCommand+0x28e>
    2690:	14 c0       	rjmp	.+40     	; 0x26ba <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2692:	6d 89       	ldd	r22, Y+21	; 0x15
    2694:	7e 89       	ldd	r23, Y+22	; 0x16
    2696:	8f 89       	ldd	r24, Y+23	; 0x17
    2698:	98 8d       	ldd	r25, Y+24	; 0x18
    269a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    269e:	dc 01       	movw	r26, r24
    26a0:	cb 01       	movw	r24, r22
    26a2:	9c 8b       	std	Y+20, r25	; 0x14
    26a4:	8b 8b       	std	Y+19, r24	; 0x13
    26a6:	8b 89       	ldd	r24, Y+19	; 0x13
    26a8:	9c 89       	ldd	r25, Y+20	; 0x14
    26aa:	98 8b       	std	Y+16, r25	; 0x10
    26ac:	8f 87       	std	Y+15, r24	; 0x0f
    26ae:	8f 85       	ldd	r24, Y+15	; 0x0f
    26b0:	98 89       	ldd	r25, Y+16	; 0x10
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <LCD_sendCommand+0x2d6>
    26b6:	98 8b       	std	Y+16, r25	; 0x10
    26b8:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	67 e0       	ldi	r22, 0x07	; 7
    26be:	40 e0       	ldi	r20, 0x00	; 0
    26c0:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
    26c4:	80 e0       	ldi	r24, 0x00	; 0
    26c6:	90 e0       	ldi	r25, 0x00	; 0
    26c8:	a0 e8       	ldi	r26, 0x80	; 128
    26ca:	bf e3       	ldi	r27, 0x3F	; 63
    26cc:	8b 87       	std	Y+11, r24	; 0x0b
    26ce:	9c 87       	std	Y+12, r25	; 0x0c
    26d0:	ad 87       	std	Y+13, r26	; 0x0d
    26d2:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    26d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    26d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    26da:	9e 85       	ldd	r25, Y+14	; 0x0e
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	4a ef       	ldi	r20, 0xFA	; 250
    26e2:	54 e4       	ldi	r21, 0x44	; 68
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	8f 83       	std	Y+7, r24	; 0x07
    26ee:	98 87       	std	Y+8, r25	; 0x08
    26f0:	a9 87       	std	Y+9, r26	; 0x09
    26f2:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26f4:	6f 81       	ldd	r22, Y+7	; 0x07
    26f6:	78 85       	ldd	r23, Y+8	; 0x08
    26f8:	89 85       	ldd	r24, Y+9	; 0x09
    26fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fc:	20 e0       	ldi	r18, 0x00	; 0
    26fe:	30 e0       	ldi	r19, 0x00	; 0
    2700:	40 e8       	ldi	r20, 0x80	; 128
    2702:	5f e3       	ldi	r21, 0x3F	; 63
    2704:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2708:	88 23       	and	r24, r24
    270a:	2c f4       	brge	.+10     	; 0x2716 <LCD_sendCommand+0x33a>
		__ticks = 1;
    270c:	81 e0       	ldi	r24, 0x01	; 1
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	9e 83       	std	Y+6, r25	; 0x06
    2712:	8d 83       	std	Y+5, r24	; 0x05
    2714:	3f c0       	rjmp	.+126    	; 0x2794 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    2716:	6f 81       	ldd	r22, Y+7	; 0x07
    2718:	78 85       	ldd	r23, Y+8	; 0x08
    271a:	89 85       	ldd	r24, Y+9	; 0x09
    271c:	9a 85       	ldd	r25, Y+10	; 0x0a
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	3f ef       	ldi	r19, 0xFF	; 255
    2722:	4f e7       	ldi	r20, 0x7F	; 127
    2724:	57 e4       	ldi	r21, 0x47	; 71
    2726:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    272a:	18 16       	cp	r1, r24
    272c:	4c f5       	brge	.+82     	; 0x2780 <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    272e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2730:	7c 85       	ldd	r23, Y+12	; 0x0c
    2732:	8d 85       	ldd	r24, Y+13	; 0x0d
    2734:	9e 85       	ldd	r25, Y+14	; 0x0e
    2736:	20 e0       	ldi	r18, 0x00	; 0
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	40 e2       	ldi	r20, 0x20	; 32
    273c:	51 e4       	ldi	r21, 0x41	; 65
    273e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2742:	dc 01       	movw	r26, r24
    2744:	cb 01       	movw	r24, r22
    2746:	bc 01       	movw	r22, r24
    2748:	cd 01       	movw	r24, r26
    274a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274e:	dc 01       	movw	r26, r24
    2750:	cb 01       	movw	r24, r22
    2752:	9e 83       	std	Y+6, r25	; 0x06
    2754:	8d 83       	std	Y+5, r24	; 0x05
    2756:	0f c0       	rjmp	.+30     	; 0x2776 <LCD_sendCommand+0x39a>
    2758:	88 ec       	ldi	r24, 0xC8	; 200
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	9c 83       	std	Y+4, r25	; 0x04
    275e:	8b 83       	std	Y+3, r24	; 0x03
    2760:	8b 81       	ldd	r24, Y+3	; 0x03
    2762:	9c 81       	ldd	r25, Y+4	; 0x04
    2764:	01 97       	sbiw	r24, 0x01	; 1
    2766:	f1 f7       	brne	.-4      	; 0x2764 <LCD_sendCommand+0x388>
    2768:	9c 83       	std	Y+4, r25	; 0x04
    276a:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    276c:	8d 81       	ldd	r24, Y+5	; 0x05
    276e:	9e 81       	ldd	r25, Y+6	; 0x06
    2770:	01 97       	sbiw	r24, 0x01	; 1
    2772:	9e 83       	std	Y+6, r25	; 0x06
    2774:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2776:	8d 81       	ldd	r24, Y+5	; 0x05
    2778:	9e 81       	ldd	r25, Y+6	; 0x06
    277a:	00 97       	sbiw	r24, 0x00	; 0
    277c:	69 f7       	brne	.-38     	; 0x2758 <LCD_sendCommand+0x37c>
    277e:	14 c0       	rjmp	.+40     	; 0x27a8 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2780:	6f 81       	ldd	r22, Y+7	; 0x07
    2782:	78 85       	ldd	r23, Y+8	; 0x08
    2784:	89 85       	ldd	r24, Y+9	; 0x09
    2786:	9a 85       	ldd	r25, Y+10	; 0x0a
    2788:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22
    2790:	9e 83       	std	Y+6, r25	; 0x06
    2792:	8d 83       	std	Y+5, r24	; 0x05
    2794:	8d 81       	ldd	r24, Y+5	; 0x05
    2796:	9e 81       	ldd	r25, Y+6	; 0x06
    2798:	9a 83       	std	Y+2, r25	; 0x02
    279a:	89 83       	std	Y+1, r24	; 0x01
    279c:	89 81       	ldd	r24, Y+1	; 0x01
    279e:	9a 81       	ldd	r25, Y+2	; 0x02
    27a0:	01 97       	sbiw	r24, 0x01	; 1
    27a2:	f1 f7       	brne	.-4      	; 0x27a0 <LCD_sendCommand+0x3c4>
    27a4:	9a 83       	std	Y+2, r25	; 0x02
    27a6:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    27a8:	e9 96       	adiw	r28, 0x39	; 57
    27aa:	0f b6       	in	r0, 0x3f	; 63
    27ac:	f8 94       	cli
    27ae:	de bf       	out	0x3e, r29	; 62
    27b0:	0f be       	out	0x3f, r0	; 63
    27b2:	cd bf       	out	0x3d, r28	; 61
    27b4:	cf 91       	pop	r28
    27b6:	df 91       	pop	r29
    27b8:	08 95       	ret

000027ba <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    27ba:	df 93       	push	r29
    27bc:	cf 93       	push	r28
    27be:	cd b7       	in	r28, 0x3d	; 61
    27c0:	de b7       	in	r29, 0x3e	; 62
    27c2:	e9 97       	sbiw	r28, 0x39	; 57
    27c4:	0f b6       	in	r0, 0x3f	; 63
    27c6:	f8 94       	cli
    27c8:	de bf       	out	0x3e, r29	; 62
    27ca:	0f be       	out	0x3f, r0	; 63
    27cc:	cd bf       	out	0x3d, r28	; 61
    27ce:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	66 e0       	ldi	r22, 0x06	; 6
    27d4:	41 e0       	ldi	r20, 0x01	; 1
    27d6:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
    27da:	80 e0       	ldi	r24, 0x00	; 0
    27dc:	90 e0       	ldi	r25, 0x00	; 0
    27de:	a0 e8       	ldi	r26, 0x80	; 128
    27e0:	bf e3       	ldi	r27, 0x3F	; 63
    27e2:	8d ab       	std	Y+53, r24	; 0x35
    27e4:	9e ab       	std	Y+54, r25	; 0x36
    27e6:	af ab       	std	Y+55, r26	; 0x37
    27e8:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27ea:	6d a9       	ldd	r22, Y+53	; 0x35
    27ec:	7e a9       	ldd	r23, Y+54	; 0x36
    27ee:	8f a9       	ldd	r24, Y+55	; 0x37
    27f0:	98 ad       	ldd	r25, Y+56	; 0x38
    27f2:	20 e0       	ldi	r18, 0x00	; 0
    27f4:	30 e0       	ldi	r19, 0x00	; 0
    27f6:	4a ef       	ldi	r20, 0xFA	; 250
    27f8:	54 e4       	ldi	r21, 0x44	; 68
    27fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27fe:	dc 01       	movw	r26, r24
    2800:	cb 01       	movw	r24, r22
    2802:	89 ab       	std	Y+49, r24	; 0x31
    2804:	9a ab       	std	Y+50, r25	; 0x32
    2806:	ab ab       	std	Y+51, r26	; 0x33
    2808:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    280a:	69 a9       	ldd	r22, Y+49	; 0x31
    280c:	7a a9       	ldd	r23, Y+50	; 0x32
    280e:	8b a9       	ldd	r24, Y+51	; 0x33
    2810:	9c a9       	ldd	r25, Y+52	; 0x34
    2812:	20 e0       	ldi	r18, 0x00	; 0
    2814:	30 e0       	ldi	r19, 0x00	; 0
    2816:	40 e8       	ldi	r20, 0x80	; 128
    2818:	5f e3       	ldi	r21, 0x3F	; 63
    281a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    281e:	88 23       	and	r24, r24
    2820:	2c f4       	brge	.+10     	; 0x282c <LCD_displayCharacter+0x72>
		__ticks = 1;
    2822:	81 e0       	ldi	r24, 0x01	; 1
    2824:	90 e0       	ldi	r25, 0x00	; 0
    2826:	98 ab       	std	Y+48, r25	; 0x30
    2828:	8f a7       	std	Y+47, r24	; 0x2f
    282a:	3f c0       	rjmp	.+126    	; 0x28aa <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    282c:	69 a9       	ldd	r22, Y+49	; 0x31
    282e:	7a a9       	ldd	r23, Y+50	; 0x32
    2830:	8b a9       	ldd	r24, Y+51	; 0x33
    2832:	9c a9       	ldd	r25, Y+52	; 0x34
    2834:	20 e0       	ldi	r18, 0x00	; 0
    2836:	3f ef       	ldi	r19, 0xFF	; 255
    2838:	4f e7       	ldi	r20, 0x7F	; 127
    283a:	57 e4       	ldi	r21, 0x47	; 71
    283c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2840:	18 16       	cp	r1, r24
    2842:	4c f5       	brge	.+82     	; 0x2896 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2844:	6d a9       	ldd	r22, Y+53	; 0x35
    2846:	7e a9       	ldd	r23, Y+54	; 0x36
    2848:	8f a9       	ldd	r24, Y+55	; 0x37
    284a:	98 ad       	ldd	r25, Y+56	; 0x38
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	40 e2       	ldi	r20, 0x20	; 32
    2852:	51 e4       	ldi	r21, 0x41	; 65
    2854:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2858:	dc 01       	movw	r26, r24
    285a:	cb 01       	movw	r24, r22
    285c:	bc 01       	movw	r22, r24
    285e:	cd 01       	movw	r24, r26
    2860:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	98 ab       	std	Y+48, r25	; 0x30
    286a:	8f a7       	std	Y+47, r24	; 0x2f
    286c:	0f c0       	rjmp	.+30     	; 0x288c <LCD_displayCharacter+0xd2>
    286e:	88 ec       	ldi	r24, 0xC8	; 200
    2870:	90 e0       	ldi	r25, 0x00	; 0
    2872:	9e a7       	std	Y+46, r25	; 0x2e
    2874:	8d a7       	std	Y+45, r24	; 0x2d
    2876:	8d a5       	ldd	r24, Y+45	; 0x2d
    2878:	9e a5       	ldd	r25, Y+46	; 0x2e
    287a:	01 97       	sbiw	r24, 0x01	; 1
    287c:	f1 f7       	brne	.-4      	; 0x287a <LCD_displayCharacter+0xc0>
    287e:	9e a7       	std	Y+46, r25	; 0x2e
    2880:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2882:	8f a5       	ldd	r24, Y+47	; 0x2f
    2884:	98 a9       	ldd	r25, Y+48	; 0x30
    2886:	01 97       	sbiw	r24, 0x01	; 1
    2888:	98 ab       	std	Y+48, r25	; 0x30
    288a:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    288c:	8f a5       	ldd	r24, Y+47	; 0x2f
    288e:	98 a9       	ldd	r25, Y+48	; 0x30
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	69 f7       	brne	.-38     	; 0x286e <LCD_displayCharacter+0xb4>
    2894:	14 c0       	rjmp	.+40     	; 0x28be <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2896:	69 a9       	ldd	r22, Y+49	; 0x31
    2898:	7a a9       	ldd	r23, Y+50	; 0x32
    289a:	8b a9       	ldd	r24, Y+51	; 0x33
    289c:	9c a9       	ldd	r25, Y+52	; 0x34
    289e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28a2:	dc 01       	movw	r26, r24
    28a4:	cb 01       	movw	r24, r22
    28a6:	98 ab       	std	Y+48, r25	; 0x30
    28a8:	8f a7       	std	Y+47, r24	; 0x2f
    28aa:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ac:	98 a9       	ldd	r25, Y+48	; 0x30
    28ae:	9c a7       	std	Y+44, r25	; 0x2c
    28b0:	8b a7       	std	Y+43, r24	; 0x2b
    28b2:	8b a5       	ldd	r24, Y+43	; 0x2b
    28b4:	9c a5       	ldd	r25, Y+44	; 0x2c
    28b6:	01 97       	sbiw	r24, 0x01	; 1
    28b8:	f1 f7       	brne	.-4      	; 0x28b6 <LCD_displayCharacter+0xfc>
    28ba:	9c a7       	std	Y+44, r25	; 0x2c
    28bc:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    28be:	81 e0       	ldi	r24, 0x01	; 1
    28c0:	67 e0       	ldi	r22, 0x07	; 7
    28c2:	41 e0       	ldi	r20, 0x01	; 1
    28c4:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
    28c8:	80 e0       	ldi	r24, 0x00	; 0
    28ca:	90 e0       	ldi	r25, 0x00	; 0
    28cc:	a0 e8       	ldi	r26, 0x80	; 128
    28ce:	bf e3       	ldi	r27, 0x3F	; 63
    28d0:	8f a3       	std	Y+39, r24	; 0x27
    28d2:	98 a7       	std	Y+40, r25	; 0x28
    28d4:	a9 a7       	std	Y+41, r26	; 0x29
    28d6:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    28d8:	6f a1       	ldd	r22, Y+39	; 0x27
    28da:	78 a5       	ldd	r23, Y+40	; 0x28
    28dc:	89 a5       	ldd	r24, Y+41	; 0x29
    28de:	9a a5       	ldd	r25, Y+42	; 0x2a
    28e0:	20 e0       	ldi	r18, 0x00	; 0
    28e2:	30 e0       	ldi	r19, 0x00	; 0
    28e4:	4a ef       	ldi	r20, 0xFA	; 250
    28e6:	54 e4       	ldi	r21, 0x44	; 68
    28e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28ec:	dc 01       	movw	r26, r24
    28ee:	cb 01       	movw	r24, r22
    28f0:	8b a3       	std	Y+35, r24	; 0x23
    28f2:	9c a3       	std	Y+36, r25	; 0x24
    28f4:	ad a3       	std	Y+37, r26	; 0x25
    28f6:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    28f8:	6b a1       	ldd	r22, Y+35	; 0x23
    28fa:	7c a1       	ldd	r23, Y+36	; 0x24
    28fc:	8d a1       	ldd	r24, Y+37	; 0x25
    28fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2900:	20 e0       	ldi	r18, 0x00	; 0
    2902:	30 e0       	ldi	r19, 0x00	; 0
    2904:	40 e8       	ldi	r20, 0x80	; 128
    2906:	5f e3       	ldi	r21, 0x3F	; 63
    2908:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    290c:	88 23       	and	r24, r24
    290e:	2c f4       	brge	.+10     	; 0x291a <LCD_displayCharacter+0x160>
		__ticks = 1;
    2910:	81 e0       	ldi	r24, 0x01	; 1
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	9a a3       	std	Y+34, r25	; 0x22
    2916:	89 a3       	std	Y+33, r24	; 0x21
    2918:	3f c0       	rjmp	.+126    	; 0x2998 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    291a:	6b a1       	ldd	r22, Y+35	; 0x23
    291c:	7c a1       	ldd	r23, Y+36	; 0x24
    291e:	8d a1       	ldd	r24, Y+37	; 0x25
    2920:	9e a1       	ldd	r25, Y+38	; 0x26
    2922:	20 e0       	ldi	r18, 0x00	; 0
    2924:	3f ef       	ldi	r19, 0xFF	; 255
    2926:	4f e7       	ldi	r20, 0x7F	; 127
    2928:	57 e4       	ldi	r21, 0x47	; 71
    292a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    292e:	18 16       	cp	r1, r24
    2930:	4c f5       	brge	.+82     	; 0x2984 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2932:	6f a1       	ldd	r22, Y+39	; 0x27
    2934:	78 a5       	ldd	r23, Y+40	; 0x28
    2936:	89 a5       	ldd	r24, Y+41	; 0x29
    2938:	9a a5       	ldd	r25, Y+42	; 0x2a
    293a:	20 e0       	ldi	r18, 0x00	; 0
    293c:	30 e0       	ldi	r19, 0x00	; 0
    293e:	40 e2       	ldi	r20, 0x20	; 32
    2940:	51 e4       	ldi	r21, 0x41	; 65
    2942:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2946:	dc 01       	movw	r26, r24
    2948:	cb 01       	movw	r24, r22
    294a:	bc 01       	movw	r22, r24
    294c:	cd 01       	movw	r24, r26
    294e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2952:	dc 01       	movw	r26, r24
    2954:	cb 01       	movw	r24, r22
    2956:	9a a3       	std	Y+34, r25	; 0x22
    2958:	89 a3       	std	Y+33, r24	; 0x21
    295a:	0f c0       	rjmp	.+30     	; 0x297a <LCD_displayCharacter+0x1c0>
    295c:	88 ec       	ldi	r24, 0xC8	; 200
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	98 a3       	std	Y+32, r25	; 0x20
    2962:	8f 8f       	std	Y+31, r24	; 0x1f
    2964:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2966:	98 a1       	ldd	r25, Y+32	; 0x20
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <LCD_displayCharacter+0x1ae>
    296c:	98 a3       	std	Y+32, r25	; 0x20
    296e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2970:	89 a1       	ldd	r24, Y+33	; 0x21
    2972:	9a a1       	ldd	r25, Y+34	; 0x22
    2974:	01 97       	sbiw	r24, 0x01	; 1
    2976:	9a a3       	std	Y+34, r25	; 0x22
    2978:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    297a:	89 a1       	ldd	r24, Y+33	; 0x21
    297c:	9a a1       	ldd	r25, Y+34	; 0x22
    297e:	00 97       	sbiw	r24, 0x00	; 0
    2980:	69 f7       	brne	.-38     	; 0x295c <LCD_displayCharacter+0x1a2>
    2982:	14 c0       	rjmp	.+40     	; 0x29ac <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2984:	6b a1       	ldd	r22, Y+35	; 0x23
    2986:	7c a1       	ldd	r23, Y+36	; 0x24
    2988:	8d a1       	ldd	r24, Y+37	; 0x25
    298a:	9e a1       	ldd	r25, Y+38	; 0x26
    298c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2990:	dc 01       	movw	r26, r24
    2992:	cb 01       	movw	r24, r22
    2994:	9a a3       	std	Y+34, r25	; 0x22
    2996:	89 a3       	std	Y+33, r24	; 0x21
    2998:	89 a1       	ldd	r24, Y+33	; 0x21
    299a:	9a a1       	ldd	r25, Y+34	; 0x22
    299c:	9e 8f       	std	Y+30, r25	; 0x1e
    299e:	8d 8f       	std	Y+29, r24	; 0x1d
    29a0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    29a2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    29a4:	01 97       	sbiw	r24, 0x01	; 1
    29a6:	f1 f7       	brne	.-4      	; 0x29a4 <LCD_displayCharacter+0x1ea>
    29a8:	9e 8f       	std	Y+30, r25	; 0x1e
    29aa:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    29ac:	80 e0       	ldi	r24, 0x00	; 0
    29ae:	69 ad       	ldd	r22, Y+57	; 0x39
    29b0:	0e 94 c9 10 	call	0x2192	; 0x2192 <GPIO_writePort>
    29b4:	80 e0       	ldi	r24, 0x00	; 0
    29b6:	90 e0       	ldi	r25, 0x00	; 0
    29b8:	a0 e8       	ldi	r26, 0x80	; 128
    29ba:	bf e3       	ldi	r27, 0x3F	; 63
    29bc:	89 8f       	std	Y+25, r24	; 0x19
    29be:	9a 8f       	std	Y+26, r25	; 0x1a
    29c0:	ab 8f       	std	Y+27, r26	; 0x1b
    29c2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    29c4:	69 8d       	ldd	r22, Y+25	; 0x19
    29c6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    29c8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    29ca:	9c 8d       	ldd	r25, Y+28	; 0x1c
    29cc:	20 e0       	ldi	r18, 0x00	; 0
    29ce:	30 e0       	ldi	r19, 0x00	; 0
    29d0:	4a ef       	ldi	r20, 0xFA	; 250
    29d2:	54 e4       	ldi	r21, 0x44	; 68
    29d4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    29d8:	dc 01       	movw	r26, r24
    29da:	cb 01       	movw	r24, r22
    29dc:	8d 8b       	std	Y+21, r24	; 0x15
    29de:	9e 8b       	std	Y+22, r25	; 0x16
    29e0:	af 8b       	std	Y+23, r26	; 0x17
    29e2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    29e4:	6d 89       	ldd	r22, Y+21	; 0x15
    29e6:	7e 89       	ldd	r23, Y+22	; 0x16
    29e8:	8f 89       	ldd	r24, Y+23	; 0x17
    29ea:	98 8d       	ldd	r25, Y+24	; 0x18
    29ec:	20 e0       	ldi	r18, 0x00	; 0
    29ee:	30 e0       	ldi	r19, 0x00	; 0
    29f0:	40 e8       	ldi	r20, 0x80	; 128
    29f2:	5f e3       	ldi	r21, 0x3F	; 63
    29f4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    29f8:	88 23       	and	r24, r24
    29fa:	2c f4       	brge	.+10     	; 0x2a06 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    29fc:	81 e0       	ldi	r24, 0x01	; 1
    29fe:	90 e0       	ldi	r25, 0x00	; 0
    2a00:	9c 8b       	std	Y+20, r25	; 0x14
    2a02:	8b 8b       	std	Y+19, r24	; 0x13
    2a04:	3f c0       	rjmp	.+126    	; 0x2a84 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    2a06:	6d 89       	ldd	r22, Y+21	; 0x15
    2a08:	7e 89       	ldd	r23, Y+22	; 0x16
    2a0a:	8f 89       	ldd	r24, Y+23	; 0x17
    2a0c:	98 8d       	ldd	r25, Y+24	; 0x18
    2a0e:	20 e0       	ldi	r18, 0x00	; 0
    2a10:	3f ef       	ldi	r19, 0xFF	; 255
    2a12:	4f e7       	ldi	r20, 0x7F	; 127
    2a14:	57 e4       	ldi	r21, 0x47	; 71
    2a16:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2a1a:	18 16       	cp	r1, r24
    2a1c:	4c f5       	brge	.+82     	; 0x2a70 <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a1e:	69 8d       	ldd	r22, Y+25	; 0x19
    2a20:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2a22:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2a24:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2a26:	20 e0       	ldi	r18, 0x00	; 0
    2a28:	30 e0       	ldi	r19, 0x00	; 0
    2a2a:	40 e2       	ldi	r20, 0x20	; 32
    2a2c:	51 e4       	ldi	r21, 0x41	; 65
    2a2e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a32:	dc 01       	movw	r26, r24
    2a34:	cb 01       	movw	r24, r22
    2a36:	bc 01       	movw	r22, r24
    2a38:	cd 01       	movw	r24, r26
    2a3a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a3e:	dc 01       	movw	r26, r24
    2a40:	cb 01       	movw	r24, r22
    2a42:	9c 8b       	std	Y+20, r25	; 0x14
    2a44:	8b 8b       	std	Y+19, r24	; 0x13
    2a46:	0f c0       	rjmp	.+30     	; 0x2a66 <LCD_displayCharacter+0x2ac>
    2a48:	88 ec       	ldi	r24, 0xC8	; 200
    2a4a:	90 e0       	ldi	r25, 0x00	; 0
    2a4c:	9a 8b       	std	Y+18, r25	; 0x12
    2a4e:	89 8b       	std	Y+17, r24	; 0x11
    2a50:	89 89       	ldd	r24, Y+17	; 0x11
    2a52:	9a 89       	ldd	r25, Y+18	; 0x12
    2a54:	01 97       	sbiw	r24, 0x01	; 1
    2a56:	f1 f7       	brne	.-4      	; 0x2a54 <LCD_displayCharacter+0x29a>
    2a58:	9a 8b       	std	Y+18, r25	; 0x12
    2a5a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2a5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2a5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2a60:	01 97       	sbiw	r24, 0x01	; 1
    2a62:	9c 8b       	std	Y+20, r25	; 0x14
    2a64:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2a66:	8b 89       	ldd	r24, Y+19	; 0x13
    2a68:	9c 89       	ldd	r25, Y+20	; 0x14
    2a6a:	00 97       	sbiw	r24, 0x00	; 0
    2a6c:	69 f7       	brne	.-38     	; 0x2a48 <LCD_displayCharacter+0x28e>
    2a6e:	14 c0       	rjmp	.+40     	; 0x2a98 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2a70:	6d 89       	ldd	r22, Y+21	; 0x15
    2a72:	7e 89       	ldd	r23, Y+22	; 0x16
    2a74:	8f 89       	ldd	r24, Y+23	; 0x17
    2a76:	98 8d       	ldd	r25, Y+24	; 0x18
    2a78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a7c:	dc 01       	movw	r26, r24
    2a7e:	cb 01       	movw	r24, r22
    2a80:	9c 8b       	std	Y+20, r25	; 0x14
    2a82:	8b 8b       	std	Y+19, r24	; 0x13
    2a84:	8b 89       	ldd	r24, Y+19	; 0x13
    2a86:	9c 89       	ldd	r25, Y+20	; 0x14
    2a88:	98 8b       	std	Y+16, r25	; 0x10
    2a8a:	8f 87       	std	Y+15, r24	; 0x0f
    2a8c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2a8e:	98 89       	ldd	r25, Y+16	; 0x10
    2a90:	01 97       	sbiw	r24, 0x01	; 1
    2a92:	f1 f7       	brne	.-4      	; 0x2a90 <LCD_displayCharacter+0x2d6>
    2a94:	98 8b       	std	Y+16, r25	; 0x10
    2a96:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    2a98:	81 e0       	ldi	r24, 0x01	; 1
    2a9a:	67 e0       	ldi	r22, 0x07	; 7
    2a9c:	40 e0       	ldi	r20, 0x00	; 0
    2a9e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <GPIO_writePin>
    2aa2:	80 e0       	ldi	r24, 0x00	; 0
    2aa4:	90 e0       	ldi	r25, 0x00	; 0
    2aa6:	a0 e8       	ldi	r26, 0x80	; 128
    2aa8:	bf e3       	ldi	r27, 0x3F	; 63
    2aaa:	8b 87       	std	Y+11, r24	; 0x0b
    2aac:	9c 87       	std	Y+12, r25	; 0x0c
    2aae:	ad 87       	std	Y+13, r26	; 0x0d
    2ab0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ab2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ab4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ab6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ab8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2aba:	20 e0       	ldi	r18, 0x00	; 0
    2abc:	30 e0       	ldi	r19, 0x00	; 0
    2abe:	4a ef       	ldi	r20, 0xFA	; 250
    2ac0:	54 e4       	ldi	r21, 0x44	; 68
    2ac2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac6:	dc 01       	movw	r26, r24
    2ac8:	cb 01       	movw	r24, r22
    2aca:	8f 83       	std	Y+7, r24	; 0x07
    2acc:	98 87       	std	Y+8, r25	; 0x08
    2ace:	a9 87       	std	Y+9, r26	; 0x09
    2ad0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ad2:	6f 81       	ldd	r22, Y+7	; 0x07
    2ad4:	78 85       	ldd	r23, Y+8	; 0x08
    2ad6:	89 85       	ldd	r24, Y+9	; 0x09
    2ad8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ada:	20 e0       	ldi	r18, 0x00	; 0
    2adc:	30 e0       	ldi	r19, 0x00	; 0
    2ade:	40 e8       	ldi	r20, 0x80	; 128
    2ae0:	5f e3       	ldi	r21, 0x3F	; 63
    2ae2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2ae6:	88 23       	and	r24, r24
    2ae8:	2c f4       	brge	.+10     	; 0x2af4 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    2aea:	81 e0       	ldi	r24, 0x01	; 1
    2aec:	90 e0       	ldi	r25, 0x00	; 0
    2aee:	9e 83       	std	Y+6, r25	; 0x06
    2af0:	8d 83       	std	Y+5, r24	; 0x05
    2af2:	3f c0       	rjmp	.+126    	; 0x2b72 <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    2af4:	6f 81       	ldd	r22, Y+7	; 0x07
    2af6:	78 85       	ldd	r23, Y+8	; 0x08
    2af8:	89 85       	ldd	r24, Y+9	; 0x09
    2afa:	9a 85       	ldd	r25, Y+10	; 0x0a
    2afc:	20 e0       	ldi	r18, 0x00	; 0
    2afe:	3f ef       	ldi	r19, 0xFF	; 255
    2b00:	4f e7       	ldi	r20, 0x7F	; 127
    2b02:	57 e4       	ldi	r21, 0x47	; 71
    2b04:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b08:	18 16       	cp	r1, r24
    2b0a:	4c f5       	brge	.+82     	; 0x2b5e <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b0c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2b0e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2b10:	8d 85       	ldd	r24, Y+13	; 0x0d
    2b12:	9e 85       	ldd	r25, Y+14	; 0x0e
    2b14:	20 e0       	ldi	r18, 0x00	; 0
    2b16:	30 e0       	ldi	r19, 0x00	; 0
    2b18:	40 e2       	ldi	r20, 0x20	; 32
    2b1a:	51 e4       	ldi	r21, 0x41	; 65
    2b1c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b20:	dc 01       	movw	r26, r24
    2b22:	cb 01       	movw	r24, r22
    2b24:	bc 01       	movw	r22, r24
    2b26:	cd 01       	movw	r24, r26
    2b28:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b2c:	dc 01       	movw	r26, r24
    2b2e:	cb 01       	movw	r24, r22
    2b30:	9e 83       	std	Y+6, r25	; 0x06
    2b32:	8d 83       	std	Y+5, r24	; 0x05
    2b34:	0f c0       	rjmp	.+30     	; 0x2b54 <LCD_displayCharacter+0x39a>
    2b36:	88 ec       	ldi	r24, 0xC8	; 200
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	9c 83       	std	Y+4, r25	; 0x04
    2b3c:	8b 83       	std	Y+3, r24	; 0x03
    2b3e:	8b 81       	ldd	r24, Y+3	; 0x03
    2b40:	9c 81       	ldd	r25, Y+4	; 0x04
    2b42:	01 97       	sbiw	r24, 0x01	; 1
    2b44:	f1 f7       	brne	.-4      	; 0x2b42 <LCD_displayCharacter+0x388>
    2b46:	9c 83       	std	Y+4, r25	; 0x04
    2b48:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b4a:	8d 81       	ldd	r24, Y+5	; 0x05
    2b4c:	9e 81       	ldd	r25, Y+6	; 0x06
    2b4e:	01 97       	sbiw	r24, 0x01	; 1
    2b50:	9e 83       	std	Y+6, r25	; 0x06
    2b52:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b54:	8d 81       	ldd	r24, Y+5	; 0x05
    2b56:	9e 81       	ldd	r25, Y+6	; 0x06
    2b58:	00 97       	sbiw	r24, 0x00	; 0
    2b5a:	69 f7       	brne	.-38     	; 0x2b36 <LCD_displayCharacter+0x37c>
    2b5c:	14 c0       	rjmp	.+40     	; 0x2b86 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2b60:	78 85       	ldd	r23, Y+8	; 0x08
    2b62:	89 85       	ldd	r24, Y+9	; 0x09
    2b64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2b66:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	9e 83       	std	Y+6, r25	; 0x06
    2b70:	8d 83       	std	Y+5, r24	; 0x05
    2b72:	8d 81       	ldd	r24, Y+5	; 0x05
    2b74:	9e 81       	ldd	r25, Y+6	; 0x06
    2b76:	9a 83       	std	Y+2, r25	; 0x02
    2b78:	89 83       	std	Y+1, r24	; 0x01
    2b7a:	89 81       	ldd	r24, Y+1	; 0x01
    2b7c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b7e:	01 97       	sbiw	r24, 0x01	; 1
    2b80:	f1 f7       	brne	.-4      	; 0x2b7e <LCD_displayCharacter+0x3c4>
    2b82:	9a 83       	std	Y+2, r25	; 0x02
    2b84:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    2b86:	e9 96       	adiw	r28, 0x39	; 57
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	cf 91       	pop	r28
    2b94:	df 91       	pop	r29
    2b96:	08 95       	ret

00002b98 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    2b98:	df 93       	push	r29
    2b9a:	cf 93       	push	r28
    2b9c:	00 d0       	rcall	.+0      	; 0x2b9e <LCD_displayString+0x6>
    2b9e:	0f 92       	push	r0
    2ba0:	cd b7       	in	r28, 0x3d	; 61
    2ba2:	de b7       	in	r29, 0x3e	; 62
    2ba4:	9b 83       	std	Y+3, r25	; 0x03
    2ba6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2ba8:	19 82       	std	Y+1, r1	; 0x01
    2baa:	0e c0       	rjmp	.+28     	; 0x2bc8 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    2bac:	89 81       	ldd	r24, Y+1	; 0x01
    2bae:	28 2f       	mov	r18, r24
    2bb0:	30 e0       	ldi	r19, 0x00	; 0
    2bb2:	8a 81       	ldd	r24, Y+2	; 0x02
    2bb4:	9b 81       	ldd	r25, Y+3	; 0x03
    2bb6:	fc 01       	movw	r30, r24
    2bb8:	e2 0f       	add	r30, r18
    2bba:	f3 1f       	adc	r31, r19
    2bbc:	80 81       	ld	r24, Z
    2bbe:	0e 94 dd 13 	call	0x27ba	; 0x27ba <LCD_displayCharacter>
		i++;
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	8f 5f       	subi	r24, 0xFF	; 255
    2bc6:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    2bc8:	89 81       	ldd	r24, Y+1	; 0x01
    2bca:	28 2f       	mov	r18, r24
    2bcc:	30 e0       	ldi	r19, 0x00	; 0
    2bce:	8a 81       	ldd	r24, Y+2	; 0x02
    2bd0:	9b 81       	ldd	r25, Y+3	; 0x03
    2bd2:	fc 01       	movw	r30, r24
    2bd4:	e2 0f       	add	r30, r18
    2bd6:	f3 1f       	adc	r31, r19
    2bd8:	80 81       	ld	r24, Z
    2bda:	88 23       	and	r24, r24
    2bdc:	39 f7       	brne	.-50     	; 0x2bac <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}		
	*********************************************************/
}
    2bde:	0f 90       	pop	r0
    2be0:	0f 90       	pop	r0
    2be2:	0f 90       	pop	r0
    2be4:	cf 91       	pop	r28
    2be6:	df 91       	pop	r29
    2be8:	08 95       	ret

00002bea <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    2bea:	df 93       	push	r29
    2bec:	cf 93       	push	r28
    2bee:	00 d0       	rcall	.+0      	; 0x2bf0 <LCD_moveCursor+0x6>
    2bf0:	00 d0       	rcall	.+0      	; 0x2bf2 <LCD_moveCursor+0x8>
    2bf2:	0f 92       	push	r0
    2bf4:	cd b7       	in	r28, 0x3d	; 61
    2bf6:	de b7       	in	r29, 0x3e	; 62
    2bf8:	8a 83       	std	Y+2, r24	; 0x02
    2bfa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;
	
	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	28 2f       	mov	r18, r24
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	3d 83       	std	Y+5, r19	; 0x05
    2c04:	2c 83       	std	Y+4, r18	; 0x04
    2c06:	8c 81       	ldd	r24, Y+4	; 0x04
    2c08:	9d 81       	ldd	r25, Y+5	; 0x05
    2c0a:	81 30       	cpi	r24, 0x01	; 1
    2c0c:	91 05       	cpc	r25, r1
    2c0e:	c1 f0       	breq	.+48     	; 0x2c40 <LCD_moveCursor+0x56>
    2c10:	2c 81       	ldd	r18, Y+4	; 0x04
    2c12:	3d 81       	ldd	r19, Y+5	; 0x05
    2c14:	22 30       	cpi	r18, 0x02	; 2
    2c16:	31 05       	cpc	r19, r1
    2c18:	2c f4       	brge	.+10     	; 0x2c24 <LCD_moveCursor+0x3a>
    2c1a:	8c 81       	ldd	r24, Y+4	; 0x04
    2c1c:	9d 81       	ldd	r25, Y+5	; 0x05
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	61 f0       	breq	.+24     	; 0x2c3a <LCD_moveCursor+0x50>
    2c22:	19 c0       	rjmp	.+50     	; 0x2c56 <LCD_moveCursor+0x6c>
    2c24:	2c 81       	ldd	r18, Y+4	; 0x04
    2c26:	3d 81       	ldd	r19, Y+5	; 0x05
    2c28:	22 30       	cpi	r18, 0x02	; 2
    2c2a:	31 05       	cpc	r19, r1
    2c2c:	69 f0       	breq	.+26     	; 0x2c48 <LCD_moveCursor+0x5e>
    2c2e:	8c 81       	ldd	r24, Y+4	; 0x04
    2c30:	9d 81       	ldd	r25, Y+5	; 0x05
    2c32:	83 30       	cpi	r24, 0x03	; 3
    2c34:	91 05       	cpc	r25, r1
    2c36:	61 f0       	breq	.+24     	; 0x2c50 <LCD_moveCursor+0x66>
    2c38:	0e c0       	rjmp	.+28     	; 0x2c56 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    2c3a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c3c:	89 83       	std	Y+1, r24	; 0x01
    2c3e:	0b c0       	rjmp	.+22     	; 0x2c56 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    2c40:	8b 81       	ldd	r24, Y+3	; 0x03
    2c42:	80 5c       	subi	r24, 0xC0	; 192
    2c44:	89 83       	std	Y+1, r24	; 0x01
    2c46:	07 c0       	rjmp	.+14     	; 0x2c56 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    2c48:	8b 81       	ldd	r24, Y+3	; 0x03
    2c4a:	80 5f       	subi	r24, 0xF0	; 240
    2c4c:	89 83       	std	Y+1, r24	; 0x01
    2c4e:	03 c0       	rjmp	.+6      	; 0x2c56 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    2c50:	8b 81       	ldd	r24, Y+3	; 0x03
    2c52:	80 5b       	subi	r24, 0xB0	; 176
    2c54:	89 83       	std	Y+1, r24	; 0x01
				break;
	}					
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    2c56:	89 81       	ldd	r24, Y+1	; 0x01
    2c58:	80 68       	ori	r24, 0x80	; 128
    2c5a:	0e 94 ee 11 	call	0x23dc	; 0x23dc <LCD_sendCommand>
}
    2c5e:	0f 90       	pop	r0
    2c60:	0f 90       	pop	r0
    2c62:	0f 90       	pop	r0
    2c64:	0f 90       	pop	r0
    2c66:	0f 90       	pop	r0
    2c68:	cf 91       	pop	r28
    2c6a:	df 91       	pop	r29
    2c6c:	08 95       	ret

00002c6e <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    2c6e:	df 93       	push	r29
    2c70:	cf 93       	push	r28
    2c72:	00 d0       	rcall	.+0      	; 0x2c74 <LCD_displayStringRowColumn+0x6>
    2c74:	00 d0       	rcall	.+0      	; 0x2c76 <LCD_displayStringRowColumn+0x8>
    2c76:	cd b7       	in	r28, 0x3d	; 61
    2c78:	de b7       	in	r29, 0x3e	; 62
    2c7a:	89 83       	std	Y+1, r24	; 0x01
    2c7c:	6a 83       	std	Y+2, r22	; 0x02
    2c7e:	5c 83       	std	Y+4, r21	; 0x04
    2c80:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    2c82:	89 81       	ldd	r24, Y+1	; 0x01
    2c84:	6a 81       	ldd	r22, Y+2	; 0x02
    2c86:	0e 94 f5 15 	call	0x2bea	; 0x2bea <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    2c8a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c8c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c8e:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_displayString>
}
    2c92:	0f 90       	pop	r0
    2c94:	0f 90       	pop	r0
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0
    2c9a:	cf 91       	pop	r28
    2c9c:	df 91       	pop	r29
    2c9e:	08 95       	ret

00002ca0 <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    2ca0:	df 93       	push	r29
    2ca2:	cf 93       	push	r28
    2ca4:	cd b7       	in	r28, 0x3d	; 61
    2ca6:	de b7       	in	r29, 0x3e	; 62
    2ca8:	62 97       	sbiw	r28, 0x12	; 18
    2caa:	0f b6       	in	r0, 0x3f	; 63
    2cac:	f8 94       	cli
    2cae:	de bf       	out	0x3e, r29	; 62
    2cb0:	0f be       	out	0x3f, r0	; 63
    2cb2:	cd bf       	out	0x3d, r28	; 61
    2cb4:	9a 8b       	std	Y+18, r25	; 0x12
    2cb6:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    2cb8:	89 89       	ldd	r24, Y+17	; 0x11
    2cba:	9a 89       	ldd	r25, Y+18	; 0x12
    2cbc:	9e 01       	movw	r18, r28
    2cbe:	2f 5f       	subi	r18, 0xFF	; 255
    2cc0:	3f 4f       	sbci	r19, 0xFF	; 255
    2cc2:	b9 01       	movw	r22, r18
    2cc4:	4a e0       	ldi	r20, 0x0A	; 10
    2cc6:	50 e0       	ldi	r21, 0x00	; 0
    2cc8:	0e 94 23 1a 	call	0x3446	; 0x3446 <itoa>
   LCD_displayString(buff); /* Display the string */
    2ccc:	ce 01       	movw	r24, r28
    2cce:	01 96       	adiw	r24, 0x01	; 1
    2cd0:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <LCD_displayString>
}
    2cd4:	62 96       	adiw	r28, 0x12	; 18
    2cd6:	0f b6       	in	r0, 0x3f	; 63
    2cd8:	f8 94       	cli
    2cda:	de bf       	out	0x3e, r29	; 62
    2cdc:	0f be       	out	0x3f, r0	; 63
    2cde:	cd bf       	out	0x3d, r28	; 61
    2ce0:	cf 91       	pop	r28
    2ce2:	df 91       	pop	r29
    2ce4:	08 95       	ret

00002ce6 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    2ce6:	df 93       	push	r29
    2ce8:	cf 93       	push	r28
    2cea:	cd b7       	in	r28, 0x3d	; 61
    2cec:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    2cee:	81 e0       	ldi	r24, 0x01	; 1
    2cf0:	0e 94 ee 11 	call	0x23dc	; 0x23dc <LCD_sendCommand>
}
    2cf4:	cf 91       	pop	r28
    2cf6:	df 91       	pop	r29
    2cf8:	08 95       	ret

00002cfa <LCD_displayArray>:


void LCD_displayArray(const uint8 *arr,uint8 size)
{
    2cfa:	df 93       	push	r29
    2cfc:	cf 93       	push	r28
    2cfe:	00 d0       	rcall	.+0      	; 0x2d00 <LCD_displayArray+0x6>
    2d00:	00 d0       	rcall	.+0      	; 0x2d02 <LCD_displayArray+0x8>
    2d02:	cd b7       	in	r28, 0x3d	; 61
    2d04:	de b7       	in	r29, 0x3e	; 62
    2d06:	9b 83       	std	Y+3, r25	; 0x03
    2d08:	8a 83       	std	Y+2, r24	; 0x02
    2d0a:	6c 83       	std	Y+4, r22	; 0x04
	uint8 i = 0;
    2d0c:	19 82       	std	Y+1, r1	; 0x01
	for(i=0;i<size;i++){
    2d0e:	19 82       	std	Y+1, r1	; 0x01
    2d10:	10 c0       	rjmp	.+32     	; 0x2d32 <LCD_displayArray+0x38>
		LCD_intgerToString(arr[i]);
    2d12:	89 81       	ldd	r24, Y+1	; 0x01
    2d14:	28 2f       	mov	r18, r24
    2d16:	30 e0       	ldi	r19, 0x00	; 0
    2d18:	8a 81       	ldd	r24, Y+2	; 0x02
    2d1a:	9b 81       	ldd	r25, Y+3	; 0x03
    2d1c:	fc 01       	movw	r30, r24
    2d1e:	e2 0f       	add	r30, r18
    2d20:	f3 1f       	adc	r31, r19
    2d22:	80 81       	ld	r24, Z
    2d24:	88 2f       	mov	r24, r24
    2d26:	90 e0       	ldi	r25, 0x00	; 0
    2d28:	0e 94 50 16 	call	0x2ca0	; 0x2ca0 <LCD_intgerToString>


void LCD_displayArray(const uint8 *arr,uint8 size)
{
	uint8 i = 0;
	for(i=0;i<size;i++){
    2d2c:	89 81       	ldd	r24, Y+1	; 0x01
    2d2e:	8f 5f       	subi	r24, 0xFF	; 255
    2d30:	89 83       	std	Y+1, r24	; 0x01
    2d32:	99 81       	ldd	r25, Y+1	; 0x01
    2d34:	8c 81       	ldd	r24, Y+4	; 0x04
    2d36:	98 17       	cp	r25, r24
    2d38:	60 f3       	brcs	.-40     	; 0x2d12 <LCD_displayArray+0x18>
		LCD_intgerToString(arr[i]);
	}

}
    2d3a:	0f 90       	pop	r0
    2d3c:	0f 90       	pop	r0
    2d3e:	0f 90       	pop	r0
    2d40:	0f 90       	pop	r0
    2d42:	cf 91       	pop	r28
    2d44:	df 91       	pop	r29
    2d46:	08 95       	ret

00002d48 <PWM_Timer0_Start>:

/*
 * Description: start the pwm output with a certain duty cycle value
 */
void PWM_Timer0_Start(uint8 duty_cycle)
{
    2d48:	df 93       	push	r29
    2d4a:	cf 93       	push	r28
    2d4c:	0f 92       	push	r0
    2d4e:	cd b7       	in	r28, 0x3d	; 61
    2d50:	de b7       	in	r29, 0x3e	; 62
    2d52:	89 83       	std	Y+1, r24	; 0x01
	// Set Timer Initial Value to 0
	TCNT0 = 0;
    2d54:	e2 e5       	ldi	r30, 0x52	; 82
    2d56:	f0 e0       	ldi	r31, 0x00	; 0
    2d58:	10 82       	st	Z, r1

	//fast PWM, non-inverted mode, and F/8 clock
	TCCR0 = (1<<WGM00) | (1<<WGM01) | (1<<COM01) | (1<<CS01);
    2d5a:	e3 e5       	ldi	r30, 0x53	; 83
    2d5c:	f0 e0       	ldi	r31, 0x00	; 0
    2d5e:	8a e6       	ldi	r24, 0x6A	; 106
    2d60:	80 83       	st	Z, r24

	//to get percent: divide duty cycle by 100 then multiply with 256
	OCR0  = (uint8)(((uint16)255*duty_cycle)/100);
    2d62:	ec e5       	ldi	r30, 0x5C	; 92
    2d64:	f0 e0       	ldi	r31, 0x00	; 0
    2d66:	89 81       	ldd	r24, Y+1	; 0x01
    2d68:	48 2f       	mov	r20, r24
    2d6a:	50 e0       	ldi	r21, 0x00	; 0
    2d6c:	ca 01       	movw	r24, r20
    2d6e:	9c 01       	movw	r18, r24
    2d70:	22 0f       	add	r18, r18
    2d72:	33 1f       	adc	r19, r19
    2d74:	c9 01       	movw	r24, r18
    2d76:	96 95       	lsr	r25
    2d78:	98 2f       	mov	r25, r24
    2d7a:	88 27       	eor	r24, r24
    2d7c:	97 95       	ror	r25
    2d7e:	87 95       	ror	r24
    2d80:	82 1b       	sub	r24, r18
    2d82:	93 0b       	sbc	r25, r19
    2d84:	84 0f       	add	r24, r20
    2d86:	95 1f       	adc	r25, r21
    2d88:	24 e6       	ldi	r18, 0x64	; 100
    2d8a:	30 e0       	ldi	r19, 0x00	; 0
    2d8c:	b9 01       	movw	r22, r18
    2d8e:	0e 94 b6 19 	call	0x336c	; 0x336c <__udivmodhi4>
    2d92:	cb 01       	movw	r24, r22
    2d94:	80 83       	st	Z, r24

	//set direction as output for pin where the PWM signal is generated
	GPIO_setupPinDirection(PWM_ENABLE_PORT_ID,PWM_ENABLE_PIN_ID,PIN_OUTPUT);
    2d96:	81 e0       	ldi	r24, 0x01	; 1
    2d98:	63 e0       	ldi	r22, 0x03	; 3
    2d9a:	41 e0       	ldi	r20, 0x01	; 1
    2d9c:	0e 94 14 0e 	call	0x1c28	; 0x1c28 <GPIO_setupPinDirection>
}
    2da0:	0f 90       	pop	r0
    2da2:	cf 91       	pop	r28
    2da4:	df 91       	pop	r29
    2da6:	08 95       	ret

00002da8 <__vector_9>:


static volatile void (*g_CallBackPtr)(void) = NULL_PTR;	//global pointer to function to be used for the cb


ISR(TIMER1_OVF_vect){
    2da8:	1f 92       	push	r1
    2daa:	0f 92       	push	r0
    2dac:	0f b6       	in	r0, 0x3f	; 63
    2dae:	0f 92       	push	r0
    2db0:	11 24       	eor	r1, r1
    2db2:	2f 93       	push	r18
    2db4:	3f 93       	push	r19
    2db6:	4f 93       	push	r20
    2db8:	5f 93       	push	r21
    2dba:	6f 93       	push	r22
    2dbc:	7f 93       	push	r23
    2dbe:	8f 93       	push	r24
    2dc0:	9f 93       	push	r25
    2dc2:	af 93       	push	r26
    2dc4:	bf 93       	push	r27
    2dc6:	ef 93       	push	r30
    2dc8:	ff 93       	push	r31
    2dca:	df 93       	push	r29
    2dcc:	cf 93       	push	r28
    2dce:	cd b7       	in	r28, 0x3d	; 61
    2dd0:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr();
    2dd2:	e0 91 03 01 	lds	r30, 0x0103
    2dd6:	f0 91 04 01 	lds	r31, 0x0104
    2dda:	09 95       	icall
}
    2ddc:	cf 91       	pop	r28
    2dde:	df 91       	pop	r29
    2de0:	ff 91       	pop	r31
    2de2:	ef 91       	pop	r30
    2de4:	bf 91       	pop	r27
    2de6:	af 91       	pop	r26
    2de8:	9f 91       	pop	r25
    2dea:	8f 91       	pop	r24
    2dec:	7f 91       	pop	r23
    2dee:	6f 91       	pop	r22
    2df0:	5f 91       	pop	r21
    2df2:	4f 91       	pop	r20
    2df4:	3f 91       	pop	r19
    2df6:	2f 91       	pop	r18
    2df8:	0f 90       	pop	r0
    2dfa:	0f be       	out	0x3f, r0	; 63
    2dfc:	0f 90       	pop	r0
    2dfe:	1f 90       	pop	r1
    2e00:	18 95       	reti

00002e02 <__vector_7>:

ISR(TIMER1_COMPA_vect){
    2e02:	1f 92       	push	r1
    2e04:	0f 92       	push	r0
    2e06:	0f b6       	in	r0, 0x3f	; 63
    2e08:	0f 92       	push	r0
    2e0a:	11 24       	eor	r1, r1
    2e0c:	2f 93       	push	r18
    2e0e:	3f 93       	push	r19
    2e10:	4f 93       	push	r20
    2e12:	5f 93       	push	r21
    2e14:	6f 93       	push	r22
    2e16:	7f 93       	push	r23
    2e18:	8f 93       	push	r24
    2e1a:	9f 93       	push	r25
    2e1c:	af 93       	push	r26
    2e1e:	bf 93       	push	r27
    2e20:	ef 93       	push	r30
    2e22:	ff 93       	push	r31
    2e24:	df 93       	push	r29
    2e26:	cf 93       	push	r28
    2e28:	cd b7       	in	r28, 0x3d	; 61
    2e2a:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr();
    2e2c:	e0 91 03 01 	lds	r30, 0x0103
    2e30:	f0 91 04 01 	lds	r31, 0x0104
    2e34:	09 95       	icall
}
    2e36:	cf 91       	pop	r28
    2e38:	df 91       	pop	r29
    2e3a:	ff 91       	pop	r31
    2e3c:	ef 91       	pop	r30
    2e3e:	bf 91       	pop	r27
    2e40:	af 91       	pop	r26
    2e42:	9f 91       	pop	r25
    2e44:	8f 91       	pop	r24
    2e46:	7f 91       	pop	r23
    2e48:	6f 91       	pop	r22
    2e4a:	5f 91       	pop	r21
    2e4c:	4f 91       	pop	r20
    2e4e:	3f 91       	pop	r19
    2e50:	2f 91       	pop	r18
    2e52:	0f 90       	pop	r0
    2e54:	0f be       	out	0x3f, r0	; 63
    2e56:	0f 90       	pop	r0
    2e58:	1f 90       	pop	r1
    2e5a:	18 95       	reti

00002e5c <Timer_1_init>:


void Timer_1_init(const Timer1_ConfigType * Config_Ptr){
    2e5c:	df 93       	push	r29
    2e5e:	cf 93       	push	r28
    2e60:	00 d0       	rcall	.+0      	; 0x2e62 <Timer_1_init+0x6>
    2e62:	cd b7       	in	r28, 0x3d	; 61
    2e64:	de b7       	in	r29, 0x3e	; 62
    2e66:	9a 83       	std	Y+2, r25	; 0x02
    2e68:	89 83       	std	Y+1, r24	; 0x01

	//in normal mode WGM10 WGM11 WGM12 WGM13 are all 0 so we can set them all to 0 by default
	CLEAR_BIT(TCCR1A,WGM10);
    2e6a:	af e4       	ldi	r26, 0x4F	; 79
    2e6c:	b0 e0       	ldi	r27, 0x00	; 0
    2e6e:	ef e4       	ldi	r30, 0x4F	; 79
    2e70:	f0 e0       	ldi	r31, 0x00	; 0
    2e72:	80 81       	ld	r24, Z
    2e74:	8e 7f       	andi	r24, 0xFE	; 254
    2e76:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1A,WGM11);
    2e78:	af e4       	ldi	r26, 0x4F	; 79
    2e7a:	b0 e0       	ldi	r27, 0x00	; 0
    2e7c:	ef e4       	ldi	r30, 0x4F	; 79
    2e7e:	f0 e0       	ldi	r31, 0x00	; 0
    2e80:	80 81       	ld	r24, Z
    2e82:	8d 7f       	andi	r24, 0xFD	; 253
    2e84:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM12);
    2e86:	ae e4       	ldi	r26, 0x4E	; 78
    2e88:	b0 e0       	ldi	r27, 0x00	; 0
    2e8a:	ee e4       	ldi	r30, 0x4E	; 78
    2e8c:	f0 e0       	ldi	r31, 0x00	; 0
    2e8e:	80 81       	ld	r24, Z
    2e90:	87 7f       	andi	r24, 0xF7	; 247
    2e92:	8c 93       	st	X, r24
	CLEAR_BIT(TCCR1B,WGM13);
    2e94:	ae e4       	ldi	r26, 0x4E	; 78
    2e96:	b0 e0       	ldi	r27, 0x00	; 0
    2e98:	ee e4       	ldi	r30, 0x4E	; 78
    2e9a:	f0 e0       	ldi	r31, 0x00	; 0
    2e9c:	80 81       	ld	r24, Z
    2e9e:	8f 7e       	andi	r24, 0xEF	; 239
    2ea0:	8c 93       	st	X, r24


	if(Config_Ptr->mode == CTC_OCR){
    2ea2:	e9 81       	ldd	r30, Y+1	; 0x01
    2ea4:	fa 81       	ldd	r31, Y+2	; 0x02
    2ea6:	85 81       	ldd	r24, Z+5	; 0x05
    2ea8:	84 30       	cpi	r24, 0x04	; 4
    2eaa:	c1 f4       	brne	.+48     	; 0x2edc <Timer_1_init+0x80>

		//in CTC mode only WGM12 is 1
		SET_BIT(TCCR1B,WGM12);
    2eac:	ae e4       	ldi	r26, 0x4E	; 78
    2eae:	b0 e0       	ldi	r27, 0x00	; 0
    2eb0:	ee e4       	ldi	r30, 0x4E	; 78
    2eb2:	f0 e0       	ldi	r31, 0x00	; 0
    2eb4:	80 81       	ld	r24, Z
    2eb6:	88 60       	ori	r24, 0x08	; 8
    2eb8:	8c 93       	st	X, r24

		//assign the compare value to OCR1A
		OCR1A = Config_Ptr->compare_value;
    2eba:	aa e4       	ldi	r26, 0x4A	; 74
    2ebc:	b0 e0       	ldi	r27, 0x00	; 0
    2ebe:	e9 81       	ldd	r30, Y+1	; 0x01
    2ec0:	fa 81       	ldd	r31, Y+2	; 0x02
    2ec2:	82 81       	ldd	r24, Z+2	; 0x02
    2ec4:	93 81       	ldd	r25, Z+3	; 0x03
    2ec6:	11 96       	adiw	r26, 0x01	; 1
    2ec8:	9c 93       	st	X, r25
    2eca:	8e 93       	st	-X, r24

		//enable interrupt for OCIE1A
		SET_BIT(TIMSK,OCIE1A);
    2ecc:	a9 e5       	ldi	r26, 0x59	; 89
    2ece:	b0 e0       	ldi	r27, 0x00	; 0
    2ed0:	e9 e5       	ldi	r30, 0x59	; 89
    2ed2:	f0 e0       	ldi	r31, 0x00	; 0
    2ed4:	80 81       	ld	r24, Z
    2ed6:	80 61       	ori	r24, 0x10	; 16
    2ed8:	8c 93       	st	X, r24
    2eda:	0c c0       	rjmp	.+24     	; 0x2ef4 <Timer_1_init+0x98>

	}else if(Config_Ptr->mode == NORMAL){
    2edc:	e9 81       	ldd	r30, Y+1	; 0x01
    2ede:	fa 81       	ldd	r31, Y+2	; 0x02
    2ee0:	85 81       	ldd	r24, Z+5	; 0x05
    2ee2:	88 23       	and	r24, r24
    2ee4:	39 f4       	brne	.+14     	; 0x2ef4 <Timer_1_init+0x98>

		//enable interrupt for TOIE1
		SET_BIT(TIMSK,TOIE1);
    2ee6:	a9 e5       	ldi	r26, 0x59	; 89
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	e9 e5       	ldi	r30, 0x59	; 89
    2eec:	f0 e0       	ldi	r31, 0x00	; 0
    2eee:	80 81       	ld	r24, Z
    2ef0:	84 60       	ori	r24, 0x04	; 4
    2ef2:	8c 93       	st	X, r24

	}

	//only active when using non-PWM mode
	SET_BIT(TCCR1A,FOC1A);
    2ef4:	af e4       	ldi	r26, 0x4F	; 79
    2ef6:	b0 e0       	ldi	r27, 0x00	; 0
    2ef8:	ef e4       	ldi	r30, 0x4F	; 79
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	80 81       	ld	r24, Z
    2efe:	88 60       	ori	r24, 0x08	; 8
    2f00:	8c 93       	st	X, r24
	SET_BIT(TCCR1A,FOC1B);
    2f02:	af e4       	ldi	r26, 0x4F	; 79
    2f04:	b0 e0       	ldi	r27, 0x00	; 0
    2f06:	ef e4       	ldi	r30, 0x4F	; 79
    2f08:	f0 e0       	ldi	r31, 0x00	; 0
    2f0a:	80 81       	ld	r24, Z
    2f0c:	84 60       	ori	r24, 0x04	; 4
    2f0e:	8c 93       	st	X, r24

	//assign initial value
	TCNT1 = Config_Ptr->initial_value;
    2f10:	ac e4       	ldi	r26, 0x4C	; 76
    2f12:	b0 e0       	ldi	r27, 0x00	; 0
    2f14:	e9 81       	ldd	r30, Y+1	; 0x01
    2f16:	fa 81       	ldd	r31, Y+2	; 0x02
    2f18:	80 81       	ld	r24, Z
    2f1a:	91 81       	ldd	r25, Z+1	; 0x01
    2f1c:	11 96       	adiw	r26, 0x01	; 1
    2f1e:	9c 93       	st	X, r25
    2f20:	8e 93       	st	-X, r24


//	TCCR1B 0 to 2 clock select
//	clock bits are 0 1 2    0000 0111 = f7
//							1111 1000 = ~f7
	TCCR1B = (TCCR1B & ~0xf7) | ( ( (Config_Ptr->prescaler) <<0) & 0xf7 );
    2f22:	ae e4       	ldi	r26, 0x4E	; 78
    2f24:	b0 e0       	ldi	r27, 0x00	; 0
    2f26:	ee e4       	ldi	r30, 0x4E	; 78
    2f28:	f0 e0       	ldi	r31, 0x00	; 0
    2f2a:	80 81       	ld	r24, Z
    2f2c:	98 2f       	mov	r25, r24
    2f2e:	98 70       	andi	r25, 0x08	; 8
    2f30:	e9 81       	ldd	r30, Y+1	; 0x01
    2f32:	fa 81       	ldd	r31, Y+2	; 0x02
    2f34:	84 81       	ldd	r24, Z+4	; 0x04
    2f36:	87 7f       	andi	r24, 0xF7	; 247
    2f38:	89 2b       	or	r24, r25
    2f3a:	8c 93       	st	X, r24


}
    2f3c:	0f 90       	pop	r0
    2f3e:	0f 90       	pop	r0
    2f40:	cf 91       	pop	r28
    2f42:	df 91       	pop	r29
    2f44:	08 95       	ret

00002f46 <Timer_1_deInit>:




void Timer_1_deInit(void){
    2f46:	df 93       	push	r29
    2f48:	cf 93       	push	r28
    2f4a:	cd b7       	in	r28, 0x3d	; 61
    2f4c:	de b7       	in	r29, 0x3e	; 62
	g_CallBackPtr = NULL_PTR;
    2f4e:	10 92 04 01 	sts	0x0104, r1
    2f52:	10 92 03 01 	sts	0x0103, r1
	TCCR1A = 0;
    2f56:	ef e4       	ldi	r30, 0x4F	; 79
    2f58:	f0 e0       	ldi	r31, 0x00	; 0
    2f5a:	10 82       	st	Z, r1
	TCCR1B = 0;
    2f5c:	ee e4       	ldi	r30, 0x4E	; 78
    2f5e:	f0 e0       	ldi	r31, 0x00	; 0
    2f60:	10 82       	st	Z, r1
	TCNT1 = 0;
    2f62:	ec e4       	ldi	r30, 0x4C	; 76
    2f64:	f0 e0       	ldi	r31, 0x00	; 0
    2f66:	11 82       	std	Z+1, r1	; 0x01
    2f68:	10 82       	st	Z, r1
	OCR1A = 0;
    2f6a:	ea e4       	ldi	r30, 0x4A	; 74
    2f6c:	f0 e0       	ldi	r31, 0x00	; 0
    2f6e:	11 82       	std	Z+1, r1	; 0x01
    2f70:	10 82       	st	Z, r1
	TIMSK &= 0x3c;
    2f72:	a9 e5       	ldi	r26, 0x59	; 89
    2f74:	b0 e0       	ldi	r27, 0x00	; 0
    2f76:	e9 e5       	ldi	r30, 0x59	; 89
    2f78:	f0 e0       	ldi	r31, 0x00	; 0
    2f7a:	80 81       	ld	r24, Z
    2f7c:	8c 73       	andi	r24, 0x3C	; 60
    2f7e:	8c 93       	st	X, r24
}
    2f80:	cf 91       	pop	r28
    2f82:	df 91       	pop	r29
    2f84:	08 95       	ret

00002f86 <Timer_1_setCallBack>:



void Timer_1_setCallBack(void(*a_ptr)(void)){
    2f86:	df 93       	push	r29
    2f88:	cf 93       	push	r28
    2f8a:	00 d0       	rcall	.+0      	; 0x2f8c <Timer_1_setCallBack+0x6>
    2f8c:	cd b7       	in	r28, 0x3d	; 61
    2f8e:	de b7       	in	r29, 0x3e	; 62
    2f90:	9a 83       	std	Y+2, r25	; 0x02
    2f92:	89 83       	std	Y+1, r24	; 0x01
	g_CallBackPtr=a_ptr;
    2f94:	89 81       	ldd	r24, Y+1	; 0x01
    2f96:	9a 81       	ldd	r25, Y+2	; 0x02
    2f98:	90 93 04 01 	sts	0x0104, r25
    2f9c:	80 93 03 01 	sts	0x0103, r24
}
    2fa0:	0f 90       	pop	r0
    2fa2:	0f 90       	pop	r0
    2fa4:	cf 91       	pop	r28
    2fa6:	df 91       	pop	r29
    2fa8:	08 95       	ret

00002faa <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(const TWI_ConfigType * Config_Ptr)
{
    2faa:	df 93       	push	r29
    2fac:	cf 93       	push	r28
    2fae:	00 d0       	rcall	.+0      	; 0x2fb0 <TWI_init+0x6>
    2fb0:	cd b7       	in	r28, 0x3d	; 61
    2fb2:	de b7       	in	r29, 0x3e	; 62
    2fb4:	9a 83       	std	Y+2, r25	; 0x02
    2fb6:	89 83       	std	Y+1, r24	; 0x01
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */

    TWBR = Config_Ptr->bit_rate;//configurable bitrate
    2fb8:	a0 e2       	ldi	r26, 0x20	; 32
    2fba:	b0 e0       	ldi	r27, 0x00	; 0
    2fbc:	e9 81       	ldd	r30, Y+1	; 0x01
    2fbe:	fa 81       	ldd	r31, Y+2	; 0x02
    2fc0:	82 81       	ldd	r24, Z+2	; 0x02
    2fc2:	8c 93       	st	X, r24

	TWSR = 0x00;
    2fc4:	e1 e2       	ldi	r30, 0x21	; 33
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	10 82       	st	Z, r1
	
    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
	
    TWAR = Config_Ptr->address; //specific address
    2fca:	a2 e2       	ldi	r26, 0x22	; 34
    2fcc:	b0 e0       	ldi	r27, 0x00	; 0
    2fce:	e9 81       	ldd	r30, Y+1	; 0x01
    2fd0:	fa 81       	ldd	r31, Y+2	; 0x02
    2fd2:	80 81       	ld	r24, Z
    2fd4:	91 81       	ldd	r25, Z+1	; 0x01
    2fd6:	8c 93       	st	X, r24

    TWCR = (1<<TWEN); /* enable TWI */
    2fd8:	e6 e5       	ldi	r30, 0x56	; 86
    2fda:	f0 e0       	ldi	r31, 0x00	; 0
    2fdc:	84 e0       	ldi	r24, 0x04	; 4
    2fde:	80 83       	st	Z, r24
}
    2fe0:	0f 90       	pop	r0
    2fe2:	0f 90       	pop	r0
    2fe4:	cf 91       	pop	r28
    2fe6:	df 91       	pop	r29
    2fe8:	08 95       	ret

00002fea <TWI_start>:

void TWI_start(void)
{
    2fea:	df 93       	push	r29
    2fec:	cf 93       	push	r28
    2fee:	cd b7       	in	r28, 0x3d	; 61
    2ff0:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2ff2:	e6 e5       	ldi	r30, 0x56	; 86
    2ff4:	f0 e0       	ldi	r31, 0x00	; 0
    2ff6:	84 ea       	ldi	r24, 0xA4	; 164
    2ff8:	80 83       	st	Z, r24
    
    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2ffa:	e6 e5       	ldi	r30, 0x56	; 86
    2ffc:	f0 e0       	ldi	r31, 0x00	; 0
    2ffe:	80 81       	ld	r24, Z
    3000:	88 23       	and	r24, r24
    3002:	dc f7       	brge	.-10     	; 0x2ffa <TWI_start+0x10>
}
    3004:	cf 91       	pop	r28
    3006:	df 91       	pop	r29
    3008:	08 95       	ret

0000300a <TWI_stop>:

void TWI_stop(void)
{
    300a:	df 93       	push	r29
    300c:	cf 93       	push	r28
    300e:	cd b7       	in	r28, 0x3d	; 61
    3010:	de b7       	in	r29, 0x3e	; 62
    /* 
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    3012:	e6 e5       	ldi	r30, 0x56	; 86
    3014:	f0 e0       	ldi	r31, 0x00	; 0
    3016:	84 e9       	ldi	r24, 0x94	; 148
    3018:	80 83       	st	Z, r24
}
    301a:	cf 91       	pop	r28
    301c:	df 91       	pop	r29
    301e:	08 95       	ret

00003020 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    3020:	df 93       	push	r29
    3022:	cf 93       	push	r28
    3024:	0f 92       	push	r0
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
    302a:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    302c:	e3 e2       	ldi	r30, 0x23	; 35
    302e:	f0 e0       	ldi	r31, 0x00	; 0
    3030:	89 81       	ldd	r24, Y+1	; 0x01
    3032:	80 83       	st	Z, r24
    /* 
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN);
    3034:	e6 e5       	ldi	r30, 0x56	; 86
    3036:	f0 e0       	ldi	r31, 0x00	; 0
    3038:	84 e8       	ldi	r24, 0x84	; 132
    303a:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    303c:	e6 e5       	ldi	r30, 0x56	; 86
    303e:	f0 e0       	ldi	r31, 0x00	; 0
    3040:	80 81       	ld	r24, Z
    3042:	88 23       	and	r24, r24
    3044:	dc f7       	brge	.-10     	; 0x303c <TWI_writeByte+0x1c>
}
    3046:	0f 90       	pop	r0
    3048:	cf 91       	pop	r28
    304a:	df 91       	pop	r29
    304c:	08 95       	ret

0000304e <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    304e:	df 93       	push	r29
    3050:	cf 93       	push	r28
    3052:	cd b7       	in	r28, 0x3d	; 61
    3054:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1 
	 */ 
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    3056:	e6 e5       	ldi	r30, 0x56	; 86
    3058:	f0 e0       	ldi	r31, 0x00	; 0
    305a:	84 ec       	ldi	r24, 0xC4	; 196
    305c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    305e:	e6 e5       	ldi	r30, 0x56	; 86
    3060:	f0 e0       	ldi	r31, 0x00	; 0
    3062:	80 81       	ld	r24, Z
    3064:	88 23       	and	r24, r24
    3066:	dc f7       	brge	.-10     	; 0x305e <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    3068:	e3 e2       	ldi	r30, 0x23	; 35
    306a:	f0 e0       	ldi	r31, 0x00	; 0
    306c:	80 81       	ld	r24, Z
}
    306e:	cf 91       	pop	r28
    3070:	df 91       	pop	r29
    3072:	08 95       	ret

00003074 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    3074:	df 93       	push	r29
    3076:	cf 93       	push	r28
    3078:	cd b7       	in	r28, 0x3d	; 61
    307a:	de b7       	in	r29, 0x3e	; 62
	/* 
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1 
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    307c:	e6 e5       	ldi	r30, 0x56	; 86
    307e:	f0 e0       	ldi	r31, 0x00	; 0
    3080:	84 e8       	ldi	r24, 0x84	; 132
    3082:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    3084:	e6 e5       	ldi	r30, 0x56	; 86
    3086:	f0 e0       	ldi	r31, 0x00	; 0
    3088:	80 81       	ld	r24, Z
    308a:	88 23       	and	r24, r24
    308c:	dc f7       	brge	.-10     	; 0x3084 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    308e:	e3 e2       	ldi	r30, 0x23	; 35
    3090:	f0 e0       	ldi	r31, 0x00	; 0
    3092:	80 81       	ld	r24, Z
}
    3094:	cf 91       	pop	r28
    3096:	df 91       	pop	r29
    3098:	08 95       	ret

0000309a <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    309a:	df 93       	push	r29
    309c:	cf 93       	push	r28
    309e:	0f 92       	push	r0
    30a0:	cd b7       	in	r28, 0x3d	; 61
    30a2:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    30a4:	e1 e2       	ldi	r30, 0x21	; 33
    30a6:	f0 e0       	ldi	r31, 0x00	; 0
    30a8:	80 81       	ld	r24, Z
    30aa:	88 7f       	andi	r24, 0xF8	; 248
    30ac:	89 83       	std	Y+1, r24	; 0x01
    return status;
    30ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    30b0:	0f 90       	pop	r0
    30b2:	cf 91       	pop	r28
    30b4:	df 91       	pop	r29
    30b6:	08 95       	ret

000030b8 <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(UART_ConfigType *UART_CONFIG_PTR)
{
    30b8:	df 93       	push	r29
    30ba:	cf 93       	push	r28
    30bc:	00 d0       	rcall	.+0      	; 0x30be <UART_init+0x6>
    30be:	00 d0       	rcall	.+0      	; 0x30c0 <UART_init+0x8>
    30c0:	cd b7       	in	r28, 0x3d	; 61
    30c2:	de b7       	in	r29, 0x3e	; 62
    30c4:	9c 83       	std	Y+4, r25	; 0x04
    30c6:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    30c8:	1a 82       	std	Y+2, r1	; 0x02
    30ca:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    30cc:	eb e2       	ldi	r30, 0x2B	; 43
    30ce:	f0 e0       	ldi	r31, 0x00	; 0
    30d0:	82 e0       	ldi	r24, 0x02	; 2
    30d2:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/ 
	UCSRB = (1<<RXEN) | (1<<TXEN);
    30d4:	ea e2       	ldi	r30, 0x2A	; 42
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	88 e1       	ldi	r24, 0x18	; 24
    30da:	80 83       	st	Z, r24
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/ 	
	SET_BIT(UCSRC,URSEL);
    30dc:	a0 e4       	ldi	r26, 0x40	; 64
    30de:	b0 e0       	ldi	r27, 0x00	; 0
    30e0:	e0 e4       	ldi	r30, 0x40	; 64
    30e2:	f0 e0       	ldi	r31, 0x00	; 0
    30e4:	80 81       	ld	r24, Z
    30e6:	80 68       	ori	r24, 0x80	; 128
    30e8:	8c 93       	st	X, r24

	UCSRC =( (UCSRC & ~0x40) | ( ( (UART_CONFIG_PTR->synchronization)<<UMSEL) & 0x40 ) );
    30ea:	a0 e4       	ldi	r26, 0x40	; 64
    30ec:	b0 e0       	ldi	r27, 0x00	; 0
    30ee:	e0 e4       	ldi	r30, 0x40	; 64
    30f0:	f0 e0       	ldi	r31, 0x00	; 0
    30f2:	80 81       	ld	r24, Z
    30f4:	28 2f       	mov	r18, r24
    30f6:	2f 7b       	andi	r18, 0xBF	; 191
    30f8:	eb 81       	ldd	r30, Y+3	; 0x03
    30fa:	fc 81       	ldd	r31, Y+4	; 0x04
    30fc:	87 81       	ldd	r24, Z+7	; 0x07
    30fe:	88 2f       	mov	r24, r24
    3100:	90 e0       	ldi	r25, 0x00	; 0
    3102:	00 24       	eor	r0, r0
    3104:	96 95       	lsr	r25
    3106:	87 95       	ror	r24
    3108:	07 94       	ror	r0
    310a:	96 95       	lsr	r25
    310c:	87 95       	ror	r24
    310e:	07 94       	ror	r0
    3110:	98 2f       	mov	r25, r24
    3112:	80 2d       	mov	r24, r0
    3114:	80 74       	andi	r24, 0x40	; 64
    3116:	82 2b       	or	r24, r18
    3118:	8c 93       	st	X, r24
	UCSRC =( (UCSRC & ~0x30) | ( ( (UART_CONFIG_PTR->parity)<<UPM0) & 0x30) );
    311a:	a0 e4       	ldi	r26, 0x40	; 64
    311c:	b0 e0       	ldi	r27, 0x00	; 0
    311e:	e0 e4       	ldi	r30, 0x40	; 64
    3120:	f0 e0       	ldi	r31, 0x00	; 0
    3122:	80 81       	ld	r24, Z
    3124:	28 2f       	mov	r18, r24
    3126:	2f 7c       	andi	r18, 0xCF	; 207
    3128:	eb 81       	ldd	r30, Y+3	; 0x03
    312a:	fc 81       	ldd	r31, Y+4	; 0x04
    312c:	81 81       	ldd	r24, Z+1	; 0x01
    312e:	88 2f       	mov	r24, r24
    3130:	90 e0       	ldi	r25, 0x00	; 0
    3132:	82 95       	swap	r24
    3134:	92 95       	swap	r25
    3136:	90 7f       	andi	r25, 0xF0	; 240
    3138:	98 27       	eor	r25, r24
    313a:	80 7f       	andi	r24, 0xF0	; 240
    313c:	98 27       	eor	r25, r24
    313e:	80 73       	andi	r24, 0x30	; 48
    3140:	82 2b       	or	r24, r18
    3142:	8c 93       	st	X, r24
	UCSRC =( (UCSRC & ~0x08) | ( ( (UART_CONFIG_PTR->stop_bit)<<USBS) & 0x08) );
    3144:	a0 e4       	ldi	r26, 0x40	; 64
    3146:	b0 e0       	ldi	r27, 0x00	; 0
    3148:	e0 e4       	ldi	r30, 0x40	; 64
    314a:	f0 e0       	ldi	r31, 0x00	; 0
    314c:	80 81       	ld	r24, Z
    314e:	28 2f       	mov	r18, r24
    3150:	27 7f       	andi	r18, 0xF7	; 247
    3152:	eb 81       	ldd	r30, Y+3	; 0x03
    3154:	fc 81       	ldd	r31, Y+4	; 0x04
    3156:	82 81       	ldd	r24, Z+2	; 0x02
    3158:	88 2f       	mov	r24, r24
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	88 0f       	add	r24, r24
    315e:	99 1f       	adc	r25, r25
    3160:	88 0f       	add	r24, r24
    3162:	99 1f       	adc	r25, r25
    3164:	88 0f       	add	r24, r24
    3166:	99 1f       	adc	r25, r25
    3168:	88 70       	andi	r24, 0x08	; 8
    316a:	82 2b       	or	r24, r18
    316c:	8c 93       	st	X, r24
	UCSRC =( (UCSRC & ~0x06) | ( ( (UART_CONFIG_PTR->bit_data)<<UCSZ0) & 0x06) );
    316e:	a0 e4       	ldi	r26, 0x40	; 64
    3170:	b0 e0       	ldi	r27, 0x00	; 0
    3172:	e0 e4       	ldi	r30, 0x40	; 64
    3174:	f0 e0       	ldi	r31, 0x00	; 0
    3176:	80 81       	ld	r24, Z
    3178:	28 2f       	mov	r18, r24
    317a:	29 7f       	andi	r18, 0xF9	; 249
    317c:	eb 81       	ldd	r30, Y+3	; 0x03
    317e:	fc 81       	ldd	r31, Y+4	; 0x04
    3180:	80 81       	ld	r24, Z
    3182:	88 2f       	mov	r24, r24
    3184:	90 e0       	ldi	r25, 0x00	; 0
    3186:	88 0f       	add	r24, r24
    3188:	99 1f       	adc	r25, r25
    318a:	86 70       	andi	r24, 0x06	; 6
    318c:	82 2b       	or	r24, r18
    318e:	8c 93       	st	X, r24


	
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (UART_CONFIG_PTR->baud_rate * 8UL))) - 1);
    3190:	eb 81       	ldd	r30, Y+3	; 0x03
    3192:	fc 81       	ldd	r31, Y+4	; 0x04
    3194:	83 81       	ldd	r24, Z+3	; 0x03
    3196:	94 81       	ldd	r25, Z+4	; 0x04
    3198:	a5 81       	ldd	r26, Z+5	; 0x05
    319a:	b6 81       	ldd	r27, Z+6	; 0x06
    319c:	88 0f       	add	r24, r24
    319e:	99 1f       	adc	r25, r25
    31a0:	aa 1f       	adc	r26, r26
    31a2:	bb 1f       	adc	r27, r27
    31a4:	88 0f       	add	r24, r24
    31a6:	99 1f       	adc	r25, r25
    31a8:	aa 1f       	adc	r26, r26
    31aa:	bb 1f       	adc	r27, r27
    31ac:	88 0f       	add	r24, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	aa 1f       	adc	r26, r26
    31b2:	bb 1f       	adc	r27, r27
    31b4:	9c 01       	movw	r18, r24
    31b6:	ad 01       	movw	r20, r26
    31b8:	80 e0       	ldi	r24, 0x00	; 0
    31ba:	92 e1       	ldi	r25, 0x12	; 18
    31bc:	aa e7       	ldi	r26, 0x7A	; 122
    31be:	b0 e0       	ldi	r27, 0x00	; 0
    31c0:	bc 01       	movw	r22, r24
    31c2:	cd 01       	movw	r24, r26
    31c4:	0e 94 ca 19 	call	0x3394	; 0x3394 <__udivmodsi4>
    31c8:	da 01       	movw	r26, r20
    31ca:	c9 01       	movw	r24, r18
    31cc:	01 97       	sbiw	r24, 0x01	; 1
    31ce:	9a 83       	std	Y+2, r25	; 0x02
    31d0:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    31d2:	e0 e4       	ldi	r30, 0x40	; 64
    31d4:	f0 e0       	ldi	r31, 0x00	; 0
    31d6:	89 81       	ldd	r24, Y+1	; 0x01
    31d8:	9a 81       	ldd	r25, Y+2	; 0x02
    31da:	89 2f       	mov	r24, r25
    31dc:	99 27       	eor	r25, r25
    31de:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    31e0:	e9 e2       	ldi	r30, 0x29	; 41
    31e2:	f0 e0       	ldi	r31, 0x00	; 0
    31e4:	89 81       	ldd	r24, Y+1	; 0x01
    31e6:	80 83       	st	Z, r24
}
    31e8:	0f 90       	pop	r0
    31ea:	0f 90       	pop	r0
    31ec:	0f 90       	pop	r0
    31ee:	0f 90       	pop	r0
    31f0:	cf 91       	pop	r28
    31f2:	df 91       	pop	r29
    31f4:	08 95       	ret

000031f6 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    31f6:	df 93       	push	r29
    31f8:	cf 93       	push	r28
    31fa:	0f 92       	push	r0
    31fc:	cd b7       	in	r28, 0x3d	; 61
    31fe:	de b7       	in	r29, 0x3e	; 62
    3200:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    3202:	eb e2       	ldi	r30, 0x2B	; 43
    3204:	f0 e0       	ldi	r31, 0x00	; 0
    3206:	80 81       	ld	r24, Z
    3208:	88 2f       	mov	r24, r24
    320a:	90 e0       	ldi	r25, 0x00	; 0
    320c:	80 72       	andi	r24, 0x20	; 32
    320e:	90 70       	andi	r25, 0x00	; 0
    3210:	00 97       	sbiw	r24, 0x00	; 0
    3212:	b9 f3       	breq	.-18     	; 0x3202 <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    3214:	ec e2       	ldi	r30, 0x2C	; 44
    3216:	f0 e0       	ldi	r31, 0x00	; 0
    3218:	89 81       	ldd	r24, Y+1	; 0x01
    321a:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    321c:	0f 90       	pop	r0
    321e:	cf 91       	pop	r28
    3220:	df 91       	pop	r29
    3222:	08 95       	ret

00003224 <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    3224:	df 93       	push	r29
    3226:	cf 93       	push	r28
    3228:	cd b7       	in	r28, 0x3d	; 61
    322a:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    322c:	eb e2       	ldi	r30, 0x2B	; 43
    322e:	f0 e0       	ldi	r31, 0x00	; 0
    3230:	80 81       	ld	r24, Z
    3232:	88 23       	and	r24, r24
    3234:	dc f7       	brge	.-10     	; 0x322c <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;		
    3236:	ec e2       	ldi	r30, 0x2C	; 44
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 81       	ld	r24, Z
}
    323c:	cf 91       	pop	r28
    323e:	df 91       	pop	r29
    3240:	08 95       	ret

00003242 <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    3242:	df 93       	push	r29
    3244:	cf 93       	push	r28
    3246:	00 d0       	rcall	.+0      	; 0x3248 <UART_sendString+0x6>
    3248:	0f 92       	push	r0
    324a:	cd b7       	in	r28, 0x3d	; 61
    324c:	de b7       	in	r29, 0x3e	; 62
    324e:	9b 83       	std	Y+3, r25	; 0x03
    3250:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    3252:	19 82       	std	Y+1, r1	; 0x01
    3254:	0e c0       	rjmp	.+28     	; 0x3272 <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    3256:	89 81       	ldd	r24, Y+1	; 0x01
    3258:	28 2f       	mov	r18, r24
    325a:	30 e0       	ldi	r19, 0x00	; 0
    325c:	8a 81       	ldd	r24, Y+2	; 0x02
    325e:	9b 81       	ldd	r25, Y+3	; 0x03
    3260:	fc 01       	movw	r30, r24
    3262:	e2 0f       	add	r30, r18
    3264:	f3 1f       	adc	r31, r19
    3266:	80 81       	ld	r24, Z
    3268:	0e 94 fb 18 	call	0x31f6	; 0x31f6 <UART_sendByte>
		i++;
    326c:	89 81       	ldd	r24, Y+1	; 0x01
    326e:	8f 5f       	subi	r24, 0xFF	; 255
    3270:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    3272:	89 81       	ldd	r24, Y+1	; 0x01
    3274:	28 2f       	mov	r18, r24
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	8a 81       	ldd	r24, Y+2	; 0x02
    327a:	9b 81       	ldd	r25, Y+3	; 0x03
    327c:	fc 01       	movw	r30, r24
    327e:	e2 0f       	add	r30, r18
    3280:	f3 1f       	adc	r31, r19
    3282:	80 81       	ld	r24, Z
    3284:	88 23       	and	r24, r24
    3286:	39 f7       	brne	.-50     	; 0x3256 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}		
	*******************************************************************/
}
    3288:	0f 90       	pop	r0
    328a:	0f 90       	pop	r0
    328c:	0f 90       	pop	r0
    328e:	cf 91       	pop	r28
    3290:	df 91       	pop	r29
    3292:	08 95       	ret

00003294 <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    3294:	0f 93       	push	r16
    3296:	1f 93       	push	r17
    3298:	df 93       	push	r29
    329a:	cf 93       	push	r28
    329c:	00 d0       	rcall	.+0      	; 0x329e <UART_receiveString+0xa>
    329e:	0f 92       	push	r0
    32a0:	cd b7       	in	r28, 0x3d	; 61
    32a2:	de b7       	in	r29, 0x3e	; 62
    32a4:	9b 83       	std	Y+3, r25	; 0x03
    32a6:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    32a8:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    32aa:	89 81       	ldd	r24, Y+1	; 0x01
    32ac:	28 2f       	mov	r18, r24
    32ae:	30 e0       	ldi	r19, 0x00	; 0
    32b0:	8a 81       	ldd	r24, Y+2	; 0x02
    32b2:	9b 81       	ldd	r25, Y+3	; 0x03
    32b4:	8c 01       	movw	r16, r24
    32b6:	02 0f       	add	r16, r18
    32b8:	13 1f       	adc	r17, r19
    32ba:	0e 94 12 19 	call	0x3224	; 0x3224 <UART_recieveByte>
    32be:	f8 01       	movw	r30, r16
    32c0:	80 83       	st	Z, r24
    32c2:	0f c0       	rjmp	.+30     	; 0x32e2 <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    32c4:	89 81       	ldd	r24, Y+1	; 0x01
    32c6:	8f 5f       	subi	r24, 0xFF	; 255
    32c8:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    32ca:	89 81       	ldd	r24, Y+1	; 0x01
    32cc:	28 2f       	mov	r18, r24
    32ce:	30 e0       	ldi	r19, 0x00	; 0
    32d0:	8a 81       	ldd	r24, Y+2	; 0x02
    32d2:	9b 81       	ldd	r25, Y+3	; 0x03
    32d4:	8c 01       	movw	r16, r24
    32d6:	02 0f       	add	r16, r18
    32d8:	13 1f       	adc	r17, r19
    32da:	0e 94 12 19 	call	0x3224	; 0x3224 <UART_recieveByte>
    32de:	f8 01       	movw	r30, r16
    32e0:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    32e2:	89 81       	ldd	r24, Y+1	; 0x01
    32e4:	28 2f       	mov	r18, r24
    32e6:	30 e0       	ldi	r19, 0x00	; 0
    32e8:	8a 81       	ldd	r24, Y+2	; 0x02
    32ea:	9b 81       	ldd	r25, Y+3	; 0x03
    32ec:	fc 01       	movw	r30, r24
    32ee:	e2 0f       	add	r30, r18
    32f0:	f3 1f       	adc	r31, r19
    32f2:	80 81       	ld	r24, Z
    32f4:	83 32       	cpi	r24, 0x23	; 35
    32f6:	31 f7       	brne	.-52     	; 0x32c4 <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    32f8:	89 81       	ldd	r24, Y+1	; 0x01
    32fa:	28 2f       	mov	r18, r24
    32fc:	30 e0       	ldi	r19, 0x00	; 0
    32fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3300:	9b 81       	ldd	r25, Y+3	; 0x03
    3302:	fc 01       	movw	r30, r24
    3304:	e2 0f       	add	r30, r18
    3306:	f3 1f       	adc	r31, r19
    3308:	10 82       	st	Z, r1
}
    330a:	0f 90       	pop	r0
    330c:	0f 90       	pop	r0
    330e:	0f 90       	pop	r0
    3310:	cf 91       	pop	r28
    3312:	df 91       	pop	r29
    3314:	1f 91       	pop	r17
    3316:	0f 91       	pop	r16
    3318:	08 95       	ret

0000331a <UART_recieveArray>:


void UART_recieveArray(uint8 *password_array,uint8 size){
    331a:	0f 93       	push	r16
    331c:	1f 93       	push	r17
    331e:	df 93       	push	r29
    3320:	cf 93       	push	r28
    3322:	00 d0       	rcall	.+0      	; 0x3324 <UART_recieveArray+0xa>
    3324:	00 d0       	rcall	.+0      	; 0x3326 <UART_recieveArray+0xc>
    3326:	cd b7       	in	r28, 0x3d	; 61
    3328:	de b7       	in	r29, 0x3e	; 62
    332a:	9b 83       	std	Y+3, r25	; 0x03
    332c:	8a 83       	std	Y+2, r24	; 0x02
    332e:	6c 83       	std	Y+4, r22	; 0x04

	uint8 i;
	for(i=0;i<size;i++){
    3330:	19 82       	std	Y+1, r1	; 0x01
    3332:	0f c0       	rjmp	.+30     	; 0x3352 <UART_recieveArray+0x38>
		password_array[i]=UART_recieveByte();
    3334:	89 81       	ldd	r24, Y+1	; 0x01
    3336:	28 2f       	mov	r18, r24
    3338:	30 e0       	ldi	r19, 0x00	; 0
    333a:	8a 81       	ldd	r24, Y+2	; 0x02
    333c:	9b 81       	ldd	r25, Y+3	; 0x03
    333e:	8c 01       	movw	r16, r24
    3340:	02 0f       	add	r16, r18
    3342:	13 1f       	adc	r17, r19
    3344:	0e 94 12 19 	call	0x3224	; 0x3224 <UART_recieveByte>
    3348:	f8 01       	movw	r30, r16
    334a:	80 83       	st	Z, r24


void UART_recieveArray(uint8 *password_array,uint8 size){

	uint8 i;
	for(i=0;i<size;i++){
    334c:	89 81       	ldd	r24, Y+1	; 0x01
    334e:	8f 5f       	subi	r24, 0xFF	; 255
    3350:	89 83       	std	Y+1, r24	; 0x01
    3352:	99 81       	ldd	r25, Y+1	; 0x01
    3354:	8c 81       	ldd	r24, Y+4	; 0x04
    3356:	98 17       	cp	r25, r24
    3358:	68 f3       	brcs	.-38     	; 0x3334 <UART_recieveArray+0x1a>
		password_array[i]=UART_recieveByte();

	}
}
    335a:	0f 90       	pop	r0
    335c:	0f 90       	pop	r0
    335e:	0f 90       	pop	r0
    3360:	0f 90       	pop	r0
    3362:	cf 91       	pop	r28
    3364:	df 91       	pop	r29
    3366:	1f 91       	pop	r17
    3368:	0f 91       	pop	r16
    336a:	08 95       	ret

0000336c <__udivmodhi4>:
    336c:	aa 1b       	sub	r26, r26
    336e:	bb 1b       	sub	r27, r27
    3370:	51 e1       	ldi	r21, 0x11	; 17
    3372:	07 c0       	rjmp	.+14     	; 0x3382 <__udivmodhi4_ep>

00003374 <__udivmodhi4_loop>:
    3374:	aa 1f       	adc	r26, r26
    3376:	bb 1f       	adc	r27, r27
    3378:	a6 17       	cp	r26, r22
    337a:	b7 07       	cpc	r27, r23
    337c:	10 f0       	brcs	.+4      	; 0x3382 <__udivmodhi4_ep>
    337e:	a6 1b       	sub	r26, r22
    3380:	b7 0b       	sbc	r27, r23

00003382 <__udivmodhi4_ep>:
    3382:	88 1f       	adc	r24, r24
    3384:	99 1f       	adc	r25, r25
    3386:	5a 95       	dec	r21
    3388:	a9 f7       	brne	.-22     	; 0x3374 <__udivmodhi4_loop>
    338a:	80 95       	com	r24
    338c:	90 95       	com	r25
    338e:	bc 01       	movw	r22, r24
    3390:	cd 01       	movw	r24, r26
    3392:	08 95       	ret

00003394 <__udivmodsi4>:
    3394:	a1 e2       	ldi	r26, 0x21	; 33
    3396:	1a 2e       	mov	r1, r26
    3398:	aa 1b       	sub	r26, r26
    339a:	bb 1b       	sub	r27, r27
    339c:	fd 01       	movw	r30, r26
    339e:	0d c0       	rjmp	.+26     	; 0x33ba <__udivmodsi4_ep>

000033a0 <__udivmodsi4_loop>:
    33a0:	aa 1f       	adc	r26, r26
    33a2:	bb 1f       	adc	r27, r27
    33a4:	ee 1f       	adc	r30, r30
    33a6:	ff 1f       	adc	r31, r31
    33a8:	a2 17       	cp	r26, r18
    33aa:	b3 07       	cpc	r27, r19
    33ac:	e4 07       	cpc	r30, r20
    33ae:	f5 07       	cpc	r31, r21
    33b0:	20 f0       	brcs	.+8      	; 0x33ba <__udivmodsi4_ep>
    33b2:	a2 1b       	sub	r26, r18
    33b4:	b3 0b       	sbc	r27, r19
    33b6:	e4 0b       	sbc	r30, r20
    33b8:	f5 0b       	sbc	r31, r21

000033ba <__udivmodsi4_ep>:
    33ba:	66 1f       	adc	r22, r22
    33bc:	77 1f       	adc	r23, r23
    33be:	88 1f       	adc	r24, r24
    33c0:	99 1f       	adc	r25, r25
    33c2:	1a 94       	dec	r1
    33c4:	69 f7       	brne	.-38     	; 0x33a0 <__udivmodsi4_loop>
    33c6:	60 95       	com	r22
    33c8:	70 95       	com	r23
    33ca:	80 95       	com	r24
    33cc:	90 95       	com	r25
    33ce:	9b 01       	movw	r18, r22
    33d0:	ac 01       	movw	r20, r24
    33d2:	bd 01       	movw	r22, r26
    33d4:	cf 01       	movw	r24, r30
    33d6:	08 95       	ret

000033d8 <__prologue_saves__>:
    33d8:	2f 92       	push	r2
    33da:	3f 92       	push	r3
    33dc:	4f 92       	push	r4
    33de:	5f 92       	push	r5
    33e0:	6f 92       	push	r6
    33e2:	7f 92       	push	r7
    33e4:	8f 92       	push	r8
    33e6:	9f 92       	push	r9
    33e8:	af 92       	push	r10
    33ea:	bf 92       	push	r11
    33ec:	cf 92       	push	r12
    33ee:	df 92       	push	r13
    33f0:	ef 92       	push	r14
    33f2:	ff 92       	push	r15
    33f4:	0f 93       	push	r16
    33f6:	1f 93       	push	r17
    33f8:	cf 93       	push	r28
    33fa:	df 93       	push	r29
    33fc:	cd b7       	in	r28, 0x3d	; 61
    33fe:	de b7       	in	r29, 0x3e	; 62
    3400:	ca 1b       	sub	r28, r26
    3402:	db 0b       	sbc	r29, r27
    3404:	0f b6       	in	r0, 0x3f	; 63
    3406:	f8 94       	cli
    3408:	de bf       	out	0x3e, r29	; 62
    340a:	0f be       	out	0x3f, r0	; 63
    340c:	cd bf       	out	0x3d, r28	; 61
    340e:	09 94       	ijmp

00003410 <__epilogue_restores__>:
    3410:	2a 88       	ldd	r2, Y+18	; 0x12
    3412:	39 88       	ldd	r3, Y+17	; 0x11
    3414:	48 88       	ldd	r4, Y+16	; 0x10
    3416:	5f 84       	ldd	r5, Y+15	; 0x0f
    3418:	6e 84       	ldd	r6, Y+14	; 0x0e
    341a:	7d 84       	ldd	r7, Y+13	; 0x0d
    341c:	8c 84       	ldd	r8, Y+12	; 0x0c
    341e:	9b 84       	ldd	r9, Y+11	; 0x0b
    3420:	aa 84       	ldd	r10, Y+10	; 0x0a
    3422:	b9 84       	ldd	r11, Y+9	; 0x09
    3424:	c8 84       	ldd	r12, Y+8	; 0x08
    3426:	df 80       	ldd	r13, Y+7	; 0x07
    3428:	ee 80       	ldd	r14, Y+6	; 0x06
    342a:	fd 80       	ldd	r15, Y+5	; 0x05
    342c:	0c 81       	ldd	r16, Y+4	; 0x04
    342e:	1b 81       	ldd	r17, Y+3	; 0x03
    3430:	aa 81       	ldd	r26, Y+2	; 0x02
    3432:	b9 81       	ldd	r27, Y+1	; 0x01
    3434:	ce 0f       	add	r28, r30
    3436:	d1 1d       	adc	r29, r1
    3438:	0f b6       	in	r0, 0x3f	; 63
    343a:	f8 94       	cli
    343c:	de bf       	out	0x3e, r29	; 62
    343e:	0f be       	out	0x3f, r0	; 63
    3440:	cd bf       	out	0x3d, r28	; 61
    3442:	ed 01       	movw	r28, r26
    3444:	08 95       	ret

00003446 <itoa>:
    3446:	fb 01       	movw	r30, r22
    3448:	9f 01       	movw	r18, r30
    344a:	e8 94       	clt
    344c:	42 30       	cpi	r20, 0x02	; 2
    344e:	c4 f0       	brlt	.+48     	; 0x3480 <itoa+0x3a>
    3450:	45 32       	cpi	r20, 0x25	; 37
    3452:	b4 f4       	brge	.+44     	; 0x3480 <itoa+0x3a>
    3454:	4a 30       	cpi	r20, 0x0A	; 10
    3456:	29 f4       	brne	.+10     	; 0x3462 <itoa+0x1c>
    3458:	97 fb       	bst	r25, 7
    345a:	1e f4       	brtc	.+6      	; 0x3462 <itoa+0x1c>
    345c:	90 95       	com	r25
    345e:	81 95       	neg	r24
    3460:	9f 4f       	sbci	r25, 0xFF	; 255
    3462:	64 2f       	mov	r22, r20
    3464:	77 27       	eor	r23, r23
    3466:	0e 94 b6 19 	call	0x336c	; 0x336c <__udivmodhi4>
    346a:	80 5d       	subi	r24, 0xD0	; 208
    346c:	8a 33       	cpi	r24, 0x3A	; 58
    346e:	0c f0       	brlt	.+2      	; 0x3472 <itoa+0x2c>
    3470:	89 5d       	subi	r24, 0xD9	; 217
    3472:	81 93       	st	Z+, r24
    3474:	cb 01       	movw	r24, r22
    3476:	00 97       	sbiw	r24, 0x00	; 0
    3478:	a1 f7       	brne	.-24     	; 0x3462 <itoa+0x1c>
    347a:	16 f4       	brtc	.+4      	; 0x3480 <itoa+0x3a>
    347c:	5d e2       	ldi	r21, 0x2D	; 45
    347e:	51 93       	st	Z+, r21
    3480:	10 82       	st	Z, r1
    3482:	c9 01       	movw	r24, r18
    3484:	0c 94 44 1a 	jmp	0x3488	; 0x3488 <strrev>

00003488 <strrev>:
    3488:	dc 01       	movw	r26, r24
    348a:	fc 01       	movw	r30, r24
    348c:	67 2f       	mov	r22, r23
    348e:	71 91       	ld	r23, Z+
    3490:	77 23       	and	r23, r23
    3492:	e1 f7       	brne	.-8      	; 0x348c <strrev+0x4>
    3494:	32 97       	sbiw	r30, 0x02	; 2
    3496:	04 c0       	rjmp	.+8      	; 0x34a0 <strrev+0x18>
    3498:	7c 91       	ld	r23, X
    349a:	6d 93       	st	X+, r22
    349c:	70 83       	st	Z, r23
    349e:	62 91       	ld	r22, -Z
    34a0:	ae 17       	cp	r26, r30
    34a2:	bf 07       	cpc	r27, r31
    34a4:	c8 f3       	brcs	.-14     	; 0x3498 <strrev+0x10>
    34a6:	08 95       	ret

000034a8 <_exit>:
    34a8:	f8 94       	cli

000034aa <__stop_program>:
    34aa:	ff cf       	rjmp	.-2      	; 0x34aa <__stop_program>
